
mini_mth_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008534  08008534  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008534  08008534  00009534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800853c  0800853c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800853c  0800853c  0000953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008544  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042cc  20000060  080085a4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000432c  080085a4  0000a32c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d08  00000000  00000000  0000a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005741  00000000  00000000  0002ed91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  000344d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001774  00000000  00000000  00036358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d900  00000000  00000000  00037acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a4ab  00000000  00000000  000553cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ecd2  00000000  00000000  0007f877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008378  00000000  00000000  0011e58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00126904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080082e4 	.word	0x080082e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080082e4 	.word	0x080082e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b968 	b.w	8000448 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9d08      	ldr	r5, [sp, #32]
 8000196:	460c      	mov	r4, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14e      	bne.n	800023a <__udivmoddi4+0xaa>
 800019c:	4694      	mov	ip, r2
 800019e:	458c      	cmp	ip, r1
 80001a0:	4686      	mov	lr, r0
 80001a2:	fab2 f282 	clz	r2, r2
 80001a6:	d962      	bls.n	800026e <__udivmoddi4+0xde>
 80001a8:	b14a      	cbz	r2, 80001be <__udivmoddi4+0x2e>
 80001aa:	f1c2 0320 	rsb	r3, r2, #32
 80001ae:	4091      	lsls	r1, r2
 80001b0:	fa20 f303 	lsr.w	r3, r0, r3
 80001b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b8:	4319      	orrs	r1, r3
 80001ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80001be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001c6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ca:	fa1f f68c 	uxth.w	r6, ip
 80001ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001d6:	fb04 f106 	mul.w	r1, r4, r6
 80001da:	4299      	cmp	r1, r3
 80001dc:	d90a      	bls.n	80001f4 <__udivmoddi4+0x64>
 80001de:	eb1c 0303 	adds.w	r3, ip, r3
 80001e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001e6:	f080 8110 	bcs.w	800040a <__udivmoddi4+0x27a>
 80001ea:	4299      	cmp	r1, r3
 80001ec:	f240 810d 	bls.w	800040a <__udivmoddi4+0x27a>
 80001f0:	3c02      	subs	r4, #2
 80001f2:	4463      	add	r3, ip
 80001f4:	1a59      	subs	r1, r3, r1
 80001f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001fa:	fb07 1110 	mls	r1, r7, r0, r1
 80001fe:	fb00 f606 	mul.w	r6, r0, r6
 8000202:	fa1f f38e 	uxth.w	r3, lr
 8000206:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800020a:	429e      	cmp	r6, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f100 31ff 	add.w	r1, r0, #4294967295
 8000216:	f080 80fa 	bcs.w	800040e <__udivmoddi4+0x27e>
 800021a:	429e      	cmp	r6, r3
 800021c:	f240 80f7 	bls.w	800040e <__udivmoddi4+0x27e>
 8000220:	4463      	add	r3, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	1b9b      	subs	r3, r3, r6
 8000228:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800022c:	b11d      	cbz	r5, 8000236 <__udivmoddi4+0xa6>
 800022e:	40d3      	lsrs	r3, r2
 8000230:	2200      	movs	r2, #0
 8000232:	e9c5 3200 	strd	r3, r2, [r5]
 8000236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023a:	428b      	cmp	r3, r1
 800023c:	d905      	bls.n	800024a <__udivmoddi4+0xba>
 800023e:	b10d      	cbz	r5, 8000244 <__udivmoddi4+0xb4>
 8000240:	e9c5 0100 	strd	r0, r1, [r5]
 8000244:	2100      	movs	r1, #0
 8000246:	4608      	mov	r0, r1
 8000248:	e7f5      	b.n	8000236 <__udivmoddi4+0xa6>
 800024a:	fab3 f183 	clz	r1, r3
 800024e:	2900      	cmp	r1, #0
 8000250:	d146      	bne.n	80002e0 <__udivmoddi4+0x150>
 8000252:	42a3      	cmp	r3, r4
 8000254:	d302      	bcc.n	800025c <__udivmoddi4+0xcc>
 8000256:	4290      	cmp	r0, r2
 8000258:	f0c0 80ee 	bcc.w	8000438 <__udivmoddi4+0x2a8>
 800025c:	1a86      	subs	r6, r0, r2
 800025e:	eb64 0303 	sbc.w	r3, r4, r3
 8000262:	2001      	movs	r0, #1
 8000264:	2d00      	cmp	r5, #0
 8000266:	d0e6      	beq.n	8000236 <__udivmoddi4+0xa6>
 8000268:	e9c5 6300 	strd	r6, r3, [r5]
 800026c:	e7e3      	b.n	8000236 <__udivmoddi4+0xa6>
 800026e:	2a00      	cmp	r2, #0
 8000270:	f040 808f 	bne.w	8000392 <__udivmoddi4+0x202>
 8000274:	eba1 040c 	sub.w	r4, r1, ip
 8000278:	2101      	movs	r1, #1
 800027a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fbb4 f6f8 	udiv	r6, r4, r8
 8000286:	fb08 4416 	mls	r4, r8, r6, r4
 800028a:	fb07 f006 	mul.w	r0, r7, r6
 800028e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000296:	4298      	cmp	r0, r3
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x11c>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f106 34ff 	add.w	r4, r6, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x11a>
 80002a4:	4298      	cmp	r0, r3
 80002a6:	f200 80cb 	bhi.w	8000440 <__udivmoddi4+0x2b0>
 80002aa:	4626      	mov	r6, r4
 80002ac:	1a1c      	subs	r4, r3, r0
 80002ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80002b2:	fb08 4410 	mls	r4, r8, r0, r4
 80002b6:	fb00 f707 	mul.w	r7, r0, r7
 80002ba:	fa1f f38e 	uxth.w	r3, lr
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	429f      	cmp	r7, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x148>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x146>
 80002d0:	429f      	cmp	r7, r3
 80002d2:	f200 80ae 	bhi.w	8000432 <__udivmoddi4+0x2a2>
 80002d6:	4620      	mov	r0, r4
 80002d8:	1bdb      	subs	r3, r3, r7
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	e7a5      	b.n	800022c <__udivmoddi4+0x9c>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa24 f607 	lsr.w	r6, r4, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	fb09 6618 	mls	r6, r9, r8, r6
 8000302:	fa20 f307 	lsr.w	r3, r0, r7
 8000306:	408c      	lsls	r4, r1
 8000308:	fa00 fa01 	lsl.w	sl, r0, r1
 800030c:	fb08 f00e 	mul.w	r0, r8, lr
 8000310:	431c      	orrs	r4, r3
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000318:	4298      	cmp	r0, r3
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x1a6>
 8000320:	eb1c 0303 	adds.w	r3, ip, r3
 8000324:	f108 36ff 	add.w	r6, r8, #4294967295
 8000328:	f080 8081 	bcs.w	800042e <__udivmoddi4+0x29e>
 800032c:	4298      	cmp	r0, r3
 800032e:	d97e      	bls.n	800042e <__udivmoddi4+0x29e>
 8000330:	f1a8 0802 	sub.w	r8, r8, #2
 8000334:	4463      	add	r3, ip
 8000336:	1a1e      	subs	r6, r3, r0
 8000338:	fbb6 f3f9 	udiv	r3, r6, r9
 800033c:	fb09 6613 	mls	r6, r9, r3, r6
 8000340:	fb03 fe0e 	mul.w	lr, r3, lr
 8000344:	b2a4      	uxth	r4, r4
 8000346:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800034a:	45a6      	cmp	lr, r4
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x1d0>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f103 30ff 	add.w	r0, r3, #4294967295
 8000356:	d266      	bcs.n	8000426 <__udivmoddi4+0x296>
 8000358:	45a6      	cmp	lr, r4
 800035a:	d964      	bls.n	8000426 <__udivmoddi4+0x296>
 800035c:	3b02      	subs	r3, #2
 800035e:	4464      	add	r4, ip
 8000360:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000364:	fba0 8302 	umull	r8, r3, r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	429c      	cmp	r4, r3
 800036e:	46c6      	mov	lr, r8
 8000370:	461e      	mov	r6, r3
 8000372:	d350      	bcc.n	8000416 <__udivmoddi4+0x286>
 8000374:	d04d      	beq.n	8000412 <__udivmoddi4+0x282>
 8000376:	b155      	cbz	r5, 800038e <__udivmoddi4+0x1fe>
 8000378:	ebba 030e 	subs.w	r3, sl, lr
 800037c:	eb64 0406 	sbc.w	r4, r4, r6
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	40cb      	lsrs	r3, r1
 8000386:	431f      	orrs	r7, r3
 8000388:	40cc      	lsrs	r4, r1
 800038a:	e9c5 7400 	strd	r7, r4, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	e751      	b.n	8000236 <__udivmoddi4+0xa6>
 8000392:	fa0c fc02 	lsl.w	ip, ip, r2
 8000396:	f1c2 0320 	rsb	r3, r2, #32
 800039a:	40d9      	lsrs	r1, r3
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003a8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003ac:	fb08 1110 	mls	r1, r8, r0, r1
 80003b0:	4094      	lsls	r4, r2
 80003b2:	431c      	orrs	r4, r3
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	0c23      	lsrs	r3, r4, #16
 80003ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003be:	fb00 f107 	mul.w	r1, r0, r7
 80003c2:	4299      	cmp	r1, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x248>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ce:	d22c      	bcs.n	800042a <__udivmoddi4+0x29a>
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d92a      	bls.n	800042a <__udivmoddi4+0x29a>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4463      	add	r3, ip
 80003d8:	1a5b      	subs	r3, r3, r1
 80003da:	fbb3 f1f8 	udiv	r1, r3, r8
 80003de:	fb08 3311 	mls	r3, r8, r1, r3
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e8:	fb01 f307 	mul.w	r3, r1, r7
 80003ec:	42a3      	cmp	r3, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x272>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003f8:	d213      	bcs.n	8000422 <__udivmoddi4+0x292>
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	d911      	bls.n	8000422 <__udivmoddi4+0x292>
 80003fe:	3902      	subs	r1, #2
 8000400:	4464      	add	r4, ip
 8000402:	1ae4      	subs	r4, r4, r3
 8000404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000408:	e73b      	b.n	8000282 <__udivmoddi4+0xf2>
 800040a:	4604      	mov	r4, r0
 800040c:	e6f2      	b.n	80001f4 <__udivmoddi4+0x64>
 800040e:	4608      	mov	r0, r1
 8000410:	e708      	b.n	8000224 <__udivmoddi4+0x94>
 8000412:	45c2      	cmp	sl, r8
 8000414:	d2af      	bcs.n	8000376 <__udivmoddi4+0x1e6>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb63 060c 	sbc.w	r6, r3, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7a9      	b.n	8000376 <__udivmoddi4+0x1e6>
 8000422:	4631      	mov	r1, r6
 8000424:	e7ed      	b.n	8000402 <__udivmoddi4+0x272>
 8000426:	4603      	mov	r3, r0
 8000428:	e79a      	b.n	8000360 <__udivmoddi4+0x1d0>
 800042a:	4630      	mov	r0, r6
 800042c:	e7d4      	b.n	80003d8 <__udivmoddi4+0x248>
 800042e:	46b0      	mov	r8, r6
 8000430:	e781      	b.n	8000336 <__udivmoddi4+0x1a6>
 8000432:	4463      	add	r3, ip
 8000434:	3802      	subs	r0, #2
 8000436:	e74f      	b.n	80002d8 <__udivmoddi4+0x148>
 8000438:	4606      	mov	r6, r0
 800043a:	4623      	mov	r3, r4
 800043c:	4608      	mov	r0, r1
 800043e:	e711      	b.n	8000264 <__udivmoddi4+0xd4>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	e732      	b.n	80002ac <__udivmoddi4+0x11c>
 8000446:	bf00      	nop

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop

0800044c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b087      	sub	sp, #28
 8000464:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000466:	f000 fd11 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046a:	f000 f857 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046e:	f000 f98d 	bl	800078c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000472:	f000 f8e7 	bl	8000644 <MX_I2C2_Init>
  MX_CAN_Init();
 8000476:	f000 f8b1 	bl	80005dc <MX_CAN_Init>
  MX_USART2_UART_Init();
 800047a:	f000 f93b 	bl	80006f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800047e:	f000 f90f 	bl	80006a0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000482:	f000 f961 	bl	8000748 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  link_gpio_interface(get_gpio_interface_handle(0), gpio_set, gpio_get);
 8000486:	2000      	movs	r0, #0
 8000488:	f006 ff66 	bl	8007358 <get_gpio_interface_handle>
 800048c:	4603      	mov	r3, r0
 800048e:	4a1a      	ldr	r2, [pc, #104]	@ (80004f8 <main+0x98>)
 8000490:	491a      	ldr	r1, [pc, #104]	@ (80004fc <main+0x9c>)
 8000492:	4618      	mov	r0, r3
 8000494:	f006 ff4e 	bl	8007334 <link_gpio_interface>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000498:	f003 fa4a 	bl	8003930 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  print_msg_queue_init();
 800049c:	f007 f914 	bl	80076c8 <print_msg_queue_init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a0:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <main+0xa0>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	4817      	ldr	r0, [pc, #92]	@ (8000504 <main+0xa4>)
 80004a6:	f003 fafb 	bl	8003aa0 <osThreadNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a16      	ldr	r2, [pc, #88]	@ (8000508 <main+0xa8>)
 80004ae:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  init_periph_events();
 80004b0:	f007 f8ea 	bl	8007688 <init_periph_events>
//		  &huart1,
//		  uart_write_it,
//		  uart_read_it,
//		  delay_us);

  link_periph_interface(
 80004b4:	2001      	movs	r0, #1
 80004b6:	f006 ff67 	bl	8007388 <get_hard_uart_interface_handle>
 80004ba:	4604      	mov	r4, r0
		  get_hard_uart_interface_handle(1),
		  get_periph_event_id(),
 80004bc:	f007 f8fa 	bl	80076b4 <get_periph_event_id>
 80004c0:	4601      	mov	r1, r0
  link_periph_interface(
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <main+0xac>)
 80004c4:	9305      	str	r3, [sp, #20]
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <main+0xb0>)
 80004c8:	9304      	str	r3, [sp, #16]
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <main+0xb4>)
 80004cc:	9303      	str	r3, [sp, #12]
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <main+0xb8>)
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2302      	movs	r3, #2
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2304      	movs	r3, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	4620      	mov	r0, r4
 80004e0:	f006 fefe 	bl	80072e0 <link_periph_interface>
		  &huart2,
		  uart_write_it,
		  uart_read_it,
		  delay_us);

  print_msg_thread_init();
 80004e4:	f007 f948 	bl	8007778 <print_msg_thread_init>
  button_thread_init();
 80004e8:	f007 f90c 	bl	8007704 <button_thread_init>
  rs485_thread_init();
 80004ec:	f007 f996 	bl	800781c <rs485_thread_init>


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 fa40 	bl	8003974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <main+0x94>
 80004f8:	08007291 	.word	0x08007291
 80004fc:	08007229 	.word	0x08007229
 8000500:	0800840c 	.word	0x0800840c
 8000504:	08000905 	.word	0x08000905
 8000508:	20000460 	.word	0x20000460
 800050c:	08007111 	.word	0x08007111
 8000510:	08007427 	.word	0x08007427
 8000514:	080073bd 	.word	0x080073bd
 8000518:	20000140 	.word	0x20000140

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	@ 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000526:	2228      	movs	r2, #40	@ 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 f9f4 	bl	8007918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000568:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800056c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fb38 	bl	8001be8 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057e:	f000 f9fb 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000592:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fda4 	bl	80020ec <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005aa:	f000 f9e5 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ae:	2310      	movs	r3, #16
 80005b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 ff8f 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005c4:	f000 f9d8 	bl	8000978 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f04f 61e0 	mov.w	r1, #117440512	@ 0x7000000
 80005ce:	2000      	movs	r0, #0
 80005d0:	f001 fe76 	bl	80022c0 <HAL_RCC_MCOConfig>
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <MX_CAN_Init+0x60>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_CAN_Init+0x64>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_CAN_Init+0x60>)
 80005e8:	2210      	movs	r2, #16
 80005ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_CAN_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_CAN_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_CAN_Init+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_CAN_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <MX_CAN_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_CAN_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_CAN_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_CAN_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_CAN_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_CAN_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_CAN_Init+0x60>)
 800062a:	f000 fc61 	bl	8000ef0 <HAL_CAN_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 f9a0 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000007c 	.word	0x2000007c
 8000640:	40006400 	.word	0x40006400

08000644 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C2_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_I2C2_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_I2C2_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2C2_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_I2C2_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2C2_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_I2C2_Init+0x50>)
 8000682:	f001 f877 	bl	8001774 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f974 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000a4 	.word	0x200000a4
 8000698:	40005800 	.word	0x40005800
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f002 f9f4 	bl	8002ac4 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f949 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000f8 	.word	0x200000f8
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f002 f9ca 	bl	8002ac4 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f91f 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000140 	.word	0x20000140
 8000744:	40004400 	.word	0x40004400

08000748 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <MX_USB_PCD_Init+0x40>)
 8000750:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000754:	2208      	movs	r2, #8
 8000756:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800075a:	2202      	movs	r2, #2
 800075c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000760:	2200      	movs	r2, #0
 8000762:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000766:	2200      	movs	r2, #0
 8000768:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 800076c:	2200      	movs	r2, #0
 800076e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_USB_PCD_Init+0x3c>)
 8000772:	f001 f943 	bl	80019fc <HAL_PCD_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800077c:	f000 f8fc 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000188 	.word	0x20000188
 8000788:	40005c00 	.word	0x40005c00

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a0:	4b54      	ldr	r3, [pc, #336]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a53      	ldr	r2, [pc, #332]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b51      	ldr	r3, [pc, #324]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b8:	4b4e      	ldr	r3, [pc, #312]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a4d      	ldr	r2, [pc, #308]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b4b      	ldr	r3, [pc, #300]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b48      	ldr	r3, [pc, #288]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a47      	ldr	r2, [pc, #284]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b45      	ldr	r3, [pc, #276]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b42      	ldr	r3, [pc, #264]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a41      	ldr	r2, [pc, #260]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <MX_GPIO_Init+0x168>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000806:	483c      	ldr	r0, [pc, #240]	@ (80008f8 <MX_GPIO_Init+0x16c>)
 8000808:	f000 ff9b 	bl	8001742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2102      	movs	r1, #2
 8000810:	483a      	ldr	r0, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x170>)
 8000812:	f000 ff96 	bl	8001742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2104      	movs	r1, #4
 800081a:	4839      	ldr	r0, [pc, #228]	@ (8000900 <MX_GPIO_Init+0x174>)
 800081c:	f000 ff91 	bl	8001742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2302      	movs	r3, #2
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	482f      	ldr	r0, [pc, #188]	@ (80008f8 <MX_GPIO_Init+0x16c>)
 800083a:	f000 fde7 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800083e:	23f1      	movs	r3, #241	@ 0xf1
 8000840:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000842:	2303      	movs	r3, #3
 8000844:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4619      	mov	r1, r3
 800084c:	482b      	ldr	r0, [pc, #172]	@ (80008fc <MX_GPIO_Init+0x170>)
 800084e:	f000 fddd 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	4824      	ldr	r0, [pc, #144]	@ (80008fc <MX_GPIO_Init+0x170>)
 800086a:	f000 fdcf 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800086e:	f24f 03f9 	movw	r3, #61689	@ 0xf0f9
 8000872:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4820      	ldr	r0, [pc, #128]	@ (8000900 <MX_GPIO_Init+0x174>)
 8000880:	f000 fdc4 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_0_Pin */
  GPIO_InitStruct.Pin = USER_BTN_0_Pin;
 8000884:	2302      	movs	r3, #2
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_0_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_GPIO_Init+0x174>)
 8000898:	f000 fdb8 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 800089c:	2304      	movs	r3, #4
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4813      	ldr	r0, [pc, #76]	@ (8000900 <MX_GPIO_Init+0x174>)
 80008b4:	f000 fdaa 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <MX_GPIO_Init+0x170>)
 80008ce:	f000 fd9d 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 80008d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_GPIO_Init+0x170>)
 80008e8:	f000 fd90 	bl	800140c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40011000 	.word	0x40011000
 80008fc:	40010800 	.word	0x40010800
 8000900:	40010c00 	.word	0x40010c00

08000904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	simple_led_params_td ledh;
	simple_led_init(&ledh, get_gpio_interface_handle(0), GPIO_LED_ORANGE);
 800090c:	2000      	movs	r0, #0
 800090e:	f006 fd23 	bl	8007358 <get_gpio_interface_handle>
 8000912:	4601      	mov	r1, r0
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fe52 	bl	80075c4 <simple_led_init>

  /* Infinite loop */
  for(;;)
  {
	  simple_led_set(&ledh, LED_ON);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fe35 	bl	8007596 <simple_led_set>
	//gpio_set(0, GPIO_TRUE);
	osDelay(100);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f003 f949 	bl	8003bc4 <osDelay>
	//gpio_set(0, GPIO_FALSE);
	simple_led_set(&ledh, LED_OFF);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f006 fe2c 	bl	8007596 <simple_led_set>
    osDelay(100);
 800093e:	2064      	movs	r0, #100	@ 0x64
 8000940:	f003 f940 	bl	8003bc4 <osDelay>

    print_to_console("Default task says Hello!");
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <StartDefaultTask+0x4c>)
 8000946:	f006 fbc5 	bl	80070d4 <print_to_console>
	  simple_led_set(&ledh, LED_ON);
 800094a:	bf00      	nop
 800094c:	e7e8      	b.n	8000920 <StartDefaultTask+0x1c>
 800094e:	bf00      	nop
 8000950:	08008308 	.word	0x08008308

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 faa7 	bl	8000eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40012c00 	.word	0x40012c00

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_MspInit+0x68>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_MspInit+0x68>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <HAL_MspInit+0x68>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_MspInit+0x68>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a11      	ldr	r2, [pc, #68]	@ (80009ec <HAL_MspInit+0x68>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_MspInit+0x68>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	f06f 0001 	mvn.w	r0, #1
 80009c2:	f000 fc46 	bl	8001252 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_MspInit+0x6c>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_MspInit+0x6c>)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010000 	.word	0x40010000

080009f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a25      	ldr	r2, [pc, #148]	@ (8000aa4 <HAL_CAN_MspInit+0xb0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d143      	bne.n	8000a9c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <HAL_CAN_MspInit+0xb4>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4814      	ldr	r0, [pc, #80]	@ (8000aac <HAL_CAN_MspInit+0xb8>)
 8000a5a:	f000 fcd7 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	@ (8000aac <HAL_CAN_MspInit+0xb8>)
 8000a74:	f000 fcca 	bl	800140c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a78:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_CAN_MspInit+0xbc>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a96:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_CAN_MspInit+0xbc>)
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40006400 	.word	0x40006400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a16      	ldr	r2, [pc, #88]	@ (8000b28 <HAL_I2C_MspInit+0x74>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d124      	bne.n	8000b1e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <HAL_I2C_MspInit+0x7c>)
 8000b02:	f000 fc83 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_I2C_MspInit+0x78>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40005800 	.word	0x40005800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	@ 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c3c <HAL_UART_MspInit+0x108>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d132      	bne.n	8000bba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b54:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a39      	ldr	r2, [pc, #228]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b37      	ldr	r3, [pc, #220]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b34      	ldr	r3, [pc, #208]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a33      	ldr	r2, [pc, #204]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	4619      	mov	r1, r3
 8000b98:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <HAL_UART_MspInit+0x110>)
 8000b9a:	f000 fc37 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4824      	ldr	r0, [pc, #144]	@ (8000c44 <HAL_UART_MspInit+0x110>)
 8000bb4:	f000 fc2a 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb8:	e03c      	b.n	8000c34 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_UART_MspInit+0x114>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d137      	bne.n	8000c34 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_UART_MspInit+0x10c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	4619      	mov	r1, r3
 8000c06:	480f      	ldr	r0, [pc, #60]	@ (8000c44 <HAL_UART_MspInit+0x110>)
 8000c08:	f000 fc00 	bl	800140c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <HAL_UART_MspInit+0x110>)
 8000c20:	f000 fbf4 	bl	800140c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2105      	movs	r1, #5
 8000c28:	2026      	movs	r0, #38	@ 0x26
 8000c2a:	f000 fb12 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2e:	2026      	movs	r0, #38	@ 0x26
 8000c30:	f000 fb2b 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	@ 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40004400 	.word	0x40004400

08000c4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <HAL_PCD_MspInit+0x34>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10b      	bne.n	8000c76 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_PCD_MspInit+0x38>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_PCD_MspInit+0x38>)
 8000c64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_PCD_MspInit+0x38>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40005c00 	.word	0x40005c00
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000ca4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb6:	f107 020c 	add.w	r2, r7, #12
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fbbd 	bl	8002440 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc6:	f001 fba7 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8000cca:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cce:	4a23      	ldr	r2, [pc, #140]	@ (8000d5c <HAL_InitTick+0xd4>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	0c9b      	lsrs	r3, r3, #18
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <HAL_InitTick+0xdc>)
 8000cde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000ce2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d00:	4817      	ldr	r0, [pc, #92]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000d02:	f001 fca1 	bl	8002648 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11b      	bne.n	8000d4c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d14:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <HAL_InitTick+0xd8>)
 8000d16:	f001 fcef 	bl	80026f8 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d111      	bne.n	8000d4c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d28:	2019      	movs	r0, #25
 8000d2a:	f000 faae 	bl	800128a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d808      	bhi.n	8000d46 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2019      	movs	r0, #25
 8000d3a:	f000 fa8a 	bl	8001252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_InitTick+0xe0>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e002      	b.n	8000d4c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3730      	adds	r7, #48	@ 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20000464 	.word	0x20000464
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	20000004 	.word	0x20000004

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <TIM1_UP_IRQHandler+0x10>)
 8000da6:	f001 fcf9 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000464 	.word	0x20000464

08000db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <USART2_IRQHandler+0x10>)
 8000dba:	f001 ffb9 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000140 	.word	0x20000140

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f006 fdec 	bl	80079d4 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20005000 	.word	0x20005000
 8000e28:	00000800 	.word	0x00000800
 8000e2c:	200004ac 	.word	0x200004ac
 8000e30:	20004330 	.word	0x20004330

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e40:	f7ff fff8 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e46:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e48:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e5c:	4c09      	ldr	r4, [pc, #36]	@ (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f006 fdb9 	bl	80079e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff faf7 	bl	8000460 <main>
  bx lr
 8000e72:	4770      	bx	lr
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e7c:	08008544 	.word	0x08008544
  ldr r2, =_sbss
 8000e80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e84:	2000432c 	.word	0x2000432c

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f9cd 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f7ff fef0 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fd6c 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_IncTick+0x1c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a03      	ldr	r2, [pc, #12]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200004b0 	.word	0x200004b0

08000edc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <HAL_GetTick+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	200004b0 	.word	0x200004b0

08000ef0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0ed      	b.n	80010de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fd70 	bl	80009f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff ffda 	bl	8000edc <HAL_GetTick>
 8000f28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f2a:	e012      	b.n	8000f52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2c:	f7ff ffd6 	bl	8000edc <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d90b      	bls.n	8000f52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2205      	movs	r2, #5
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0c5      	b.n	80010de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0e5      	beq.n	8000f2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0202 	bic.w	r2, r2, #2
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f70:	f7ff ffb4 	bl	8000edc <HAL_GetTick>
 8000f74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f76:	e012      	b.n	8000f9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f78:	f7ff ffb0 	bl	8000edc <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90b      	bls.n	8000f9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2205      	movs	r2, #5
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e09f      	b.n	80010de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e5      	bne.n	8000f78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7e1b      	ldrb	r3, [r3, #24]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7e5b      	ldrb	r3, [r3, #25]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e007      	b.n	8001000 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7e9b      	ldrb	r3, [r3, #26]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e007      	b.n	800102a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0220 	bic.w	r2, r2, #32
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7edb      	ldrb	r3, [r3, #27]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0210 	bic.w	r2, r2, #16
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e007      	b.n	8001054 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0210 	orr.w	r2, r2, #16
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7f1b      	ldrb	r3, [r3, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d108      	bne.n	800106e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0208 	orr.w	r2, r2, #8
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e007      	b.n	800107e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0208 	bic.w	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7f5b      	ldrb	r3, [r3, #29]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d108      	bne.n	8001098 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e007      	b.n	80010a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	ea42 0103 	orr.w	r1, r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	@ (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	@ (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff4f 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff64 	bl	8001130 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ffb2 	bl	80011d8 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff81 	bl	8001184 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff57 	bl	800114c <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d008      	beq.n	80012d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e020      	b.n	8001312 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d005      	beq.n	8001340 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e051      	b.n	80013e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020e 	bic.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <HAL_DMA_Abort_IT+0xd4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d029      	beq.n	80013be <HAL_DMA_Abort_IT+0xa2>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <HAL_DMA_Abort_IT+0xd8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d022      	beq.n	80013ba <HAL_DMA_Abort_IT+0x9e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <HAL_DMA_Abort_IT+0xdc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01a      	beq.n	80013b4 <HAL_DMA_Abort_IT+0x98>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <HAL_DMA_Abort_IT+0xe0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d012      	beq.n	80013ae <HAL_DMA_Abort_IT+0x92>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_DMA_Abort_IT+0xe4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00a      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x8c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <HAL_DMA_Abort_IT+0xe8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d102      	bne.n	80013a2 <HAL_DMA_Abort_IT+0x86>
 800139c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013a0:	e00e      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013a6:	e00b      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	e008      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	e005      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b8:	e002      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013ba:	2310      	movs	r3, #16
 80013bc:	e000      	b.n	80013c0 <HAL_DMA_Abort_IT+0xa4>
 80013be:	2301      	movs	r3, #1
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <HAL_DMA_Abort_IT+0xec>)
 80013c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
    } 
  }
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020008 	.word	0x40020008
 80013f4:	4002001c 	.word	0x4002001c
 80013f8:	40020030 	.word	0x40020030
 80013fc:	40020044 	.word	0x40020044
 8001400:	40020058 	.word	0x40020058
 8001404:	4002006c 	.word	0x4002006c
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	@ 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e169      	b.n	80016f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001420:	2201      	movs	r2, #1
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8158 	bne.w	80016ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a9a      	ldr	r2, [pc, #616]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d05e      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001448:	4a98      	ldr	r2, [pc, #608]	@ (80016ac <HAL_GPIO_Init+0x2a0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d875      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800144e:	4a98      	ldr	r2, [pc, #608]	@ (80016b0 <HAL_GPIO_Init+0x2a4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d058      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001454:	4a96      	ldr	r2, [pc, #600]	@ (80016b0 <HAL_GPIO_Init+0x2a4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d86f      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800145a:	4a96      	ldr	r2, [pc, #600]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d052      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001460:	4a94      	ldr	r2, [pc, #592]	@ (80016b4 <HAL_GPIO_Init+0x2a8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d869      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001466:	4a94      	ldr	r2, [pc, #592]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d04c      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 800146c:	4a92      	ldr	r2, [pc, #584]	@ (80016b8 <HAL_GPIO_Init+0x2ac>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d863      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001472:	4a92      	ldr	r2, [pc, #584]	@ (80016bc <HAL_GPIO_Init+0x2b0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d046      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001478:	4a90      	ldr	r2, [pc, #576]	@ (80016bc <HAL_GPIO_Init+0x2b0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d85d      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d82a      	bhi.n	80014d8 <HAL_GPIO_Init+0xcc>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d859      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001486:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <HAL_GPIO_Init+0x80>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	08001507 	.word	0x08001507
 8001490:	080014e1 	.word	0x080014e1
 8001494:	080014f3 	.word	0x080014f3
 8001498:	08001535 	.word	0x08001535
 800149c:	0800153b 	.word	0x0800153b
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	0800153b 	.word	0x0800153b
 80014a8:	0800153b 	.word	0x0800153b
 80014ac:	0800153b 	.word	0x0800153b
 80014b0:	0800153b 	.word	0x0800153b
 80014b4:	0800153b 	.word	0x0800153b
 80014b8:	0800153b 	.word	0x0800153b
 80014bc:	0800153b 	.word	0x0800153b
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	0800153b 	.word	0x0800153b
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	0800153b 	.word	0x0800153b
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014fd 	.word	0x080014fd
 80014d8:	4a79      	ldr	r2, [pc, #484]	@ (80016c0 <HAL_GPIO_Init+0x2b4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014de:	e02c      	b.n	800153a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e029      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e024      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	3308      	adds	r3, #8
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e01f      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	330c      	adds	r3, #12
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e01a      	b.n	800153c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150e:	2304      	movs	r3, #4
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e013      	b.n	800153c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	611a      	str	r2, [r3, #16]
          break;
 8001526:	e009      	b.n	800153c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	615a      	str	r2, [r3, #20]
          break;
 8001532:	e003      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x130>
          break;
 800153a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d801      	bhi.n	8001546 <HAL_GPIO_Init+0x13a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e001      	b.n	800154a <HAL_GPIO_Init+0x13e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d802      	bhi.n	8001558 <HAL_GPIO_Init+0x14c>
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x152>
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	3b08      	subs	r3, #8
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	210f      	movs	r1, #15
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	6a39      	ldr	r1, [r7, #32]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80b1 	beq.w	80016ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158c:	4b4d      	ldr	r3, [pc, #308]	@ (80016c4 <HAL_GPIO_Init+0x2b8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a4c      	ldr	r2, [pc, #304]	@ (80016c4 <HAL_GPIO_Init+0x2b8>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b4a      	ldr	r3, [pc, #296]	@ (80016c4 <HAL_GPIO_Init+0x2b8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a4:	4a48      	ldr	r2, [pc, #288]	@ (80016c8 <HAL_GPIO_Init+0x2bc>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a40      	ldr	r2, [pc, #256]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d013      	beq.n	80015f8 <HAL_GPIO_Init+0x1ec>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3f      	ldr	r2, [pc, #252]	@ (80016d0 <HAL_GPIO_Init+0x2c4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00d      	beq.n	80015f4 <HAL_GPIO_Init+0x1e8>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3e      	ldr	r2, [pc, #248]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d007      	beq.n	80015f0 <HAL_GPIO_Init+0x1e4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a3d      	ldr	r2, [pc, #244]	@ (80016d8 <HAL_GPIO_Init+0x2cc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_GPIO_Init+0x1e0>
 80015e8:	2303      	movs	r3, #3
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x1ee>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e004      	b.n	80015fa <HAL_GPIO_Init+0x1ee>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x1ee>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_GPIO_Init+0x1ee>
 80015f8:	2300      	movs	r3, #0
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	f002 0203 	and.w	r2, r2, #3
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	4093      	lsls	r3, r2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160a:	492f      	ldr	r1, [pc, #188]	@ (80016c8 <HAL_GPIO_Init+0x2bc>)
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	492c      	ldr	r1, [pc, #176]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001632:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	4928      	ldr	r1, [pc, #160]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4922      	ldr	r1, [pc, #136]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	491e      	ldr	r1, [pc, #120]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4918      	ldr	r1, [pc, #96]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	4914      	ldr	r1, [pc, #80]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d021      	beq.n	80016e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	490e      	ldr	r1, [pc, #56]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e021      	b.n	80016ee <HAL_GPIO_Init+0x2e2>
 80016aa:	bf00      	nop
 80016ac:	10320000 	.word	0x10320000
 80016b0:	10310000 	.word	0x10310000
 80016b4:	10220000 	.word	0x10220000
 80016b8:	10210000 	.word	0x10210000
 80016bc:	10120000 	.word	0x10120000
 80016c0:	10110000 	.word	0x10110000
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40011400 	.word	0x40011400
 80016dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_GPIO_Init+0x304>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4909      	ldr	r1, [pc, #36]	@ (8001710 <HAL_GPIO_Init+0x304>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	3301      	adds	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f ae8e 	bne.w	8001420 <HAL_GPIO_Init+0x14>
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	372c      	adds	r7, #44	@ 0x2c
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001752:	787b      	ldrb	r3, [r7, #1]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001758:	887a      	ldrh	r2, [r7, #2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175e:	e003      	b.n	8001768 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	041a      	lsls	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	611a      	str	r2, [r3, #16]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
	...

08001774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e12b      	b.n	80019de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff f98a 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d8:	f000 fe0a 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 80017dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a81      	ldr	r2, [pc, #516]	@ (80019e8 <HAL_I2C_Init+0x274>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d807      	bhi.n	80017f8 <HAL_I2C_Init+0x84>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a80      	ldr	r2, [pc, #512]	@ (80019ec <HAL_I2C_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e006      	b.n	8001806 <HAL_I2C_Init+0x92>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a7d      	ldr	r2, [pc, #500]	@ (80019f0 <HAL_I2C_Init+0x27c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	bf94      	ite	ls
 8001800:	2301      	movls	r3, #1
 8001802:	2300      	movhi	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0e7      	b.n	80019de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4a78      	ldr	r2, [pc, #480]	@ (80019f4 <HAL_I2C_Init+0x280>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a6a      	ldr	r2, [pc, #424]	@ (80019e8 <HAL_I2C_Init+0x274>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d802      	bhi.n	8001848 <HAL_I2C_Init+0xd4>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3301      	adds	r3, #1
 8001846:	e009      	b.n	800185c <HAL_I2C_Init+0xe8>
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a69      	ldr	r2, [pc, #420]	@ (80019f8 <HAL_I2C_Init+0x284>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	3301      	adds	r3, #1
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800186e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	495c      	ldr	r1, [pc, #368]	@ (80019e8 <HAL_I2C_Init+0x274>)
 8001878:	428b      	cmp	r3, r1
 800187a:	d819      	bhi.n	80018b0 <HAL_I2C_Init+0x13c>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e59      	subs	r1, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fbb1 f3f3 	udiv	r3, r1, r3
 800188a:	1c59      	adds	r1, r3, #1
 800188c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001890:	400b      	ands	r3, r1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <HAL_I2C_Init+0x138>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e59      	subs	r1, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	e051      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e04f      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d111      	bne.n	80018dc <HAL_I2C_Init+0x168>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e58      	subs	r0, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e012      	b.n	8001902 <HAL_I2C_Init+0x18e>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e58      	subs	r0, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	0099      	lsls	r1, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x196>
 8001906:	2301      	movs	r3, #1
 8001908:	e022      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10e      	bne.n	8001930 <HAL_I2C_Init+0x1bc>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e58      	subs	r0, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	440b      	add	r3, r1
 8001920:	fbb0 f3f3 	udiv	r3, r0, r3
 8001924:	3301      	adds	r3, #1
 8001926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192e:	e00f      	b.n	8001950 <HAL_I2C_Init+0x1dc>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	6809      	ldr	r1, [r1, #0]
 8001954:	4313      	orrs	r3, r2
 8001956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800197e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6911      	ldr	r1, [r2, #16]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68d2      	ldr	r2, [r2, #12]
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	430b      	orrs	r3, r1
 8001992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	000186a0 	.word	0x000186a0
 80019ec:	001e847f 	.word	0x001e847f
 80019f0:	003d08ff 	.word	0x003d08ff
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0e8      	b.n	8001be0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff f912 	bl	8000c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fee7 	bl	800380e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4a:	f001 fed3 	bl	80037f4 <USB_CoreInit>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0bf      	b.n	8001be0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 feeb 	bl	8003842 <USB_SetCurrentMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0b0      	b.n	8001be0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e03e      	b.n	8001b02 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3311      	adds	r3, #17
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3310      	adds	r3, #16
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3313      	adds	r3, #19
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3320      	adds	r3, #32
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3324      	adds	r3, #36	@ 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	3301      	adds	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	791b      	ldrb	r3, [r3, #4]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3bb      	bcc.n	8001a84 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e044      	b.n	8001b9c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3b5      	bcc.n	8001b12 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3304      	adds	r3, #4
 8001bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb0:	f001 fe53 	bl	800385a <USB_DevInit>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00c      	b.n	8001be0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fe5b 	bl	8003894 <USB_DevDisconnect>

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e272      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e24c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f90a 	bl	8000edc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f906 	bl	8000edc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f8f6 	bl	8000edc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f8f2 	bl	8000edc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff f8ab 	bl	8000edc <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f8a7 	bl	8000edc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1a1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f88a 	bl	8000edc <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f886 	bl	8000edc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e180      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff f86a 	bl	8000edc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f866 	bl	8000edc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e160      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fb38 	bl	80024a0 <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff f850 	bl	8000edc <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f84c 	bl	8000edc <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e146      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a87      	ldr	r2, [pc, #540]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f80d 	bl	8000edc <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f809 	bl	8000edc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e103      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b61      	ldr	r3, [pc, #388]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b5e      	ldr	r3, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe ffbd 	bl	8000edc <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe ffb9 	bl	8000edc <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0b1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe ffa7 	bl	8000edc <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe ffa3 	bl	8000edc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff77 	bl	8000edc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe ff73 	bl	8000edc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4921      	ldr	r1, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	491b      	ldr	r1, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe ff47 	bl	8000edc <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe ff43 	bl	8000edc <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e035      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe ff30 	bl	8000edc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe ff2c 	bl	8000edc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e019      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x500>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fe7e 	bl	8000edc <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fe7a 	bl	8000edc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f859 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fcf4 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08008430 	.word	0x08008430
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80022e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ea:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_RCC_MCOConfig+0x68>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <HAL_RCC_MCOConfig+0x68>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCC_MCOConfig+0x68>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4619      	mov	r1, r3
 800230a:	4808      	ldr	r0, [pc, #32]	@ (800232c <HAL_RCC_MCOConfig+0x6c>)
 800230c:	f7ff f87e 	bl	800140c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002310:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <HAL_RCC_MCOConfig+0x68>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <HAL_RCC_MCOConfig+0x68>)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	@ 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40010800 	.word	0x40010800

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x30>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x36>
 800235e:	e027      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e027      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0c5b      	lsrs	r3, r3, #17
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002392:	fb03 f202 	mul.w	r2, r3, r2
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e004      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	613b      	str	r3, [r7, #16]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	693b      	ldr	r3, [r7, #16]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	00b71b00 	.word	0x00b71b00
 80023cc:	08008448 	.word	0x08008448
 80023d0:	08008458 	.word	0x08008458
 80023d4:	003d0900 	.word	0x003d0900
 80023d8:	007a1200 	.word	0x007a1200

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b02      	ldr	r3, [pc, #8]	@ (80023ec <HAL_RCC_GetHCLKFreq+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f4:	f7ff fff2 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	@ (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08008440 	.word	0x08008440

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800241c:	f7ff ffde 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	@ (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	08008440 	.word	0x08008440

08002440 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	220f      	movs	r2, #15
 800244e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_RCC_GetClockConfig+0x58>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800245c:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_RCC_GetClockConfig+0x58>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_GetClockConfig+0x58>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <HAL_RCC_GetClockConfig+0x58>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_GetClockConfig+0x5c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <RCC_Delay+0x34>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <RCC_Delay+0x38>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0a5b      	lsrs	r3, r3, #9
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024bc:	bf00      	nop
  }
  while (Delay --);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	60fa      	str	r2, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f9      	bne.n	80024bc <RCC_Delay+0x1c>
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	20000000 	.word	0x20000000
 80024d8:	10624dd3 	.word	0x10624dd3

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b4f      	ldr	r3, [pc, #316]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b4c      	ldr	r3, [pc, #304]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a4b      	ldr	r2, [pc, #300]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b46      	ldr	r3, [pc, #280]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d118      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002530:	4b43      	ldr	r3, [pc, #268]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253c:	f7fe fcce 	bl	8000edc <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	e008      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fcca 	bl	8000edc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e06d      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b3a      	ldr	r3, [pc, #232]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002562:	4b36      	ldr	r3, [pc, #216]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02e      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d027      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002580:	4b2e      	ldr	r3, [pc, #184]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002588:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258a:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002590:	4b2c      	ldr	r3, [pc, #176]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002596:	4a29      	ldr	r2, [pc, #164]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fc99 	bl	8000edc <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fc95 	bl	8000edc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e036      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4917      	ldr	r1, [pc, #92]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b14      	ldr	r3, [pc, #80]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a13      	ldr	r2, [pc, #76]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	490b      	ldr	r1, [pc, #44]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4904      	ldr	r1, [pc, #16]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420440 	.word	0x42420440

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e041      	b.n	80026de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f839 	bl	80026e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 f99c 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e03a      	b.n	8002786 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_TIM_Base_Start_IT+0x98>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x58>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273a:	d009      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x58>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <HAL_TIM_Base_Start_IT+0x9c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x58>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <HAL_TIM_Base_Start_IT+0xa0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b06      	cmp	r3, #6
 8002760:	d010      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002772:	e007      	b.n	8002784 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d020      	beq.n	8002800 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0202 	mvn.w	r2, #2
 80027d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8d1 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8c4 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8d3 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d020      	beq.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8ab 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f89e 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8ad 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d020      	beq.n	8002898 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0208 	mvn.w	r2, #8
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f885 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f878 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f887 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d020      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0210 	mvn.w	r2, #16
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2208      	movs	r2, #8
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f85f 	bl	800298e <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f852 	bl	800297c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f861 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0201 	mvn.w	r2, #1
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f826 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8c3 	bl	8002ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f831 	bl	80029b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0220 	mvn.w	r2, #32
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f896 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <TIM_Base_SetConfig+0xd4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <TIM_Base_SetConfig+0xd8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a22      	ldr	r2, [pc, #136]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <TIM_Base_SetConfig+0xd4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <TIM_Base_SetConfig+0xd8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d103      	bne.n	8002a6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e042      	b.n	8002b5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe f822 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2224      	movs	r2, #36	@ 0x24
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fde5 	bl	80036d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	@ 0x28
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d175      	bne.n	8002c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_UART_Transmit+0x2c>
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e06e      	b.n	8002c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2221      	movs	r2, #33	@ 0x21
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba2:	f7fe f99b 	bl	8000edc <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbc:	d108      	bne.n	8002bd0 <HAL_UART_Transmit+0x6c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e003      	b.n	8002bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bd8:	e02e      	b.n	8002c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fb49 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e03a      	b.n	8002c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10b      	bne.n	8002c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	3302      	adds	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e007      	b.n	8002c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	3301      	adds	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1cb      	bne.n	8002bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2140      	movs	r1, #64	@ 0x40
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb15 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e006      	b.n	8002c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d121      	bne.n	8002cd8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_UART_Transmit_IT+0x26>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e01a      	b.n	8002cda <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2221      	movs	r2, #33	@ 0x21
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cd2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d112      	bne.n	8002d24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_UART_Receive_IT+0x26>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00b      	b.n	8002d26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fb07 	bl	800332e <UART_Start_Receive_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	@ 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fbe3 	bl	800355a <UART_Receive_IT>
      return;
 8002d94:	e25b      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80de 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d1 	beq.w	8002f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
 8002dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
 8002e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d011      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0208 	orr.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 81f2 	beq.w	8003244 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb6e 	bl	800355a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_UART_IRQHandler+0x17a>
 8002ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04f      	beq.n	8002f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa78 	bl	80033a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d041      	beq.n	8002f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d9      	bne.n	8002ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d013      	beq.n	8002f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	4a7e      	ldr	r2, [pc, #504]	@ (8003110 <HAL_UART_IRQHandler+0x3e0>)
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f9fc 	bl	800131c <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f98a 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00a      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f986 	bl	8003254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f982 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f56:	e175      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	bf00      	nop
    return;
 8002f5a:	e173      	b.n	8003244 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 814f 	bne.w	8003204 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8148 	beq.w	8003204 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8141 	beq.w	8003204 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b6 	beq.w	8003114 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8145 	beq.w	8003248 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f080 813e 	bcs.w	8003248 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	f000 8088 	beq.w	80030f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800300c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003010:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003018:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1d9      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3314      	adds	r3, #20
 8003032:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800303c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003050:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003054:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003058:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e1      	bne.n	800302c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3314      	adds	r3, #20
 800306e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800307a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800307e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800308c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800308e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003092:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800309a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e3      	bne.n	8003068 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e3      	bne.n	80030ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f8db 	bl	80012a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8ad 	bl	8003266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800310c:	e09c      	b.n	8003248 <HAL_UART_IRQHandler+0x518>
 800310e:	bf00      	nop
 8003110:	08003465 	.word	0x08003465
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800311c:	b29b      	uxth	r3, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 808e 	beq.w	800324c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8089 	beq.w	800324c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800315e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800316c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	623b      	str	r3, [r7, #32]
   return(result);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003196:	633a      	str	r2, [r7, #48]	@ 0x30
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800319c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e3      	bne.n	8003172 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0310 	bic.w	r3, r3, #16
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031dc:	61fa      	str	r2, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e3      	bne.n	80031b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f832 	bl	8003266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003202:	e023      	b.n	800324c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_UART_IRQHandler+0x4f4>
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f935 	bl	800348c <UART_Transmit_IT>
    return;
 8003222:	e014      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_UART_IRQHandler+0x51e>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f974 	bl	800352a <UART_EndTransmit_IT>
    return;
 8003242:	e004      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
    return;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
      return;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_UART_IRQHandler+0x51e>
      return;
 800324c:	bf00      	nop
  }
}
 800324e:	37e8      	adds	r7, #232	@ 0xe8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328c:	e03b      	b.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d037      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fd fe21 	bl	8000edc <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <UART_WaitOnFlagUntilTimeout+0x30>
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03a      	b.n	8003326 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d023      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b80      	cmp	r3, #128	@ 0x80
 80032c2:	d020      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d01d      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d116      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f856 	bl	80033a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2208      	movs	r2, #8
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00f      	b.n	8003326 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	429a      	cmp	r2, r3
 8003322:	d0b4      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2222      	movs	r2, #34	@ 0x22
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003372:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b095      	sub	sp, #84	@ 0x54
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3314      	adds	r3, #20
 80033e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	2b01      	cmp	r3, #1
 8003416:	d119      	bne.n	800344c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60bb      	str	r3, [r7, #8]
   return(result);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003438:	61ba      	str	r2, [r7, #24]
 800343a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	613b      	str	r3, [r7, #16]
   return(result);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e5      	bne.n	8003418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800345a:	bf00      	nop
 800345c:	3754      	adds	r7, #84	@ 0x54
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fee8 	bl	8003254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b21      	cmp	r3, #33	@ 0x21
 800349e:	d13e      	bne.n	800351e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a8:	d114      	bne.n	80034d4 <UART_Transmit_IT+0x48>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d110      	bne.n	80034d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	1c9a      	adds	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	621a      	str	r2, [r3, #32]
 80034d2:	e008      	b.n	80034e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6211      	str	r1, [r2, #32]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f003 fe3a 	bl	80071c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08c      	sub	sp, #48	@ 0x30
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b22      	cmp	r3, #34	@ 0x22
 800356c:	f040 80ae 	bne.w	80036cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003578:	d117      	bne.n	80035aa <UART_Receive_IT+0x50>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003598:	b29a      	uxth	r2, r3
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a8:	e026      	b.n	80035f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035bc:	d007      	beq.n	80035ce <UART_Receive_IT+0x74>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <UART_Receive_IT+0x82>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e008      	b.n	80035ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4619      	mov	r1, r3
 8003606:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003608:	2b00      	cmp	r3, #0
 800360a:	d15d      	bne.n	80036c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0220 	bic.w	r2, r2, #32
 800361a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800362a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	2b01      	cmp	r3, #1
 8003650:	d135      	bne.n	80036be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	613b      	str	r3, [r7, #16]
   return(result);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 0310 	bic.w	r3, r3, #16
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003678:	623a      	str	r2, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	61bb      	str	r3, [r7, #24]
   return(result);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b10      	cmp	r3, #16
 8003698:	d10a      	bne.n	80036b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fdd5 	bl	8003266 <HAL_UARTEx_RxEventCallback>
 80036bc:	e002      	b.n	80036c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f003 fd62 	bl	8007188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e002      	b.n	80036ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3730      	adds	r7, #48	@ 0x30
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003712:	f023 030c 	bic.w	r3, r3, #12
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	430b      	orrs	r3, r1
 800371e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2c      	ldr	r2, [pc, #176]	@ (80037ec <UART_SetConfig+0x114>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7fe fe6a 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	e002      	b.n	800374e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fe52 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 800374c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009a      	lsls	r2, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <UART_SetConfig+0x118>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	0119      	lsls	r1, r3, #4
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009a      	lsls	r2, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	fbb2 f2f3 	udiv	r2, r2, r3
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <UART_SetConfig+0x118>)
 8003786:	fba3 0302 	umull	r0, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2064      	movs	r0, #100	@ 0x64
 800378e:	fb00 f303 	mul.w	r3, r0, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	3332      	adds	r3, #50	@ 0x32
 8003798:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <UART_SetConfig+0x118>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a4:	4419      	add	r1, r3
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <UART_SetConfig+0x118>)
 80037be:	fba3 0302 	umull	r0, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2064      	movs	r0, #100	@ 0x64
 80037c6:	fb00 f303 	mul.w	r3, r0, r3
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	3332      	adds	r3, #50	@ 0x32
 80037d0:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <UART_SetConfig+0x118>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	440a      	add	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40013800 	.word	0x40013800
 80037f0:	51eb851f 	.word	0x51eb851f

080037f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	4638      	mov	r0, r7
 80037fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003816:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800381a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	b29b      	uxth	r3, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	4013      	ands	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	4638      	mov	r0, r7
 8003864:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <__NVIC_SetPriority>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	@ (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	@ (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003900:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <SysTick_Handler+0x1c>)
 8003902:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003904:	f002 ff5e 	bl	80067c4 <xTaskGetSchedulerState>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800390e:	f001 f9db 	bl	8004cc8 <xPortSysTickHandler>
  }
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003920:	2100      	movs	r1, #0
 8003922:	f06f 0004 	mvn.w	r0, #4
 8003926:	f7ff ffbf 	bl	80038a8 <__NVIC_SetPriority>
#endif
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003936:	f3ef 8305 	mrs	r3, IPSR
 800393a:	603b      	str	r3, [r7, #0]
  return(result);
 800393c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003942:	f06f 0305 	mvn.w	r3, #5
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e00c      	b.n	8003964 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <osKernelInitialize+0x40>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <osKernelInitialize+0x40>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	e002      	b.n	8003964 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003964:	687b      	ldr	r3, [r7, #4]
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	200004b4 	.word	0x200004b4

08003974 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397a:	f3ef 8305 	mrs	r3, IPSR
 800397e:	603b      	str	r3, [r7, #0]
  return(result);
 8003980:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003986:	f06f 0305 	mvn.w	r3, #5
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	e010      	b.n	80039b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <osKernelStart+0x48>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d109      	bne.n	80039aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003996:	f7ff ffc1 	bl	800391c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <osKernelStart+0x48>)
 800399c:	2202      	movs	r2, #2
 800399e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039a0:	f002 f9fe 	bl	8005da0 <vTaskStartScheduler>
      stat = osOK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	e002      	b.n	80039b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200004b4 	.word	0x200004b4

080039c0 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <OS_Tick_GetCount+0x20>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <OS_Tick_GetCount+0x20>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <OS_Tick_GetOverflow+0x18>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0301 	and.w	r3, r3, #1
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010

08003a00 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <OS_Tick_GetInterval+0x14>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	3301      	adds	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a24:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <osKernelGetSysTimerCount+0x22>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <osKernelGetSysTimerCount+0x24>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3e:	b672      	cpsid	i
}
 8003a40:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8003a42:	f002 fac9 	bl	8005fd8 <xTaskGetTickCount>
 8003a46:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8003a48:	f7ff ffba 	bl	80039c0 <OS_Tick_GetCount>
 8003a4c:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8003a4e:	f7ff ffc9 	bl	80039e4 <OS_Tick_GetOverflow>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8003a58:	f7ff ffb2 	bl	80039c0 <OS_Tick_GetCount>
 8003a5c:	6138      	str	r0, [r7, #16]
    ticks++;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	3301      	adds	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8003a64:	f7ff ffcc 	bl	8003a00 <OS_Tick_GetInterval>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7c:	b662      	cpsie	i
}
 8003a7e:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8003a80:	693b      	ldr	r3, [r7, #16]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <osKernelGetSysTimerFreq>:

uint32_t osKernelGetSysTimerFreq (void) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 8003a90:	4b02      	ldr	r3, [pc, #8]	@ (8003a9c <osKernelGetSysTimerFreq+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	@ 0x38
 8003aa4:	af04      	add	r7, sp, #16
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab0:	f3ef 8305 	mrs	r3, IPSR
 8003ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d17e      	bne.n	8003bba <osThreadNew+0x11a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d07b      	beq.n	8003bba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ac6:	2318      	movs	r3, #24
 8003ac8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d045      	beq.n	8003b66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <osThreadNew+0x48>
        name = attr->name;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <osThreadNew+0x6e>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b38      	cmp	r3, #56	@ 0x38
 8003b00:	d805      	bhi.n	8003b0e <osThreadNew+0x6e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <osThreadNew+0x72>
        return (NULL);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e054      	b.n	8003bbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <osThreadNew+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b30:	d90a      	bls.n	8003b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <osThreadNew+0xa8>
        mem = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e010      	b.n	8003b6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10c      	bne.n	8003b6a <osThreadNew+0xca>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <osThreadNew+0xca>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <osThreadNew+0xca>
          mem = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	e001      	b.n	8003b6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d110      	bne.n	8003b92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b78:	9202      	str	r2, [sp, #8]
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f001 ff16 	bl	80059b8 <xTaskCreateStatic>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e013      	b.n	8003bba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d110      	bne.n	8003bba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 ff64 	bl	8005a78 <xTaskCreate>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <osThreadNew+0x11a>
            hTask = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bba:	693b      	ldr	r3, [r7, #16]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3728      	adds	r7, #40	@ 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bcc:	f3ef 8305 	mrs	r3, IPSR
 8003bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <osDelay+0x1c>
    stat = osErrorISR;
 8003bd8:	f06f 0305 	mvn.w	r3, #5
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e007      	b.n	8003bf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f002 f8a2 	bl	8005d34 <vTaskDelay>
    }
  }

  return (stat);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c06:	f3ef 8305 	mrs	r3, IPSR
 8003c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c0c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d12d      	bne.n	8003c6e <osEventFlagsNew+0x74>
    mem = -1;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <osEventFlagsNew+0x3a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b1f      	cmp	r3, #31
 8003c2c:	d902      	bls.n	8003c34 <osEventFlagsNew+0x3a>
        mem = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e00c      	b.n	8003c4e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <osEventFlagsNew+0x54>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <osEventFlagsNew+0x54>
          mem = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e001      	b.n	8003c4e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fa37 	bl	80040cc <xEventGroupCreateStatic>
 8003c5e:	6178      	str	r0, [r7, #20]
 8003c60:	e005      	b.n	8003c6e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003c68:	f000 fa69 	bl	800413e <xEventGroupCreate>
 8003c6c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003c6e:	697b      	ldr	r3, [r7, #20]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <osEventFlagsSet+0x1c>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c92:	d303      	bcc.n	8003c9c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003c94:	f06f 0303 	mvn.w	r3, #3
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e028      	b.n	8003cee <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9c:	f3ef 8305 	mrs	r3, IPSR
 8003ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01d      	beq.n	8003ce4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6938      	ldr	r0, [r7, #16]
 8003cb6:	f000 fbe9 	bl	800448c <xEventGroupSetBitsFromISR>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8003cc0:	f06f 0302 	mvn.w	r3, #2
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e012      	b.n	8003cee <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <osEventFlagsSet+0x76>
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <osEventFlagsSet+0x80>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	e004      	b.n	8003cee <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003ce4:	6839      	ldr	r1, [r7, #0]
 8003ce6:	6938      	ldr	r0, [r7, #16]
 8003ce8:	f000 fb16 	bl	8004318 <xEventGroupSetBits>
 8003cec:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	@ 0x30
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <osEventFlagsWait+0x20>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d1a:	d303      	bcc.n	8003d24 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003d1c:	f06f 0303 	mvn.w	r3, #3
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e04b      	b.n	8003dbc <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d24:	f3ef 8305 	mrs	r3, IPSR
 8003d28:	617b      	str	r3, [r7, #20]
  return(result);
 8003d2a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8003d30:	f06f 0305 	mvn.w	r3, #5
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e041      	b.n	8003dbc <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	e001      	b.n	8003d4c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	e001      	b.n	8003d60 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	69b8      	ldr	r0, [r7, #24]
 8003d6c:	f000 fa02 	bl	8004174 <xEventGroupWaitBits>
 8003d70:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4013      	ands	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d019      	beq.n	8003dbc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003d8e:	f06f 0301 	mvn.w	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e012      	b.n	8003dbc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003d96:	f06f 0302 	mvn.w	r3, #2
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e00e      	b.n	8003dbc <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003dae:	f06f 0301 	mvn.w	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e002      	b.n	8003dbc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003db6:	f06f 0302 	mvn.w	r3, #2
 8003dba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3728      	adds	r7, #40	@ 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08a      	sub	sp, #40	@ 0x28
 8003dca:	af02      	add	r7, sp, #8
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd6:	f3ef 8305 	mrs	r3, IPSR
 8003dda:	613b      	str	r3, [r7, #16]
  return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d15f      	bne.n	8003ea2 <osMessageQueueNew+0xdc>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05c      	beq.n	8003ea2 <osMessageQueueNew+0xdc>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d059      	beq.n	8003ea2 <osMessageQueueNew+0xdc>
    mem = -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d029      	beq.n	8003e4e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <osMessageQueueNew+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e08:	d90e      	bls.n	8003e28 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <osMessageQueueNew+0x62>
        mem = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e014      	b.n	8003e52 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d110      	bne.n	8003e52 <osMessageQueueNew+0x8c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10c      	bne.n	8003e52 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <osMessageQueueNew+0x8c>
          mem = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e001      	b.n	8003e52 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10b      	bne.n	8003e70 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2100      	movs	r1, #0
 8003e62:	9100      	str	r1, [sp, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 f81c 	bl	8004ea4 <xQueueGenericCreateStatic>
 8003e6c:	61f8      	str	r0, [r7, #28]
 8003e6e:	e008      	b.n	8003e82 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003e76:	2200      	movs	r2, #0
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f001 f88f 	bl	8004f9e <xQueueGenericCreate>
 8003e80:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00c      	beq.n	8003ea2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e001      	b.n	8003e9a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	69f8      	ldr	r0, [r7, #28]
 8003e9e:	f001 fd2f 	bl	8005900 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec4:	f3ef 8305 	mrs	r3, IPSR
 8003ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d028      	beq.n	8003f22 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <osMessageQueuePut+0x36>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <osMessageQueuePut+0x36>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003ee2:	f06f 0303 	mvn.w	r3, #3
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e038      	b.n	8003f5c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003eee:	f107 0210 	add.w	r2, r7, #16
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	69b8      	ldr	r0, [r7, #24]
 8003ef8:	f001 f9b2 	bl	8005260 <xQueueGenericSendFromISR>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d003      	beq.n	8003f0a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003f02:	f06f 0302 	mvn.w	r3, #2
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e028      	b.n	8003f5c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d025      	beq.n	8003f5c <osMessageQueuePut+0xb0>
 8003f10:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <osMessageQueuePut+0xbc>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	e01c      	b.n	8003f5c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <osMessageQueuePut+0x82>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003f2e:	f06f 0303 	mvn.w	r3, #3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e012      	b.n	8003f5c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	f001 f88d 	bl	800505c <xQueueGenericSend>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d009      	beq.n	8003f5c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003f4e:	f06f 0301 	mvn.w	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e002      	b.n	8003f5c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003f56:	f06f 0302 	mvn.w	r3, #2
 8003f5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f82:	f3ef 8305 	mrs	r3, IPSR
 8003f86:	617b      	str	r3, [r7, #20]
  return(result);
 8003f88:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d028      	beq.n	8003fe0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <osMessageQueueGet+0x34>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <osMessageQueueGet+0x34>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003fa0:	f06f 0303 	mvn.w	r3, #3
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e037      	b.n	8004018 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003fac:	f107 0310 	add.w	r3, r7, #16
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	69b8      	ldr	r0, [r7, #24]
 8003fb6:	f001 fad3 	bl	8005560 <xQueueReceiveFromISR>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d003      	beq.n	8003fc8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003fc0:	f06f 0302 	mvn.w	r3, #2
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e027      	b.n	8004018 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d024      	beq.n	8004018 <osMessageQueueGet+0xac>
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <osMessageQueueGet+0xb8>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	e01b      	b.n	8004018 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <osMessageQueueGet+0x80>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003fec:	f06f 0303 	mvn.w	r3, #3
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e011      	b.n	8004018 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	69b8      	ldr	r0, [r7, #24]
 8003ffa:	f001 f9cf 	bl	800539c <xQueueReceive>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b01      	cmp	r3, #1
 8004002:	d009      	beq.n	8004018 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800400a:	f06f 0301 	mvn.w	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e002      	b.n	8004018 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004012:	f06f 0302 	mvn.w	r3, #2
 8004016:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004018:	69fb      	ldr	r3, [r7, #28]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <osMessageQueueGetCount+0x18>
    count = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e00e      	b.n	800405e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004040:	f3ef 8305 	mrs	r3, IPSR
 8004044:	60fb      	str	r3, [r7, #12]
  return(result);
 8004046:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800404c:	6938      	ldr	r0, [r7, #16]
 800404e:	f001 fb28 	bl	80056a2 <uxQueueMessagesWaitingFromISR>
 8004052:	6178      	str	r0, [r7, #20]
 8004054:	e003      	b.n	800405e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004056:	6938      	ldr	r0, [r7, #16]
 8004058:	f001 fb04 	bl	8005664 <uxQueueMessagesWaiting>
 800405c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800405e:	697b      	ldr	r3, [r7, #20]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a06      	ldr	r2, [pc, #24]	@ (8004090 <vApplicationGetIdleTaskMemory+0x28>)
 8004078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <vApplicationGetIdleTaskMemory+0x2c>)
 800407e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	200004b8 	.word	0x200004b8
 8004094:	20000560 	.word	0x20000560

08004098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80040a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4a06      	ldr	r2, [pc, #24]	@ (80040c8 <vApplicationGetTimerTaskMemory+0x30>)
 80040ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040b6:	601a      	str	r2, [r3, #0]
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000760 	.word	0x20000760
 80040c8:	20000808 	.word	0x20000808

080040cc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80040f2:	2320      	movs	r3, #32
 80040f4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d00b      	beq.n	8004114 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60fb      	str	r3, [r7, #12]
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3304      	adds	r3, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fbaf 	bl	800488c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004134:	697b      	ldr	r3, [r7, #20]
	}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004144:	2020      	movs	r0, #32
 8004146:	f000 f9b5 	bl	80044b4 <pvPortMalloc>
 800414a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fb95 	bl	800488c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004168:	687b      	ldr	r3, [r7, #4]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b090      	sub	sp, #64	@ 0x40
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <xEventGroupWaitBits+0x38>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	623b      	str	r3, [r7, #32]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b2:	d30b      	bcc.n	80041cc <xEventGroupWaitBits+0x58>
	__asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61fb      	str	r3, [r7, #28]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <xEventGroupWaitBits+0x76>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61bb      	str	r3, [r7, #24]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ea:	f002 faeb 	bl	80067c4 <xTaskGetSchedulerState>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <xEventGroupWaitBits+0x86>
 80041f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <xEventGroupWaitBits+0x8a>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xEventGroupWaitBits+0x8c>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	617b      	str	r3, [r7, #20]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800421c:	f001 fe30 	bl	8005e80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800422c:	f000 f90d 	bl	800444a <prvTestWaitCondition>
 8004230:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800423c:	2300      	movs	r3, #0
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d028      	beq.n	8004298 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	43db      	mvns	r3, r3
 800424e:	401a      	ands	r2, r3
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e020      	b.n	8004298 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	633b      	str	r3, [r7, #48]	@ 0x30
 8004264:	e018      	b.n	8004298 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004280:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004284:	1d18      	adds	r0, r3, #4
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	4313      	orrs	r3, r2
 800428c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800428e:	4619      	mov	r1, r3
 8004290:	f002 f804 	bl	800629c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004298:	f001 fe00 	bl	8005e9c <xTaskResumeAll>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800429e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d031      	beq.n	8004308 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80042aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <xEventGroupWaitBits+0x1a0>)
 80042ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80042ba:	f002 fb11 	bl	80068e0 <uxTaskResetEventItemValue>
 80042be:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80042c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11a      	bne.n	8004300 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80042ca:	f000 fc7f 	bl	8004bcc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80042da:	f000 f8b6 	bl	800444a <prvTestWaitCondition>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80042fc:	f000 fc96 	bl	8004c2c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004302:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004306:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800430a:	4618      	mov	r0, r3
 800430c:	3740      	adds	r7, #64	@ 0x40
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08e      	sub	sp, #56	@ 0x38
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004322:	2300      	movs	r3, #0
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xEventGroupSetBits+0x34>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004352:	d30b      	bcc.n	800436c <xEventGroupSetBits+0x54>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	3304      	adds	r3, #4
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	3308      	adds	r3, #8
 8004376:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004378:	f001 fd82 	bl	8005e80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	431a      	orrs	r2, r3
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800438e:	e03c      	b.n	800440a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80043a6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043ae:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ca:	e008      	b.n	80043de <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d101      	bne.n	80043de <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80043da:	2301      	movs	r3, #1
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80043de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80043ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	4619      	mov	r1, r3
 8004400:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004402:	f002 f819 	bl	8006438 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800440a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	429a      	cmp	r2, r3
 8004410:	d1be      	bne.n	8004390 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	43db      	mvns	r3, r3
 800441a:	401a      	ands	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004420:	f001 fd3c 	bl	8005e9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3738      	adds	r7, #56	@ 0x38
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff6b 	bl	8004318 <xEventGroupSetBits>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e007      	b.n	8004480 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d101      	bne.n	8004480 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004480:	697b      	ldr	r3, [r7, #20]
}
 8004482:	4618      	mov	r0, r3
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	4804      	ldr	r0, [pc, #16]	@ (80044b0 <xEventGroupSetBitsFromISR+0x24>)
 80044a0:	f002 fde2 	bl	8007068 <xTimerPendFunctionCallFromISR>
 80044a4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80044a6:	697b      	ldr	r3, [r7, #20]
	}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	08004431 	.word	0x08004431

080044b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044c0:	f001 fcde 	bl	8005e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004638 <pvPortMalloc+0x184>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044cc:	f000 f924 	bl	8004718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044d0:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <pvPortMalloc+0x188>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 8095 	bne.w	8004608 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01e      	beq.n	8004522 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044e4:	2208      	movs	r2, #8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d015      	beq.n	8004522 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f023 0307 	bic.w	r3, r3, #7
 80044fc:	3308      	adds	r3, #8
 80044fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <pvPortMalloc+0x6e>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	617b      	str	r3, [r7, #20]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d06f      	beq.n	8004608 <pvPortMalloc+0x154>
 8004528:	4b45      	ldr	r3, [pc, #276]	@ (8004640 <pvPortMalloc+0x18c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d86a      	bhi.n	8004608 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004532:	4b44      	ldr	r3, [pc, #272]	@ (8004644 <pvPortMalloc+0x190>)
 8004534:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004536:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <pvPortMalloc+0x190>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800453c:	e004      	b.n	8004548 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	d903      	bls.n	800455a <pvPortMalloc+0xa6>
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f1      	bne.n	800453e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800455a:	4b37      	ldr	r3, [pc, #220]	@ (8004638 <pvPortMalloc+0x184>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	429a      	cmp	r2, r3
 8004562:	d051      	beq.n	8004608 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	4413      	add	r3, r2
 800456c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	2308      	movs	r3, #8
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	429a      	cmp	r2, r3
 8004584:	d920      	bls.n	80045c8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <pvPortMalloc+0xfc>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	613b      	str	r3, [r7, #16]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045c2:	69b8      	ldr	r0, [r7, #24]
 80045c4:	f000 f90a 	bl	80047dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <pvPortMalloc+0x18c>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <pvPortMalloc+0x18c>)
 80045d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <pvPortMalloc+0x18c>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <pvPortMalloc+0x194>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d203      	bcs.n	80045ea <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045e2:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <pvPortMalloc+0x18c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <pvPortMalloc+0x194>)
 80045e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4b13      	ldr	r3, [pc, #76]	@ (800463c <pvPortMalloc+0x188>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <pvPortMalloc+0x198>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a11      	ldr	r2, [pc, #68]	@ (800464c <pvPortMalloc+0x198>)
 8004606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004608:	f001 fc48 	bl	8005e9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <pvPortMalloc+0x17a>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60fb      	str	r3, [r7, #12]
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	e7fd      	b.n	800462a <pvPortMalloc+0x176>
	return pvReturn;
 800462e:	69fb      	ldr	r3, [r7, #28]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20003af0 	.word	0x20003af0
 800463c:	20003b04 	.word	0x20003b04
 8004640:	20003af4 	.word	0x20003af4
 8004644:	20003ae8 	.word	0x20003ae8
 8004648:	20003af8 	.word	0x20003af8
 800464c:	20003afc 	.word	0x20003afc

08004650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04f      	beq.n	8004702 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004662:	2308      	movs	r3, #8
 8004664:	425b      	negs	r3, r3
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4b25      	ldr	r3, [pc, #148]	@ (800470c <vPortFree+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <vPortFree+0x46>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60fb      	str	r3, [r7, #12]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <vPortFree+0x66>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60bb      	str	r3, [r7, #8]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <vPortFree+0xbc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01e      	beq.n	8004702 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11a      	bne.n	8004702 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <vPortFree+0xbc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	401a      	ands	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046dc:	f001 fbd0 	bl	8005e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <vPortFree+0xc0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <vPortFree+0xc0>)
 80046ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f000 f874 	bl	80047dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046f4:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <vPortFree+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a06      	ldr	r2, [pc, #24]	@ (8004714 <vPortFree+0xc4>)
 80046fc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046fe:	f001 fbcd 	bl	8005e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20003b04 	.word	0x20003b04
 8004710:	20003af4 	.word	0x20003af4
 8004714:	20003b00 	.word	0x20003b00

08004718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800471e:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8004722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004724:	4b27      	ldr	r3, [pc, #156]	@ (80047c4 <prvHeapInit+0xac>)
 8004726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3307      	adds	r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <prvHeapInit+0xac>)
 8004748:	4413      	add	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004750:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <prvHeapInit+0xb0>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004756:	4b1c      	ldr	r3, [pc, #112]	@ (80047c8 <prvHeapInit+0xb0>)
 8004758:	2200      	movs	r2, #0
 800475a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4413      	add	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004764:	2208      	movs	r2, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a15      	ldr	r2, [pc, #84]	@ (80047cc <prvHeapInit+0xb4>)
 8004778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800477a:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <prvHeapInit+0xb4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004782:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <prvHeapInit+0xb4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	1ad2      	subs	r2, r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <prvHeapInit+0xb4>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <prvHeapInit+0xb8>)
 80047a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <prvHeapInit+0xbc>)
 80047ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047b0:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <prvHeapInit+0xc0>)
 80047b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000c08 	.word	0x20000c08
 80047c8:	20003ae8 	.word	0x20003ae8
 80047cc:	20003af0 	.word	0x20003af0
 80047d0:	20003af8 	.word	0x20003af8
 80047d4:	20003af4 	.word	0x20003af4
 80047d8:	20003b04 	.word	0x20003b04

080047dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047e4:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <prvInsertBlockIntoFreeList+0xa8>)
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e002      	b.n	80047f0 <prvInsertBlockIntoFreeList+0x14>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d8f7      	bhi.n	80047ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4413      	add	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d108      	bne.n	800481e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d118      	bne.n	8004864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <prvInsertBlockIntoFreeList+0xac>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d00d      	beq.n	800485a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e008      	b.n	800486c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <prvInsertBlockIntoFreeList+0xac>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e003      	b.n	800486c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d002      	beq.n	800487a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	20003ae8 	.word	0x20003ae8
 8004888:	20003af0 	.word	0x20003af0

0800488c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0208 	add.w	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f103 0208 	add.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d103      	bne.n	8004948 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e00c      	b.n	8004962 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3308      	adds	r3, #8
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e002      	b.n	8004956 <vListInsert+0x2e>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d2f6      	bcs.n	8004950 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6852      	ldr	r2, [r2, #4]
 80049b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d103      	bne.n	80049cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
	...

080049ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b04      	subs	r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b04      	subs	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a1c:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <pxPortInitialiseStack+0x54>)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b14      	subs	r3, #20
 8004a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b20      	subs	r3, #32
 8004a32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	08004a45 	.word	0x08004a45

08004a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a4e:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <prvTaskExitError+0x54>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d00b      	beq.n	8004a70 <prvTaskExitError+0x2c>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <prvTaskExitError+0x28>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
}
 8004a82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a84:	bf00      	nop
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0fc      	beq.n	8004a86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	2000000c 	.word	0x2000000c
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <pxCurrentTCBConst2>)
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	6808      	ldr	r0, [r1, #0]
 8004aa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aaa:	f380 8809 	msr	PSP, r0
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8811 	msr	BASEPRI, r0
 8004aba:	f04e 0e0d 	orr.w	lr, lr, #13
 8004abe:	4770      	bx	lr

08004ac0 <pxCurrentTCBConst2>:
 8004ac0:	20003b50 	.word	0x20003b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ac8:	4806      	ldr	r0, [pc, #24]	@ (8004ae4 <prvPortStartFirstTask+0x1c>)
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f380 8808 	msr	MSP, r0
 8004ad2:	b662      	cpsie	i
 8004ad4:	b661      	cpsie	f
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	df00      	svc	0
 8004ae0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed08 	.word	0xe000ed08

08004ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aee:	4b32      	ldr	r3, [pc, #200]	@ (8004bb8 <xPortStartScheduler+0xd0>)
 8004af0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	22ff      	movs	r2, #255	@ 0xff
 8004afe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b2a      	ldr	r3, [pc, #168]	@ (8004bbc <xPortStartScheduler+0xd4>)
 8004b14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b18:	2207      	movs	r2, #7
 8004b1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b1c:	e009      	b.n	8004b32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b1e:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4a26      	ldr	r2, [pc, #152]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d0ef      	beq.n	8004b1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d00b      	beq.n	8004b62 <xPortStartScheduler+0x7a>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b62:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b6c:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b74:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b98:	f000 f8b8 	bl	8004d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <xPortStartScheduler+0xe0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba2:	f7ff ff91 	bl	8004ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ba6:	f001 fadf 	bl	8006168 <vTaskSwitchContext>
	prvTaskExitError();
 8004baa:	f7ff ff4b 	bl	8004a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000e400 	.word	0xe000e400
 8004bbc:	20003b08 	.word	0x20003b08
 8004bc0:	20003b0c 	.word	0x20003b0c
 8004bc4:	e000ed20 	.word	0xe000ed20
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	607b      	str	r3, [r7, #4]
}
 8004be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004bee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d110      	bne.n	8004c1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <vPortEnterCritical+0x5c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <vPortEnterCritical+0x4e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	603b      	str	r3, [r7, #0]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <vPortEnterCritical+0x4a>
	}
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	2000000c 	.word	0x2000000c
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <vPortExitCritical+0x26>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <vPortExitCritical+0x44>
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c9a:	f380 8811 	msr	BASEPRI, r0
 8004c9e:	f001 fa63 	bl	8006168 <vTaskSwitchContext>
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cb6:	f380 8809 	msr	PSP, r0
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	4770      	bx	lr

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	20003b50 	.word	0x20003b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f001 f987 	bl	8005ff4 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <vPortSetupTimerInterrupt+0x30>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	4a08      	ldr	r2, [pc, #32]	@ (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d2e:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <vPortSetupTimerInterrupt+0x30>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e010 	.word	0xe000e010
 8004d40:	e000e018 	.word	0xe000e018
 8004d44:	20000000 	.word	0x20000000
 8004d48:	10624dd3 	.word	0x10624dd3
 8004d4c:	e000e014 	.word	0xe000e014

08004d50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d56:	f3ef 8305 	mrs	r3, IPSR
 8004d5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d915      	bls.n	8004d8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d62:	4a17      	ldr	r2, [pc, #92]	@ (8004dc0 <vPortValidateInterruptPriority+0x70>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d6c:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <vPortValidateInterruptPriority+0x74>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	7afa      	ldrb	r2, [r7, #11]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20b      	bcs.n	8004d8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	607b      	str	r3, [r7, #4]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <vPortValidateInterruptPriority+0x78>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <vPortValidateInterruptPriority+0x7c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90b      	bls.n	8004db6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	603b      	str	r3, [r7, #0]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <vPortValidateInterruptPriority+0x62>
	}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	e000e3f0 	.word	0xe000e3f0
 8004dc4:	20003b08 	.word	0x20003b08
 8004dc8:	e000ed0c 	.word	0xe000ed0c
 8004dcc:	20003b0c 	.word	0x20003b0c

08004dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <xQueueGenericReset+0x2c>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60bb      	str	r3, [r7, #8]
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dfc:	f7ff fee6 	bl	8004bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	441a      	add	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	22ff      	movs	r2, #255	@ 0xff
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	22ff      	movs	r2, #255	@ 0xff
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d114      	bne.n	8004e7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01a      	beq.n	8004e90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fa86 	bl	8006370 <xTaskRemoveFromEventList>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <xQueueGenericReset+0xd0>)
 8004e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	e009      	b.n	8004e90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fd03 	bl	800488c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3324      	adds	r3, #36	@ 0x24
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fcfe 	bl	800488c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e90:	f7ff fecc 	bl	8004c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	@ 0x38
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <xQueueGenericCreateStatic+0x56>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xQueueGenericCreateStatic+0x5a>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericCreateStatic+0x5c>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <xQueueGenericCreateStatic+0x84>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueGenericCreateStatic+0x88>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueGenericCreateStatic+0x8a>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fb      	str	r3, [r7, #28]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f4a:	2350      	movs	r3, #80	@ 0x50
 8004f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b50      	cmp	r3, #80	@ 0x50
 8004f52:	d00b      	beq.n	8004f6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61bb      	str	r3, [r7, #24]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f840 	bl	8005014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3730      	adds	r7, #48	@ 0x30
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	@ 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xQueueGenericCreate+0x2c>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	613b      	str	r3, [r7, #16]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3350      	adds	r3, #80	@ 0x50
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fa6b 	bl	80044b4 <pvPortMalloc>
 8004fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3350      	adds	r3, #80	@ 0x50
 8004fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff8:	79fa      	ldrb	r2, [r7, #7]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f805 	bl	8005014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800500a:	69bb      	ldr	r3, [r7, #24]
	}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005042:	2101      	movs	r1, #1
 8005044:	69b8      	ldr	r0, [r7, #24]
 8005046:	f7ff fec3 	bl	8004dd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	@ 0x38
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xQueueGenericSend+0x34>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <xQueueGenericSend+0x42>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <xQueueGenericSend+0x46>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xQueueGenericSend+0x48>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <xQueueGenericSend+0x64>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d103      	bne.n	80050ce <xQueueGenericSend+0x72>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <xQueueGenericSend+0x76>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <xQueueGenericSend+0x78>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <xQueueGenericSend+0x94>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	623b      	str	r3, [r7, #32]
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050f0:	f001 fb68 	bl	80067c4 <xTaskGetSchedulerState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <xQueueGenericSend+0xa4>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <xQueueGenericSend+0xa8>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <xQueueGenericSend+0xaa>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <xQueueGenericSend+0xc6>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	61fb      	str	r3, [r7, #28]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005122:	f7ff fd53 	bl	8004bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xQueueGenericSend+0xdc>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d129      	bne.n	800518c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513e:	f000 face 	bl	80056de <prvCopyDataToQueue>
 8005142:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d010      	beq.n	800516e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	3324      	adds	r3, #36	@ 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f90d 	bl	8006370 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d013      	beq.n	8005184 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800515c:	4b3f      	ldr	r3, [pc, #252]	@ (800525c <xQueueGenericSend+0x200>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	e00a      	b.n	8005184 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005174:	4b39      	ldr	r3, [pc, #228]	@ (800525c <xQueueGenericSend+0x200>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005184:	f7ff fd52 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8005188:	2301      	movs	r3, #1
 800518a:	e063      	b.n	8005254 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005192:	f7ff fd4b 	bl	8004c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005196:	2300      	movs	r3, #0
 8005198:	e05c      	b.n	8005254 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800519a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 f9ab 	bl	8006500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ae:	f7ff fd3d 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b2:	f000 fe65 	bl	8005e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051b6:	f7ff fd09 	bl	8004bcc <vPortEnterCritical>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d103      	bne.n	80051d0 <xQueueGenericSend+0x174>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSend+0x18a>
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e6:	f7ff fd21 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ea:	1d3a      	adds	r2, r7, #4
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f99a 	bl	800652c <xTaskCheckForTimeOut>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d124      	bne.n	8005248 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005200:	f000 fb65 	bl	80058ce <prvIsQueueFull>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	3310      	adds	r3, #16
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f81c 	bl	8006250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800521a:	f000 faf0 	bl	80057fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800521e:	f000 fe3d 	bl	8005e9c <xTaskResumeAll>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	f47f af7c 	bne.w	8005122 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <xQueueGenericSend+0x200>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	e772      	b.n	8005122 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800523c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800523e:	f000 fade 	bl	80057fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005242:	f000 fe2b 	bl	8005e9c <xTaskResumeAll>
 8005246:	e76c      	b.n	8005122 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800524a:	f000 fad8 	bl	80057fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800524e:	f000 fe25 	bl	8005e9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005254:	4618      	mov	r0, r3
 8005256:	3738      	adds	r7, #56	@ 0x38
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b090      	sub	sp, #64	@ 0x40
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <xQueueGenericSendFromISR+0x3e>
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <xQueueGenericSendFromISR+0x42>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericSendFromISR+0x44>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d103      	bne.n	80052ce <xQueueGenericSendFromISR+0x6e>
 80052c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <xQueueGenericSendFromISR+0x72>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueGenericSendFromISR+0x74>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	623b      	str	r3, [r7, #32]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f0:	f7ff fd2e 	bl	8004d50 <vPortValidateInterruptPriority>
	__asm volatile
 80052f4:	f3ef 8211 	mrs	r2, BASEPRI
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61fa      	str	r2, [r7, #28]
 800530a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800530c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <xQueueGenericSendFromISR+0xc2>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d12f      	bne.n	8005382 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005328:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005338:	f000 f9d1 	bl	80056de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800533c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d112      	bne.n	800536c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	3324      	adds	r3, #36	@ 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f80c 	bl	8006370 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800536c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005370:	3301      	adds	r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b25a      	sxtb	r2, r3
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005380:	e001      	b.n	8005386 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005382:	2300      	movs	r3, #0
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	617b      	str	r3, [r7, #20]
	__asm volatile
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005394:	4618      	mov	r0, r3
 8005396:	3740      	adds	r7, #64	@ 0x40
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	@ 0x30
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <xQueueReceive+0x32>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	623b      	str	r3, [r7, #32]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <xQueueReceive+0x40>
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xQueueReceive+0x44>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <xQueueReceive+0x46>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <xQueueReceive+0x62>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	61fb      	str	r3, [r7, #28]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fe:	f001 f9e1 	bl	80067c4 <xTaskGetSchedulerState>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueReceive+0x72>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueReceive+0x76>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueReceive+0x78>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueReceive+0x94>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61bb      	str	r3, [r7, #24]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005430:	f7ff fbcc 	bl	8004bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01f      	beq.n	8005480 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005444:	f000 f9b5 	bl	80057b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00f      	beq.n	8005478 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	3310      	adds	r3, #16
 800545c:	4618      	mov	r0, r3
 800545e:	f000 ff87 	bl	8006370 <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005468:	4b3c      	ldr	r3, [pc, #240]	@ (800555c <xQueueReceive+0x1c0>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005478:	f7ff fbd8 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 800547c:	2301      	movs	r3, #1
 800547e:	e069      	b.n	8005554 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005486:	f7ff fbd1 	bl	8004c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800548a:	2300      	movs	r3, #0
 800548c:	e062      	b.n	8005554 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005494:	f107 0310 	add.w	r3, r7, #16
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f831 	bl	8006500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054a2:	f7ff fbc3 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054a6:	f000 fceb 	bl	8005e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054aa:	f7ff fb8f 	bl	8004bcc <vPortEnterCritical>
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054b4:	b25b      	sxtb	r3, r3
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d103      	bne.n	80054c4 <xQueueReceive+0x128>
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d103      	bne.n	80054da <xQueueReceive+0x13e>
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054da:	f7ff fba7 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054de:	1d3a      	adds	r2, r7, #4
 80054e0:	f107 0310 	add.w	r3, r7, #16
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 f820 	bl	800652c <xTaskCheckForTimeOut>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d123      	bne.n	800553a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054f4:	f000 f9d5 	bl	80058a2 <prvIsQueueEmpty>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d017      	beq.n	800552e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	3324      	adds	r3, #36	@ 0x24
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fea2 	bl	8006250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800550c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800550e:	f000 f976 	bl	80057fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005512:	f000 fcc3 	bl	8005e9c <xTaskResumeAll>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d189      	bne.n	8005430 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800551c:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <xQueueReceive+0x1c0>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	e780      	b.n	8005430 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800552e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005530:	f000 f965 	bl	80057fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005534:	f000 fcb2 	bl	8005e9c <xTaskResumeAll>
 8005538:	e77a      	b.n	8005430 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800553a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553c:	f000 f95f 	bl	80057fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005540:	f000 fcac 	bl	8005e9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005546:	f000 f9ac 	bl	80058a2 <prvIsQueueEmpty>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	f43f af6f 	beq.w	8005430 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005552:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005554:	4618      	mov	r0, r3
 8005556:	3730      	adds	r7, #48	@ 0x30
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08e      	sub	sp, #56	@ 0x38
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	623b      	str	r3, [r7, #32]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <xQueueReceiveFromISR+0x3c>
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <xQueueReceiveFromISR+0x40>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <xQueueReceiveFromISR+0x42>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	61fb      	str	r3, [r7, #28]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055be:	f7ff fbc7 	bl	8004d50 <vPortValidateInterruptPriority>
	__asm volatile
 80055c2:	f3ef 8211 	mrs	r2, BASEPRI
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	61ba      	str	r2, [r7, #24]
 80055d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02f      	beq.n	800564a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f8:	f000 f8db 	bl	80057b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005604:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d112      	bne.n	8005634 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	3310      	adds	r3, #16
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fea8 	bl	8006370 <xTaskRemoveFromEventList>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e007      	b.n	8005644 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005638:	3301      	adds	r3, #1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	b25a      	sxtb	r2, r3
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005644:	2301      	movs	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34
 8005648:	e001      	b.n	800564e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800564a:	2300      	movs	r3, #0
 800564c:	637b      	str	r3, [r7, #52]	@ 0x34
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f383 8811 	msr	BASEPRI, r3
}
 8005658:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800565c:	4618      	mov	r0, r3
 800565e:	3738      	adds	r7, #56	@ 0x38
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60bb      	str	r3, [r7, #8]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800568a:	f7ff fa9f 	bl	8004bcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005694:	f7ff faca 	bl	8004c2c <vPortExitCritical>

	return uxReturn;
 8005698:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80056d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d14d      	bne.n	80057a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f879 	bl	8006800 <xTaskPriorityDisinherit>
 800570e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	e043      	b.n	80057a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6858      	ldr	r0, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	461a      	mov	r2, r3
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	f002 f97f 	bl	8007a2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d32b      	bcc.n	80057a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	605a      	str	r2, [r3, #4]
 8005750:	e026      	b.n	80057a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68d8      	ldr	r0, [r3, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	461a      	mov	r2, r3
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	f002 f965 	bl	8007a2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	425b      	negs	r3, r3
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d207      	bcs.n	800578e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	425b      	negs	r3, r3
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d105      	bne.n	80057a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	3b01      	subs	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80057a8:	697b      	ldr	r3, [r7, #20]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d018      	beq.n	80057f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d303      	bcc.n	80057e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68d9      	ldr	r1, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	461a      	mov	r2, r3
 80057f0:	6838      	ldr	r0, [r7, #0]
 80057f2:	f002 f91b 	bl	8007a2c <memcpy>
	}
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005806:	f7ff f9e1 	bl	8004bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005810:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005812:	e011      	b.n	8005838 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3324      	adds	r3, #36	@ 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fda5 	bl	8006370 <xTaskRemoveFromEventList>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800582c:	f000 fee2 	bl	80065f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	3b01      	subs	r3, #1
 8005834:	b2db      	uxtb	r3, r3
 8005836:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dce9      	bgt.n	8005814 <prvUnlockQueue+0x16>
 8005840:	e000      	b.n	8005844 <prvUnlockQueue+0x46>
					break;
 8005842:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	22ff      	movs	r2, #255	@ 0xff
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800584c:	f7ff f9ee 	bl	8004c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005850:	f7ff f9bc 	bl	8004bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800585a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800585c:	e011      	b.n	8005882 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d012      	beq.n	800588c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3310      	adds	r3, #16
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fd80 	bl	8006370 <xTaskRemoveFromEventList>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005876:	f000 febd 	bl	80065f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	3b01      	subs	r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dce9      	bgt.n	800585e <prvUnlockQueue+0x60>
 800588a:	e000      	b.n	800588e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800588c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	22ff      	movs	r2, #255	@ 0xff
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005896:	f7ff f9c9 	bl	8004c2c <vPortExitCritical>
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058aa:	f7ff f98f 	bl	8004bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058b6:	2301      	movs	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e001      	b.n	80058c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058c0:	f7ff f9b4 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058d6:	f7ff f979 	bl	8004bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d102      	bne.n	80058ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e001      	b.n	80058f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058f0:	f7ff f99c 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e014      	b.n	800593a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005910:	4a0e      	ldr	r2, [pc, #56]	@ (800594c <vQueueAddToRegistry+0x4c>)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800591c:	490b      	ldr	r1, [pc, #44]	@ (800594c <vQueueAddToRegistry+0x4c>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005926:	4a09      	ldr	r2, [pc, #36]	@ (800594c <vQueueAddToRegistry+0x4c>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005932:	e006      	b.n	8005942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b07      	cmp	r3, #7
 800593e:	d9e7      	bls.n	8005910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr
 800594c:	20003b10 	.word	0x20003b10

08005950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005960:	f7ff f934 	bl	8004bcc <vPortEnterCritical>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800596a:	b25b      	sxtb	r3, r3
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d103      	bne.n	800597a <vQueueWaitForMessageRestricted+0x2a>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d103      	bne.n	8005990 <vQueueWaitForMessageRestricted+0x40>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005990:	f7ff f94c 	bl	8004c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	3324      	adds	r3, #36	@ 0x24
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fcb7 	bl	8006318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff ff27 	bl	80057fe <prvUnlockQueue>
	}
 80059b0:	bf00      	nop
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	@ 0x38
 80059bc:	af04      	add	r7, sp, #16
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	61fb      	str	r3, [r7, #28]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a02:	23a8      	movs	r3, #168	@ 0xa8
 8005a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2ba8      	cmp	r3, #168	@ 0xa8
 8005a0a:	d00b      	beq.n	8005a24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	61bb      	str	r3, [r7, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01e      	beq.n	8005a6a <xTaskCreateStatic+0xb2>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01b      	beq.n	8005a6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a44:	2300      	movs	r3, #0
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	9302      	str	r3, [sp, #8]
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f851 	bl	8005b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a64:	f000 f8f6 	bl	8005c54 <prvAddNewTaskToReadyList>
 8005a68:	e001      	b.n	8005a6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
	}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3728      	adds	r7, #40	@ 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	@ 0x30
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fd11 	bl	80044b4 <pvPortMalloc>
 8005a92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a9a:	20a8      	movs	r0, #168	@ 0xa8
 8005a9c:	f7fe fd0a 	bl	80044b4 <pvPortMalloc>
 8005aa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aae:	e005      	b.n	8005abc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	f7fe fdcd 	bl	8004650 <vPortFree>
 8005ab6:	e001      	b.n	8005abc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	2300      	movs	r3, #0
 8005ace:	9303      	str	r3, [sp, #12]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f80f 	bl	8005b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae6:	69f8      	ldr	r0, [r7, #28]
 8005ae8:	f000 f8b4 	bl	8005c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e002      	b.n	8005af8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005af8:	69bb      	ldr	r3, [r7, #24]
	}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	21a5      	movs	r1, #165	@ 0xa5
 8005b1e:	f001 fefb 	bl	8007918 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f023 0307 	bic.w	r3, r3, #7
 8005b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	617b      	str	r3, [r7, #20]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01f      	beq.n	8005ba4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e012      	b.n	8005b90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	7819      	ldrb	r1, [r3, #0]
 8005b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	3334      	adds	r3, #52	@ 0x34
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d9e9      	bls.n	8005b6a <prvInitialiseNewTask+0x66>
 8005b96:	e000      	b.n	8005b9a <prvInitialiseNewTask+0x96>
			{
				break;
 8005b98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ba2:	e003      	b.n	8005bac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	2b37      	cmp	r3, #55	@ 0x37
 8005bb0:	d901      	bls.n	8005bb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bb2:	2337      	movs	r3, #55	@ 0x37
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fe7c 	bl	80048ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fe77 	bl	80048ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c04:	3354      	adds	r3, #84	@ 0x54
 8005c06:	224c      	movs	r2, #76	@ 0x4c
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fe84 	bl	8007918 <memset>
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	4a0d      	ldr	r2, [pc, #52]	@ (8005c48 <prvInitialiseNewTask+0x144>)
 8005c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	4a0c      	ldr	r2, [pc, #48]	@ (8005c4c <prvInitialiseNewTask+0x148>)
 8005c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c50 <prvInitialiseNewTask+0x14c>)
 8005c20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	68f9      	ldr	r1, [r7, #12]
 8005c26:	69b8      	ldr	r0, [r7, #24]
 8005c28:	f7fe fee0 	bl	80049ec <pxPortInitialiseStack>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c3e:	bf00      	nop
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200041e4 	.word	0x200041e4
 8005c4c:	2000424c 	.word	0x2000424c
 8005c50:	200042b4 	.word	0x200042b4

08005c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c5c:	f7fe ffb6 	bl	8004bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c60:	4b2d      	ldr	r3, [pc, #180]	@ (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	4a2c      	ldr	r2, [pc, #176]	@ (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c72:	4a2a      	ldr	r2, [pc, #168]	@ (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c78:	4b27      	ldr	r3, [pc, #156]	@ (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d110      	bne.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c80:	f000 fcdc 	bl	800663c <prvInitialiseTaskLists>
 8005c84:	e00d      	b.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c86:	4b26      	ldr	r3, [pc, #152]	@ (8005d20 <prvAddNewTaskToReadyList+0xcc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d802      	bhi.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ca2:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cac:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d28 <prvAddNewTaskToReadyList+0xd4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d903      	bls.n	8005cc8 <prvAddNewTaskToReadyList+0x74>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <prvAddNewTaskToReadyList+0xd4>)
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <prvAddNewTaskToReadyList+0xd8>)
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7fe fdff 	bl	80048e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ce4:	f7fe ffa2 	bl	8004c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <prvAddNewTaskToReadyList+0xcc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d207      	bcs.n	8005d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <prvAddNewTaskToReadyList+0xdc>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20004024 	.word	0x20004024
 8005d1c:	20003b50 	.word	0x20003b50
 8005d20:	20004030 	.word	0x20004030
 8005d24:	20004040 	.word	0x20004040
 8005d28:	2000402c 	.word	0x2000402c
 8005d2c:	20003b54 	.word	0x20003b54
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d46:	4b14      	ldr	r3, [pc, #80]	@ (8005d98 <vTaskDelay+0x64>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <vTaskDelay+0x32>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d66:	f000 f88b 	bl	8005e80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fdcf 	bl	8006910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d72:	f000 f893 	bl	8005e9c <xTaskResumeAll>
 8005d76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d7e:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <vTaskDelay+0x68>)
 8005d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	2000404c 	.word	0x2000404c
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dae:	463a      	mov	r2, r7
 8005db0:	1d39      	adds	r1, r7, #4
 8005db2:	f107 0308 	add.w	r3, r7, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f956 	bl	8004068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	9202      	str	r2, [sp, #8]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	460a      	mov	r2, r1
 8005dce:	4924      	ldr	r1, [pc, #144]	@ (8005e60 <vTaskStartScheduler+0xc0>)
 8005dd0:	4824      	ldr	r0, [pc, #144]	@ (8005e64 <vTaskStartScheduler+0xc4>)
 8005dd2:	f7ff fdf1 	bl	80059b8 <xTaskCreateStatic>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4a23      	ldr	r2, [pc, #140]	@ (8005e68 <vTaskStartScheduler+0xc8>)
 8005dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ddc:	4b22      	ldr	r3, [pc, #136]	@ (8005e68 <vTaskStartScheduler+0xc8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e001      	b.n	8005dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005df4:	f000 fde0 	bl	80069b8 <xTimerCreateTimerTask>
 8005df8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d11b      	bne.n	8005e38 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
}
 8005e12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e14:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <vTaskStartScheduler+0xcc>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3354      	adds	r3, #84	@ 0x54
 8005e1a:	4a15      	ldr	r2, [pc, #84]	@ (8005e70 <vTaskStartScheduler+0xd0>)
 8005e1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e1e:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <vTaskStartScheduler+0xd4>)
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e26:	4b14      	ldr	r3, [pc, #80]	@ (8005e78 <vTaskStartScheduler+0xd8>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <vTaskStartScheduler+0xdc>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e32:	f7fe fe59 	bl	8004ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e36:	e00f      	b.n	8005e58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d10b      	bne.n	8005e58 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <vTaskStartScheduler+0xb4>
}
 8005e58:	bf00      	nop
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	08008324 	.word	0x08008324
 8005e64:	0800660d 	.word	0x0800660d
 8005e68:	20004048 	.word	0x20004048
 8005e6c:	20003b50 	.word	0x20003b50
 8005e70:	20000010 	.word	0x20000010
 8005e74:	20004044 	.word	0x20004044
 8005e78:	20004030 	.word	0x20004030
 8005e7c:	20004028 	.word	0x20004028

08005e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <vTaskSuspendAll+0x18>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	4a03      	ldr	r2, [pc, #12]	@ (8005e98 <vTaskSuspendAll+0x18>)
 8005e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e8e:	bf00      	nop
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	2000404c 	.word	0x2000404c

08005e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eaa:	4b42      	ldr	r3, [pc, #264]	@ (8005fb4 <xTaskResumeAll+0x118>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <xTaskResumeAll+0x2e>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	603b      	str	r3, [r7, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eca:	f7fe fe7f 	bl	8004bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ece:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <xTaskResumeAll+0x118>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4a37      	ldr	r2, [pc, #220]	@ (8005fb4 <xTaskResumeAll+0x118>)
 8005ed6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed8:	4b36      	ldr	r3, [pc, #216]	@ (8005fb4 <xTaskResumeAll+0x118>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d162      	bne.n	8005fa6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ee0:	4b35      	ldr	r3, [pc, #212]	@ (8005fb8 <xTaskResumeAll+0x11c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d05e      	beq.n	8005fa6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ee8:	e02f      	b.n	8005f4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	4b34      	ldr	r3, [pc, #208]	@ (8005fbc <xTaskResumeAll+0x120>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fd4e 	bl	8004998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe fd49 	bl	8004998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <xTaskResumeAll+0x124>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d903      	bls.n	8005f1a <xTaskResumeAll+0x7e>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc0 <xTaskResumeAll+0x124>)
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4a27      	ldr	r2, [pc, #156]	@ (8005fc4 <xTaskResumeAll+0x128>)
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fe fcd6 	bl	80048e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3a:	4b23      	ldr	r3, [pc, #140]	@ (8005fc8 <xTaskResumeAll+0x12c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d302      	bcc.n	8005f4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f44:	4b21      	ldr	r3, [pc, #132]	@ (8005fcc <xTaskResumeAll+0x130>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <xTaskResumeAll+0x120>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1cb      	bne.n	8005eea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f58:	f000 fc14 	bl	8006784 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd0 <xTaskResumeAll+0x134>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d010      	beq.n	8005f8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f68:	f000 f844 	bl	8005ff4 <xTaskIncrementTick>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f72:	4b16      	ldr	r3, [pc, #88]	@ (8005fcc <xTaskResumeAll+0x130>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f1      	bne.n	8005f68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f84:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <xTaskResumeAll+0x134>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f8a:	4b10      	ldr	r3, [pc, #64]	@ (8005fcc <xTaskResumeAll+0x130>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f96:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd4 <xTaskResumeAll+0x138>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f7fe fe41 	bl	8004c2c <vPortExitCritical>

	return xAlreadyYielded;
 8005faa:	68bb      	ldr	r3, [r7, #8]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	2000404c 	.word	0x2000404c
 8005fb8:	20004024 	.word	0x20004024
 8005fbc:	20003fe4 	.word	0x20003fe4
 8005fc0:	2000402c 	.word	0x2000402c
 8005fc4:	20003b54 	.word	0x20003b54
 8005fc8:	20003b50 	.word	0x20003b50
 8005fcc:	20004038 	.word	0x20004038
 8005fd0:	20004034 	.word	0x20004034
 8005fd4:	e000ed04 	.word	0xe000ed04

08005fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fde:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <xTaskGetTickCount+0x18>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fe4:	687b      	ldr	r3, [r7, #4]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr
 8005ff0:	20004028 	.word	0x20004028

08005ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800613c <xTaskIncrementTick+0x148>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 8090 	bne.w	8006128 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006008:	4b4d      	ldr	r3, [pc, #308]	@ (8006140 <xTaskIncrementTick+0x14c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006010:	4a4b      	ldr	r2, [pc, #300]	@ (8006140 <xTaskIncrementTick+0x14c>)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d121      	bne.n	8006060 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800601c:	4b49      	ldr	r3, [pc, #292]	@ (8006144 <xTaskIncrementTick+0x150>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	603b      	str	r3, [r7, #0]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xTaskIncrementTick+0x46>
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <xTaskIncrementTick+0x150>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	4b40      	ldr	r3, [pc, #256]	@ (8006148 <xTaskIncrementTick+0x154>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a3e      	ldr	r2, [pc, #248]	@ (8006144 <xTaskIncrementTick+0x150>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4a3e      	ldr	r2, [pc, #248]	@ (8006148 <xTaskIncrementTick+0x154>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	4b3e      	ldr	r3, [pc, #248]	@ (800614c <xTaskIncrementTick+0x158>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	4a3c      	ldr	r2, [pc, #240]	@ (800614c <xTaskIncrementTick+0x158>)
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	f000 fb92 	bl	8006784 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006060:	4b3b      	ldr	r3, [pc, #236]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	d349      	bcc.n	80060fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606a:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <xTaskIncrementTick+0x150>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	4b36      	ldr	r3, [pc, #216]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006076:	f04f 32ff 	mov.w	r2, #4294967295
 800607a:	601a      	str	r2, [r3, #0]
					break;
 800607c:	e03f      	b.n	80060fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607e:	4b31      	ldr	r3, [pc, #196]	@ (8006144 <xTaskIncrementTick+0x150>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d203      	bcs.n	800609e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006096:	4a2e      	ldr	r2, [pc, #184]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800609c:	e02f      	b.n	80060fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fc78 	bl	8004998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3318      	adds	r3, #24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fc6f 	bl	8004998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <xTaskIncrementTick+0x160>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d903      	bls.n	80060ce <xTaskIncrementTick+0xda>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	4a22      	ldr	r2, [pc, #136]	@ (8006154 <xTaskIncrementTick+0x160>)
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <xTaskIncrementTick+0x164>)
 80060dc:	441a      	add	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f7fe fbfc 	bl	80048e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ee:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <xTaskIncrementTick+0x168>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d3b8      	bcc.n	800606a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fc:	e7b5      	b.n	800606a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060fe:	4b17      	ldr	r3, [pc, #92]	@ (800615c <xTaskIncrementTick+0x168>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006104:	4914      	ldr	r1, [pc, #80]	@ (8006158 <xTaskIncrementTick+0x164>)
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d901      	bls.n	800611a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800611a:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <xTaskIncrementTick+0x16c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e004      	b.n	8006132 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <xTaskIncrementTick+0x170>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a0d      	ldr	r2, [pc, #52]	@ (8006164 <xTaskIncrementTick+0x170>)
 8006130:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006132:	697b      	ldr	r3, [r7, #20]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2000404c 	.word	0x2000404c
 8006140:	20004028 	.word	0x20004028
 8006144:	20003fdc 	.word	0x20003fdc
 8006148:	20003fe0 	.word	0x20003fe0
 800614c:	2000403c 	.word	0x2000403c
 8006150:	20004044 	.word	0x20004044
 8006154:	2000402c 	.word	0x2000402c
 8006158:	20003b54 	.word	0x20003b54
 800615c:	20003b50 	.word	0x20003b50
 8006160:	20004038 	.word	0x20004038
 8006164:	20004034 	.word	0x20004034

08006168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800616e:	4b32      	ldr	r3, [pc, #200]	@ (8006238 <vTaskSwitchContext+0xd0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006176:	4b31      	ldr	r3, [pc, #196]	@ (800623c <vTaskSwitchContext+0xd4>)
 8006178:	2201      	movs	r2, #1
 800617a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800617c:	e058      	b.n	8006230 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800617e:	4b2f      	ldr	r3, [pc, #188]	@ (800623c <vTaskSwitchContext+0xd4>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006184:	4b2e      	ldr	r3, [pc, #184]	@ (8006240 <vTaskSwitchContext+0xd8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b2d      	ldr	r3, [pc, #180]	@ (8006240 <vTaskSwitchContext+0xd8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	429a      	cmp	r2, r3
 8006192:	d808      	bhi.n	80061a6 <vTaskSwitchContext+0x3e>
 8006194:	4b2a      	ldr	r3, [pc, #168]	@ (8006240 <vTaskSwitchContext+0xd8>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b29      	ldr	r3, [pc, #164]	@ (8006240 <vTaskSwitchContext+0xd8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3334      	adds	r3, #52	@ 0x34
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7fa f953 	bl	800044c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a6:	4b27      	ldr	r3, [pc, #156]	@ (8006244 <vTaskSwitchContext+0xdc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e011      	b.n	80061d2 <vTaskSwitchContext+0x6a>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <vTaskSwitchContext+0x64>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	607b      	str	r3, [r7, #4]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <vTaskSwitchContext+0x60>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	491d      	ldr	r1, [pc, #116]	@ (8006248 <vTaskSwitchContext+0xe0>)
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0e3      	beq.n	80061ae <vTaskSwitchContext+0x46>
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <vTaskSwitchContext+0xe0>)
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3308      	adds	r3, #8
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <vTaskSwitchContext+0xae>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <vTaskSwitchContext+0xd8>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4a08      	ldr	r2, [pc, #32]	@ (8006244 <vTaskSwitchContext+0xdc>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <vTaskSwitchContext+0xd8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3354      	adds	r3, #84	@ 0x54
 800622c:	4a07      	ldr	r2, [pc, #28]	@ (800624c <vTaskSwitchContext+0xe4>)
 800622e:	6013      	str	r3, [r2, #0]
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2000404c 	.word	0x2000404c
 800623c:	20004038 	.word	0x20004038
 8006240:	20003b50 	.word	0x20003b50
 8006244:	2000402c 	.word	0x2000402c
 8006248:	20003b54 	.word	0x20003b54
 800624c:	20000010 	.word	0x20000010

08006250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006278:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <vTaskPlaceOnEventList+0x48>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3318      	adds	r3, #24
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fe fb51 	bl	8004928 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006286:	2101      	movs	r1, #1
 8006288:	6838      	ldr	r0, [r7, #0]
 800628a:	f000 fb41 	bl	8006910 <prvAddCurrentTaskToDelayedList>
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20003b50 	.word	0x20003b50

0800629c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80062c6:	4b12      	ldr	r3, [pc, #72]	@ (8006310 <vTaskPlaceOnUnorderedEventList+0x74>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	613b      	str	r3, [r7, #16]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <vTaskPlaceOnUnorderedEventList+0x78>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80062f0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <vTaskPlaceOnUnorderedEventList+0x78>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3318      	adds	r3, #24
 80062f8:	4619      	mov	r1, r3
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7fe faf1 	bl	80048e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006300:	2101      	movs	r1, #1
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fb04 	bl	8006910 <prvAddCurrentTaskToDelayedList>
}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	2000404c 	.word	0x2000404c
 8006314:	20003b50 	.word	0x20003b50

08006318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	617b      	str	r3, [r7, #20]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <vTaskPlaceOnEventListRestricted+0x54>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3318      	adds	r3, #24
 8006348:	4619      	mov	r1, r3
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7fe fac9 	bl	80048e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	68b8      	ldr	r0, [r7, #8]
 8006360:	f000 fad6 	bl	8006910 <prvAddCurrentTaskToDelayedList>
	}
 8006364:	bf00      	nop
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20003b50 	.word	0x20003b50

08006370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60fb      	str	r3, [r7, #12]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3318      	adds	r3, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe faf8 	bl	8004998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006420 <xTaskRemoveFromEventList+0xb0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d11d      	bne.n	80063ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe faef 	bl	8004998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063be:	4b19      	ldr	r3, [pc, #100]	@ (8006424 <xTaskRemoveFromEventList+0xb4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d903      	bls.n	80063ce <xTaskRemoveFromEventList+0x5e>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	4a16      	ldr	r2, [pc, #88]	@ (8006424 <xTaskRemoveFromEventList+0xb4>)
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4a13      	ldr	r2, [pc, #76]	@ (8006428 <xTaskRemoveFromEventList+0xb8>)
 80063dc:	441a      	add	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fe fa7c 	bl	80048e2 <vListInsertEnd>
 80063ea:	e005      	b.n	80063f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3318      	adds	r3, #24
 80063f0:	4619      	mov	r1, r3
 80063f2:	480e      	ldr	r0, [pc, #56]	@ (800642c <xTaskRemoveFromEventList+0xbc>)
 80063f4:	f7fe fa75 	bl	80048e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <xTaskRemoveFromEventList+0xc0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d905      	bls.n	8006412 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800640a:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <xTaskRemoveFromEventList+0xc4>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e001      	b.n	8006416 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006416:	697b      	ldr	r3, [r7, #20]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	2000404c 	.word	0x2000404c
 8006424:	2000402c 	.word	0x2000402c
 8006428:	20003b54 	.word	0x20003b54
 800642c:	20003fe4 	.word	0x20003fe4
 8006430:	20003b50 	.word	0x20003b50
 8006434:	20004038 	.word	0x20004038

08006438 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006442:	4b2a      	ldr	r3, [pc, #168]	@ (80064ec <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	613b      	str	r3, [r7, #16]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	bf00      	nop
 800648e:	e7fd      	b.n	800648c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fe fa81 	bl	8004998 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fa7c 	bl	8004998 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a4:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d903      	bls.n	80064b4 <vTaskRemoveFromUnorderedEventList+0x7c>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4a0c      	ldr	r2, [pc, #48]	@ (80064f4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80064c2:	441a      	add	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f7fe fa09 	bl	80048e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d4:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	429a      	cmp	r2, r3
 80064dc:	d902      	bls.n	80064e4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <vTaskRemoveFromUnorderedEventList+0xc4>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
	}
}
 80064e4:	bf00      	nop
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000404c 	.word	0x2000404c
 80064f0:	2000402c 	.word	0x2000402c
 80064f4:	20003b54 	.word	0x20003b54
 80064f8:	20003b50 	.word	0x20003b50
 80064fc:	20004038 	.word	0x20004038

08006500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006508:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <vTaskInternalSetTimeOutState+0x24>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <vTaskInternalSetTimeOutState+0x28>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	605a      	str	r2, [r3, #4]
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	2000403c 	.word	0x2000403c
 8006528:	20004028 	.word	0x20004028

0800652c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	613b      	str	r3, [r7, #16]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10b      	bne.n	8006572 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60fb      	str	r3, [r7, #12]
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006572:	f7fe fb2b 	bl	8004bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006576:	4b1d      	ldr	r3, [pc, #116]	@ (80065ec <xTaskCheckForTimeOut+0xc0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d102      	bne.n	8006596 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e023      	b.n	80065de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <xTaskCheckForTimeOut+0xc4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d007      	beq.n	80065b2 <xTaskCheckForTimeOut+0x86>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d302      	bcc.n	80065b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	e015      	b.n	80065de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d20b      	bcs.n	80065d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff99 	bl	8006500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	e004      	b.n	80065de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f7fe fb25 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 80065e2:	69fb      	ldr	r3, [r7, #28]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20004028 	.word	0x20004028
 80065f0:	2000403c 	.word	0x2000403c

080065f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f8:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <vTaskMissedYield+0x14>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20004038 	.word	0x20004038

0800660c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006614:	f000 f852 	bl	80066bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <prvIdleTask+0x28>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d9f9      	bls.n	8006614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <prvIdleTask+0x2c>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006630:	e7f0      	b.n	8006614 <prvIdleTask+0x8>
 8006632:	bf00      	nop
 8006634:	20003b54 	.word	0x20003b54
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006642:	2300      	movs	r3, #0
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	e00c      	b.n	8006662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a12      	ldr	r2, [pc, #72]	@ (800669c <prvInitialiseTaskLists+0x60>)
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f918 	bl	800488c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3301      	adds	r3, #1
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b37      	cmp	r3, #55	@ 0x37
 8006666:	d9ef      	bls.n	8006648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006668:	480d      	ldr	r0, [pc, #52]	@ (80066a0 <prvInitialiseTaskLists+0x64>)
 800666a:	f7fe f90f 	bl	800488c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800666e:	480d      	ldr	r0, [pc, #52]	@ (80066a4 <prvInitialiseTaskLists+0x68>)
 8006670:	f7fe f90c 	bl	800488c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006674:	480c      	ldr	r0, [pc, #48]	@ (80066a8 <prvInitialiseTaskLists+0x6c>)
 8006676:	f7fe f909 	bl	800488c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800667a:	480c      	ldr	r0, [pc, #48]	@ (80066ac <prvInitialiseTaskLists+0x70>)
 800667c:	f7fe f906 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006680:	480b      	ldr	r0, [pc, #44]	@ (80066b0 <prvInitialiseTaskLists+0x74>)
 8006682:	f7fe f903 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006686:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <prvInitialiseTaskLists+0x78>)
 8006688:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <prvInitialiseTaskLists+0x64>)
 800668a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800668c:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <prvInitialiseTaskLists+0x7c>)
 800668e:	4a05      	ldr	r2, [pc, #20]	@ (80066a4 <prvInitialiseTaskLists+0x68>)
 8006690:	601a      	str	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20003b54 	.word	0x20003b54
 80066a0:	20003fb4 	.word	0x20003fb4
 80066a4:	20003fc8 	.word	0x20003fc8
 80066a8:	20003fe4 	.word	0x20003fe4
 80066ac:	20003ff8 	.word	0x20003ff8
 80066b0:	20004010 	.word	0x20004010
 80066b4:	20003fdc 	.word	0x20003fdc
 80066b8:	20003fe0 	.word	0x20003fe0

080066bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c2:	e019      	b.n	80066f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066c4:	f7fe fa82 	bl	8004bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c8:	4b10      	ldr	r3, [pc, #64]	@ (800670c <prvCheckTasksWaitingTermination+0x50>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f95f 	bl	8004998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3b01      	subs	r3, #1
 80066e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ee:	f7fe fa9d 	bl	8004c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f810 	bl	8006718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f8:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e1      	bne.n	80066c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20003ff8 	.word	0x20003ff8
 8006710:	20004024 	.word	0x20004024
 8006714:	2000400c 	.word	0x2000400c

08006718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3354      	adds	r3, #84	@ 0x54
 8006724:	4618      	mov	r0, r3
 8006726:	f001 f8ff 	bl	8007928 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd ff89 	bl	8004650 <vPortFree>
				vPortFree( pxTCB );
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fd ff86 	bl	8004650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006744:	e019      	b.n	800677a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800674c:	2b01      	cmp	r3, #1
 800674e:	d103      	bne.n	8006758 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fd ff7d 	bl	8004650 <vPortFree>
	}
 8006756:	e010      	b.n	800677a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800675e:	2b02      	cmp	r3, #2
 8006760:	d00b      	beq.n	800677a <prvDeleteTCB+0x62>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60fb      	str	r3, [r7, #12]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <prvDeleteTCB+0x5e>
	}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800678a:	4b0c      	ldr	r3, [pc, #48]	@ (80067bc <prvResetNextTaskUnblockTime+0x38>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006794:	4b0a      	ldr	r3, [pc, #40]	@ (80067c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800679c:	e008      	b.n	80067b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679e:	4b07      	ldr	r3, [pc, #28]	@ (80067bc <prvResetNextTaskUnblockTime+0x38>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <prvResetNextTaskUnblockTime+0x3c>)
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20003fdc 	.word	0x20003fdc
 80067c0:	20004044 	.word	0x20004044

080067c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067ca:	4b0b      	ldr	r3, [pc, #44]	@ (80067f8 <xTaskGetSchedulerState+0x34>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067d2:	2301      	movs	r3, #1
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	e008      	b.n	80067ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d8:	4b08      	ldr	r3, [pc, #32]	@ (80067fc <xTaskGetSchedulerState+0x38>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067e0:	2302      	movs	r3, #2
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	e001      	b.n	80067ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067ea:	687b      	ldr	r3, [r7, #4]
	}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20004030 	.word	0x20004030
 80067fc:	2000404c 	.word	0x2000404c

08006800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d058      	beq.n	80068c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006816:	4b2f      	ldr	r3, [pc, #188]	@ (80068d4 <xTaskPriorityDisinherit+0xd4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	429a      	cmp	r2, r3
 800681e:	d00b      	beq.n	8006838 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60bb      	str	r3, [r7, #8]
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	e7fd      	b.n	8006854 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686a:	429a      	cmp	r2, r3
 800686c:	d02c      	beq.n	80068c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006872:	2b00      	cmp	r3, #0
 8006874:	d128      	bne.n	80068c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe f88c 	bl	8004998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <xTaskPriorityDisinherit+0xd8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d903      	bls.n	80068a8 <xTaskPriorityDisinherit+0xa8>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a4:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <xTaskPriorityDisinherit+0xd8>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <xTaskPriorityDisinherit+0xdc>)
 80068b6:	441a      	add	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fe f80f 	bl	80048e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068c8:	697b      	ldr	r3, [r7, #20]
	}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20003b50 	.word	0x20003b50
 80068d8:	2000402c 	.word	0x2000402c
 80068dc:	20003b54 	.word	0x20003b54

080068e0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <uxTaskResetEventItemValue+0x2c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ee:	4b07      	ldr	r3, [pc, #28]	@ (800690c <uxTaskResetEventItemValue+0x2c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <uxTaskResetEventItemValue+0x2c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80068fc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80068fe:	687b      	ldr	r3, [r7, #4]
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20003b50 	.word	0x20003b50

08006910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800691a:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006920:	4b20      	ldr	r3, [pc, #128]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe f836 	bl	8004998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d10a      	bne.n	800694a <prvAddCurrentTaskToDelayedList+0x3a>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800693a:	4b1a      	ldr	r3, [pc, #104]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4819      	ldr	r0, [pc, #100]	@ (80069a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006944:	f7fd ffcd 	bl	80048e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006948:	e026      	b.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	429a      	cmp	r2, r3
 8006960:	d209      	bcs.n	8006976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006962:	4b12      	ldr	r3, [pc, #72]	@ (80069ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b0f      	ldr	r3, [pc, #60]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fd ffda 	bl	8004928 <vListInsert>
}
 8006974:	e010      	b.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b0a      	ldr	r3, [pc, #40]	@ (80069a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fd ffd0 	bl	8004928 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006988:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d202      	bcs.n	8006998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006992:	4a08      	ldr	r2, [pc, #32]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20004028 	.word	0x20004028
 80069a4:	20003b50 	.word	0x20003b50
 80069a8:	20004010 	.word	0x20004010
 80069ac:	20003fe0 	.word	0x20003fe0
 80069b0:	20003fdc 	.word	0x20003fdc
 80069b4:	20004044 	.word	0x20004044

080069b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	@ 0x28
 80069bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069c2:	f000 fb11 	bl	8006fe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069c6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a3c <xTimerCreateTimerTask+0x84>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d021      	beq.n	8006a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069d6:	1d3a      	adds	r2, r7, #4
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	f107 030c 	add.w	r3, r7, #12
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd fb59 	bl	8004098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	9202      	str	r2, [sp, #8]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	2302      	movs	r3, #2
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	460a      	mov	r2, r1
 80069f8:	4911      	ldr	r1, [pc, #68]	@ (8006a40 <xTimerCreateTimerTask+0x88>)
 80069fa:	4812      	ldr	r0, [pc, #72]	@ (8006a44 <xTimerCreateTimerTask+0x8c>)
 80069fc:	f7fe ffdc 	bl	80059b8 <xTaskCreateStatic>
 8006a00:	4603      	mov	r3, r0
 8006a02:	4a11      	ldr	r2, [pc, #68]	@ (8006a48 <xTimerCreateTimerTask+0x90>)
 8006a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a06:	4b10      	ldr	r3, [pc, #64]	@ (8006a48 <xTimerCreateTimerTask+0x90>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	613b      	str	r3, [r7, #16]
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	e7fd      	b.n	8006a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a30:	697b      	ldr	r3, [r7, #20]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20004080 	.word	0x20004080
 8006a40:	0800832c 	.word	0x0800832c
 8006a44:	08006b85 	.word	0x08006b85
 8006a48:	20004084 	.word	0x20004084

08006a4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <xTimerGenericCommand+0x30>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	623b      	str	r3, [r7, #32]
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <xTimerGenericCommand+0x98>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02a      	beq.n	8006ada <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	dc18      	bgt.n	8006ac8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a96:	f7ff fe95 	bl	80067c4 <xTaskGetSchedulerState>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d109      	bne.n	8006ab4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006aa0:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <xTimerGenericCommand+0x98>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	f107 0110 	add.w	r1, r7, #16
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aac:	f7fe fad6 	bl	800505c <xQueueGenericSend>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ab2:	e012      	b.n	8006ada <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <xTimerGenericCommand+0x98>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	f107 0110 	add.w	r1, r7, #16
 8006abc:	2300      	movs	r3, #0
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f7fe facc 	bl	800505c <xQueueGenericSend>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ac6:	e008      	b.n	8006ada <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ac8:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <xTimerGenericCommand+0x98>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	f107 0110 	add.w	r1, r7, #16
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	f7fe fbc4 	bl	8005260 <xQueueGenericSendFromISR>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	@ 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20004080 	.word	0x20004080

08006ae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af2:	4b23      	ldr	r3, [pc, #140]	@ (8006b80 <prvProcessExpiredTimer+0x98>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd ff49 	bl	8004998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d023      	beq.n	8006b5c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	18d1      	adds	r1, r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	f000 f8d3 	bl	8006ccc <prvInsertTimerInActiveList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d020      	beq.n	8006b6e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	2100      	movs	r1, #0
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7ff ff88 	bl	8006a4c <xTimerGenericCommand>
 8006b3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d114      	bne.n	8006b6e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	6978      	ldr	r0, [r7, #20]
 8006b74:	4798      	blx	r3
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20004078 	.word	0x20004078

08006b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f859 	bl	8006c48 <prvGetNextExpireTime>
 8006b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f805 	bl	8006bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ba2:	f000 f8d5 	bl	8006d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba6:	bf00      	nop
 8006ba8:	e7f0      	b.n	8006b8c <prvTimerTask+0x8>
	...

08006bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bb6:	f7ff f963 	bl	8005e80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f864 	bl	8006c8c <prvSampleTimeNow>
 8006bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d130      	bne.n	8006c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <prvProcessTimerOrBlockTask+0x3c>
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d806      	bhi.n	8006be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bda:	f7ff f95f 	bl	8005e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff81 	bl	8006ae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006be6:	e024      	b.n	8006c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bee:	4b13      	ldr	r3, [pc, #76]	@ (8006c3c <prvProcessTimerOrBlockTask+0x90>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <prvProcessTimerOrBlockTask+0x50>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <prvProcessTimerOrBlockTask+0x52>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c00:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <prvProcessTimerOrBlockTask+0x94>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f7fe fe9f 	bl	8005950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c12:	f7ff f943 	bl	8005e9c <xTaskResumeAll>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <prvProcessTimerOrBlockTask+0x98>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	f3bf 8f6f 	isb	sy
}
 8006c2c:	e001      	b.n	8006c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c2e:	f7ff f935 	bl	8005e9c <xTaskResumeAll>
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000407c 	.word	0x2000407c
 8006c40:	20004080 	.word	0x20004080
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c50:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <prvGetNextExpireTime+0x40>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <prvGetNextExpireTime+0x16>
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	e000      	b.n	8006c60 <prvGetNextExpireTime+0x18>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <prvGetNextExpireTime+0x40>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	e001      	b.n	8006c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr
 8006c88:	20004078 	.word	0x20004078

08006c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c94:	f7ff f9a0 	bl	8005fd8 <xTaskGetTickCount>
 8006c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc8 <prvSampleTimeNow+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d205      	bcs.n	8006cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ca4:	f000 f93a 	bl	8006f1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	@ (8006cc8 <prvSampleTimeNow+0x3c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20004088 	.word	0x20004088

08006ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d812      	bhi.n	8006d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e01b      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d06:	4b10      	ldr	r3, [pc, #64]	@ (8006d48 <prvInsertTimerInActiveList+0x7c>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7fd fe09 	bl	8004928 <vListInsert>
 8006d16:	e012      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d206      	bcs.n	8006d2e <prvInsertTimerInActiveList+0x62>
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e007      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d2e:	4b07      	ldr	r3, [pc, #28]	@ (8006d4c <prvInsertTimerInActiveList+0x80>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7fd fdf5 	bl	8004928 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d3e:	697b      	ldr	r3, [r7, #20]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	2000407c 	.word	0x2000407c
 8006d4c:	20004078 	.word	0x20004078

08006d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08e      	sub	sp, #56	@ 0x38
 8006d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d56:	e0ce      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da19      	bge.n	8006d92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	3304      	adds	r3, #4
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fb      	str	r3, [r7, #28]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d88:	6850      	ldr	r0, [r2, #4]
 8006d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8c:	6892      	ldr	r2, [r2, #8]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f2c0 80ae 	blt.w	8006ef6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da8:	3304      	adds	r3, #4
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fd fdf4 	bl	8004998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006db0:	463b      	mov	r3, r7
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff ff6a 	bl	8006c8c <prvSampleTimeNow>
 8006db8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	f200 8097 	bhi.w	8006ef0 <prvProcessReceivedCommands+0x1a0>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <prvProcessReceivedCommands+0x78>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006df1 	.word	0x08006df1
 8006dd0:	08006df1 	.word	0x08006df1
 8006dd4:	08006e67 	.word	0x08006e67
 8006dd8:	08006e7b 	.word	0x08006e7b
 8006ddc:	08006ec7 	.word	0x08006ec7
 8006de0:	08006df1 	.word	0x08006df1
 8006de4:	08006df1 	.word	0x08006df1
 8006de8:	08006e67 	.word	0x08006e67
 8006dec:	08006e7b 	.word	0x08006e7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	18d1      	adds	r1, r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e10:	f7ff ff5c 	bl	8006ccc <prvInsertTimerInActiveList>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d06c      	beq.n	8006ef4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d061      	beq.n	8006ef4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	441a      	add	r2, r3
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e42:	f7ff fe03 	bl	8006a4c <xTimerGenericCommand>
 8006e46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d152      	bne.n	8006ef4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61bb      	str	r3, [r7, #24]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e78:	e03d      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e80:	f043 0301 	orr.w	r3, r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	617b      	str	r3, [r7, #20]
}
 8006eac:	bf00      	nop
 8006eae:	bf00      	nop
 8006eb0:	e7fd      	b.n	8006eae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	18d1      	adds	r1, r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec0:	f7ff ff04 	bl	8006ccc <prvInsertTimerInActiveList>
					break;
 8006ec4:	e017      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d103      	bne.n	8006edc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed6:	f7fd fbbb 	bl	8004650 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006eda:	e00c      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006eee:	e002      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <prvProcessReceivedCommands+0x1a6>
					break;
 8006ef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ef6:	4b08      	ldr	r3, [pc, #32]	@ (8006f18 <prvProcessReceivedCommands+0x1c8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	1d39      	adds	r1, r7, #4
 8006efc:	2200      	movs	r2, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fa4c 	bl	800539c <xQueueReceive>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f47f af26 	bne.w	8006d58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	3730      	adds	r7, #48	@ 0x30
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20004080 	.word	0x20004080

08006f1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f22:	e049      	b.n	8006fb8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f24:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd fd2b 	bl	8004998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d02f      	beq.n	8006fb8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4413      	add	r3, r2
 8006f60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d90e      	bls.n	8006f88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f76:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7fd fcd1 	bl	8004928 <vListInsert>
 8006f86:	e017      	b.n	8006fb8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	2100      	movs	r1, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fd5a 	bl	8006a4c <xTimerGenericCommand>
 8006f98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	603b      	str	r3, [r7, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb8:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1b0      	bne.n	8006f24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fc8:	4b06      	ldr	r3, [pc, #24]	@ (8006fe4 <prvSwitchTimerLists+0xc8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a04      	ldr	r2, [pc, #16]	@ (8006fe0 <prvSwitchTimerLists+0xc4>)
 8006fce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fd0:	4a04      	ldr	r2, [pc, #16]	@ (8006fe4 <prvSwitchTimerLists+0xc8>)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6013      	str	r3, [r2, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20004078 	.word	0x20004078
 8006fe4:	2000407c 	.word	0x2000407c

08006fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fee:	f7fd fded 	bl	8004bcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ff2:	4b15      	ldr	r3, [pc, #84]	@ (8007048 <prvCheckForValidListAndQueue+0x60>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d120      	bne.n	800703c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ffa:	4814      	ldr	r0, [pc, #80]	@ (800704c <prvCheckForValidListAndQueue+0x64>)
 8006ffc:	f7fd fc46 	bl	800488c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007000:	4813      	ldr	r0, [pc, #76]	@ (8007050 <prvCheckForValidListAndQueue+0x68>)
 8007002:	f7fd fc43 	bl	800488c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007006:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <prvCheckForValidListAndQueue+0x6c>)
 8007008:	4a10      	ldr	r2, [pc, #64]	@ (800704c <prvCheckForValidListAndQueue+0x64>)
 800700a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800700c:	4b12      	ldr	r3, [pc, #72]	@ (8007058 <prvCheckForValidListAndQueue+0x70>)
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <prvCheckForValidListAndQueue+0x68>)
 8007010:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007012:	2300      	movs	r3, #0
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4b11      	ldr	r3, [pc, #68]	@ (800705c <prvCheckForValidListAndQueue+0x74>)
 8007018:	4a11      	ldr	r2, [pc, #68]	@ (8007060 <prvCheckForValidListAndQueue+0x78>)
 800701a:	2110      	movs	r1, #16
 800701c:	200a      	movs	r0, #10
 800701e:	f7fd ff41 	bl	8004ea4 <xQueueGenericCreateStatic>
 8007022:	4603      	mov	r3, r0
 8007024:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <prvCheckForValidListAndQueue+0x60>)
 8007026:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007028:	4b07      	ldr	r3, [pc, #28]	@ (8007048 <prvCheckForValidListAndQueue+0x60>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <prvCheckForValidListAndQueue+0x60>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	490b      	ldr	r1, [pc, #44]	@ (8007064 <prvCheckForValidListAndQueue+0x7c>)
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fc62 	bl	8005900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800703c:	f7fd fdf6 	bl	8004c2c <vPortExitCritical>
}
 8007040:	bf00      	nop
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20004080 	.word	0x20004080
 800704c:	20004050 	.word	0x20004050
 8007050:	20004064 	.word	0x20004064
 8007054:	20004078 	.word	0x20004078
 8007058:	2000407c 	.word	0x2000407c
 800705c:	2000412c 	.word	0x2000412c
 8007060:	2000408c 	.word	0x2000408c
 8007064:	08008334 	.word	0x08008334

08007068 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	@ 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007076:	f06f 0301 	mvn.w	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007088:	4b06      	ldr	r3, [pc, #24]	@ (80070a4 <xTimerPendFunctionCallFromISR+0x3c>)
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	f107 0114 	add.w	r1, r7, #20
 8007090:	2300      	movs	r3, #0
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	f7fe f8e4 	bl	8005260 <xQueueGenericSendFromISR>
 8007098:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800709c:	4618      	mov	r0, r3
 800709e:	3728      	adds	r7, #40	@ 0x28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20004080 	.word	0x20004080

080070a8 <_send_message_to_console>:
/**
 * \brief
 *
 */
static osStatus_t _send_message_to_console(uint8_t *p_str)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
	osMessageQueueId_t message_id = get_print_msg_queue_id();
 80070b4:	f000 fb1c 	bl	80076f0 <get_print_msg_queue_id>
 80070b8:	4603      	mov	r3, r0
 80070ba:	60bb      	str	r3, [r7, #8]

	status = osMessageQueuePut(message_id, p_str, 0U, 0U);
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	68b8      	ldr	r0, [r7, #8]
 80070c4:	f7fc fef2 	bl	8003eac <osMessageQueuePut>
 80070c8:	60f8      	str	r0, [r7, #12]

	return status;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <print_to_console>:
 * \brief Print some msg to the console.
 * \detaled Print some msg to the console with the next format string - [MSG]
 *
 */
osStatus_t print_to_console(const char *const p_msg)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b0a4      	sub	sp, #144	@ 0x90
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	uint8_t print_buffer[PRINT_BUFFER_SIZE];

	/// \todo Check p_thread_name + p_msg size. We have a 64-byte buffer.

	sprintf(print_buffer, "[%s]\n\r", p_msg);
 80070e2:	f107 030c 	add.w	r3, r7, #12
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4908      	ldr	r1, [pc, #32]	@ (800710c <print_to_console+0x38>)
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fbf4 	bl	80078d8 <siprintf>
	status = _send_message_to_console(print_buffer);
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ffd7 	bl	80070a8 <_send_message_to_console>
 80070fa:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

	return status;
 80070fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8007102:	4618      	mov	r0, r3
 8007104:	3790      	adds	r7, #144	@ 0x90
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	0800833c 	.word	0x0800833c

08007110 <delay_us>:
/**
 * \brief
 *
 */
void delay_us(uint32_t us)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
	uint32_t tick = osKernelSysTick();
 800711a:	f7fc fc7d 	bl	8003a18 <osKernelGetSysTimerCount>
 800711e:	6178      	str	r0, [r7, #20]

	while ((osKernelSysTick() - tick) < osKernelSysTickMicroSec(us));
 8007120:	bf00      	nop
 8007122:	f7fc fc79 	bl	8003a18 <osKernelGetSysTimerCount>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2200      	movs	r2, #0
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	469a      	mov	sl, r3
 8007138:	4693      	mov	fp, r2
 800713a:	f7fc fca7 	bl	8003a8c <osKernelGetSysTimerFreq>
 800713e:	4603      	mov	r3, r0
 8007140:	2200      	movs	r2, #0
 8007142:	4698      	mov	r8, r3
 8007144:	4691      	mov	r9, r2
 8007146:	fb08 f20b 	mul.w	r2, r8, fp
 800714a:	fb0a f309 	mul.w	r3, sl, r9
 800714e:	4413      	add	r3, r2
 8007150:	fbaa 4508 	umull	r4, r5, sl, r8
 8007154:	442b      	add	r3, r5
 8007156:	461d      	mov	r5, r3
 8007158:	4a0a      	ldr	r2, [pc, #40]	@ (8007184 <delay_us+0x74>)
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f8 fffd 	bl	8000160 <__aeabi_uldivmod>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800716e:	4684      	mov	ip, r0
 8007170:	4594      	cmp	ip, r2
 8007172:	eb71 0303 	sbcs.w	r3, r1, r3
 8007176:	d3d4      	bcc.n	8007122 <delay_us+0x12>
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007184:	000f4240 	.word	0x000f4240

08007188 <HAL_UART_RxCpltCallback>:
#ifdef HAL_UART_MODULE_ENABLED
/**
 *
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
	periph_interface_td *p_user_interface_h = get_hard_uart_interface_handle(1);
 8007194:	2001      	movs	r0, #1
 8007196:	f000 f8f7 	bl	8007388 <get_hard_uart_interface_handle>
 800719a:	60b8      	str	r0, [r7, #8]

	p_hal_uart_handle = (UART_HandleTypeDef *)p_user_interface_h->params.p_interface_handle;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	60fb      	str	r3, [r7, #12]

	if(huart == p_hal_uart_handle)
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d105      	bne.n	80071b6 <HAL_UART_RxCpltCallback+0x2e>
	{
		osEventFlagsSet(_periph_event_id, UART2_RS485_RX_DONE);
 80071aa:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <HAL_UART_RxCpltCallback+0x38>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2104      	movs	r1, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fc fd61 	bl	8003c78 <osEventFlagsSet>
	}
	else
	{
		///callback for printf uart
	}
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	2000417c 	.word	0x2000417c

080071c4 <HAL_UART_TxCpltCallback>:

/**
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
	periph_interface_td *p_user_interface_h = get_hard_uart_interface_handle(1);
 80071d0:	2001      	movs	r0, #1
 80071d2:	f000 f8d9 	bl	8007388 <get_hard_uart_interface_handle>
 80071d6:	60b8      	str	r0, [r7, #8]

	p_hal_uart_handle = (UART_HandleTypeDef *)p_user_interface_h->params.p_interface_handle;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	60fb      	str	r3, [r7, #12]

	if(huart == p_hal_uart_handle)
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d106      	bne.n	80071f4 <HAL_UART_TxCpltCallback+0x30>
	{
		osEventFlagsSet(_periph_event_id, UART2_RS485_TX_DONE);
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <HAL_UART_TxCpltCallback+0x44>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fc fd43 	bl	8003c78 <osEventFlagsSet>
	}
	else
	{
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
	}
}
 80071f2:	e005      	b.n	8007200 <HAL_UART_TxCpltCallback+0x3c>
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
 80071f4:	4b04      	ldr	r3, [pc, #16]	@ (8007208 <HAL_UART_TxCpltCallback+0x44>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fc fd3c 	bl	8003c78 <osEventFlagsSet>
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000417c 	.word	0x2000417c

0800720c <set_cb_periph_event_id>:

/**
 *
 */
void set_cb_periph_event_id(osEventFlagsId_t event_id)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	_periph_event_id = event_id;
 8007214:	4a03      	ldr	r2, [pc, #12]	@ (8007224 <set_cb_periph_event_id+0x18>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6013      	str	r3, [r2, #0]
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	2000417c 	.word	0x2000417c

08007228 <gpio_set>:
/**
 * \brief
 *
 */
void gpio_set(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label, gpio_value_td gpio_value)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
	if (/*(uint32_t)gpio_brd_label*/ pin_label <  MAX_GPIO_NUM)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b06      	cmp	r3, #6
 8007238:	d822      	bhi.n	8007280 <gpio_set+0x58>
	{
		switch(gpio_value)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d010      	beq.n	8007262 <gpio_set+0x3a>
 8007240:	2b01      	cmp	r3, #1
 8007242:	d11d      	bne.n	8007280 <gpio_set+0x58>
		{
			case GPIO_TRUE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_SET);
 8007244:	4a10      	ldr	r2, [pc, #64]	@ (8007288 <gpio_set+0x60>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724c:	4618      	mov	r0, r3
 800724e:	4a0f      	ldr	r2, [pc, #60]	@ (800728c <gpio_set+0x64>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007256:	b29b      	uxth	r3, r3
 8007258:	2201      	movs	r2, #1
 800725a:	4619      	mov	r1, r3
 800725c:	f7fa fa71 	bl	8001742 <HAL_GPIO_WritePin>
				break;
 8007260:	e00e      	b.n	8007280 <gpio_set+0x58>

			case GPIO_FALSE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_RESET);
 8007262:	4a09      	ldr	r2, [pc, #36]	@ (8007288 <gpio_set+0x60>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726a:	4618      	mov	r0, r3
 800726c:	4a07      	ldr	r2, [pc, #28]	@ (800728c <gpio_set+0x64>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007274:	b29b      	uxth	r3, r3
 8007276:	2200      	movs	r2, #0
 8007278:	4619      	mov	r1, r3
 800727a:	f7fa fa62 	bl	8001742 <HAL_GPIO_WritePin>
				break;
 800727e:	bf00      	nop
	}
	else
	{
		/// \\todo PRINTF
	}
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	0800845c 	.word	0x0800845c
 800728c:	08008478 	.word	0x08008478

08007290 <gpio_get>:
/**
 * \brief
 *
 */
gpio_value_td gpio_get(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	gpio_value_td gpio_pin_state = GPIO_FALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]

	if (/*(uint32_t)gpio_brd_label*/pin_label < MAX_GPIO_NUM)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b06      	cmp	r3, #6
 80072a0:	d814      	bhi.n	80072cc <gpio_get+0x3c>
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label]) == (uint8_t)GPIO_PIN_SET)
 80072a2:	4a0d      	ldr	r2, [pc, #52]	@ (80072d8 <gpio_get+0x48>)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072aa:	4618      	mov	r0, r3
 80072ac:	4a0b      	ldr	r2, [pc, #44]	@ (80072dc <gpio_get+0x4c>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4619      	mov	r1, r3
 80072b8:	f7fa fa2c 	bl	8001714 <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d102      	bne.n	80072c8 <gpio_get+0x38>
		{
			gpio_pin_state = GPIO_TRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
 80072c6:	e001      	b.n	80072cc <gpio_get+0x3c>
		}
		else
		{
			gpio_pin_state = GPIO_FALSE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
	else
	{
		/// \todo PRINTF
	}

	return gpio_pin_state;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	0800845c 	.word	0x0800845c
 80072dc:	08008478 	.word	0x08008478

080072e0 <link_periph_interface>:
							interface_ic_addr_type_td ic_addr_type,
							void * const p_low_lvl_interface_handle,
							p_interface_write_ftd write_func,
							p_interface_read_ftd read_func,
							p_delay_us_ftd delay_func)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
	p_periph_interface->console_send = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	621a      	str	r2, [r3, #32]
	p_periph_interface->delay_us = delay_func;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072f8:	61da      	str	r2, [r3, #28]
	p_periph_interface->params.interface_type = interface_type;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	7e3a      	ldrb	r2, [r7, #24]
 80072fe:	701a      	strb	r2, [r3, #0]
	p_periph_interface->params.ic_addr_type = ic_addr_type;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7f3a      	ldrb	r2, [r7, #28]
 8007304:	705a      	strb	r2, [r3, #1]
	p_periph_interface->params.p_interface_handle = p_low_lvl_interface_handle;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	605a      	str	r2, [r3, #4]
	p_periph_interface->read = read_func;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007310:	619a      	str	r2, [r3, #24]
	p_periph_interface->write = write_func;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007316:	615a      	str	r2, [r3, #20]

	p_periph_interface->interface_events_handle.p_interface_events_handle = p_interface_events_handle;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	609a      	str	r2, [r3, #8]
	p_periph_interface->interface_events_handle.tx_done_events_flags = tx_done_event_flag;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	60da      	str	r2, [r3, #12]
	p_periph_interface->interface_events_handle.rx_done_events_flags = rx_done_event_flag;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	611a      	str	r2, [r3, #16]
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <link_gpio_interface>:
/**
 * \brief
 *
 */
void link_gpio_interface(gpio_interface_td *p_gpio_interface, p_gpio_set_ftd set_func, p_gpio_get_ftd get_func)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
	p_gpio_interface->gpio_get = get_func;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	605a      	str	r2, [r3, #4]
	p_gpio_interface->gpio_set = set_func;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
	...

08007358 <get_gpio_interface_handle>:
/**
 * \brief
 *
 */
gpio_interface_td *get_gpio_interface_handle(const uint8_t handle_number)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	71fb      	strb	r3, [r7, #7]
	gpio_interface_td *p_handle = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]

	if(!(handle_number > (GPIO_INTERFACE_HANDLE_SIZE - 1)))
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <get_gpio_interface_handle+0x1e>
	{
		p_handle = &_gpio_interface_handle_array[handle_number];
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4a04      	ldr	r2, [pc, #16]	@ (8007384 <get_gpio_interface_handle+0x2c>)
 8007372:	4413      	add	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
	}

	return p_handle;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20004180 	.word	0x20004180

08007388 <get_hard_uart_interface_handle>:
/**
 * \brief
 *
 */
periph_interface_td *get_hard_uart_interface_handle(const uint8_t handle_number)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	71fb      	strb	r3, [r7, #7]
	periph_interface_td *p_handle = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]

	if(!(handle_number > (HW_UART_INTERFACE_HANDLE_SIZE - 1)))
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d807      	bhi.n	80073ac <get_hard_uart_interface_handle+0x24>
	{
		p_handle = &_hw_uart_interface_handle_array[handle_number];
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	4613      	mov	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4a04      	ldr	r2, [pc, #16]	@ (80073b8 <get_hard_uart_interface_handle+0x30>)
 80073a8:	4413      	add	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
	}

	return p_handle;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr
 80073b8:	20004188 	.word	0x20004188

080073bc <uart_write_it>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_write_it(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3308      	adds	r3, #8
 80073d0:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	72fb      	strb	r3, [r7, #11]

	user_uart_tx_it(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6819      	ldr	r1, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f000 f901 	bl	80075ee <user_uart_tx_it>

	/// if we have an event for this interface
	if((p_interface_events_handle != NULL) && (p_interface_events_handle->tx_done_events_flags != 0))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <uart_write_it+0x5e>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <uart_write_it+0x5e>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->tx_done_events_flags);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 f91e 	bl	8007646 <user_wait_event_flags>
 800740a:	4603      	mov	r3, r0
 800740c:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 800740e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <uart_write_it+0x5e>
		{
			periph_io_status = IO_ERROR;
 8007416:	23fe      	movs	r3, #254	@ 0xfe
 8007418:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800741a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <uart_read_it>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_read_it(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3308      	adds	r3, #8
 800743a:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	72fb      	strb	r3, [r7, #11]

	user_uart_rx_it(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6819      	ldr	r1, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	b29a      	uxth	r2, r3
 800744e:	2300      	movs	r3, #0
 8007450:	6938      	ldr	r0, [r7, #16]
 8007452:	f000 f8e2 	bl	800761a <user_uart_rx_it>

	/// if we have an event for this interface
	if(p_interface_events_handle != NULL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00f      	beq.n	800747c <uart_read_it+0x56>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->rx_done_events_flags);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f000 f8ed 	bl	8007646 <user_wait_event_flags>
 800746c:	4603      	mov	r3, r0
 800746e:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 8007470:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <uart_read_it+0x56>
		{
			periph_io_status = IO_ERROR;
 8007478:	23fe      	movs	r3, #254	@ 0xfe
 800747a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800747c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <_rs_485_dir_set>:
 * \brief
 * \p_params[in]
 *
 */
void static _rs_485_dir_set(rs485_params_td *p_params, rs485_dir_td dir)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
	uint32_t pin = p_params->dir_pin;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]

	switch(dir)
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <_rs_485_dir_set+0x1e>
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d007      	beq.n	80074b4 <_rs_485_dir_set+0x2c>

		case RS485_TX:
			p_params->hgpio->gpio_set(pin, GPIO_TRUE);
			break;
	}
}
 80074a4:	e00d      	b.n	80074c2 <_rs_485_dir_set+0x3a>
			p_params->hgpio->gpio_set(pin, GPIO_FALSE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2100      	movs	r1, #0
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
			break;
 80074b2:	e006      	b.n	80074c2 <_rs_485_dir_set+0x3a>
			p_params->hgpio->gpio_set(pin, GPIO_TRUE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2101      	movs	r1, #1
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	4798      	blx	r3
			break;
 80074c0:	bf00      	nop
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <rs485_read>:
 * \brief
 * \p_params[in]
 *
 */
uint32_t rs485_read(rs485_params_td *p_params, uint8_t * p_data)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
	rs485_status_td status = RS485_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	75fb      	strb	r3, [r7, #23]
	//uint8_t print_buffer[128];
	interface_data_info_td interface_data_read_write;

	//sprintf(print_buffer, "[%s]\n\r", p_msg);

	interface_data_read_write.p_data = p_data;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	60fb      	str	r3, [r7, #12]
	interface_data_read_write.data_size = 16; // 16 is only for tests
 80074dc:	2310      	movs	r3, #16
 80074de:	613b      	str	r3, [r7, #16]

	_rs_485_dir_set(p_params, RS485_RX);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ffd0 	bl	8007488 <_rs_485_dir_set>

	p_params->huart->read(p_params->huart, &interface_data_read_write);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	f107 010c 	add.w	r1, r7, #12
 80074f6:	4610      	mov	r0, r2
 80074f8:	4798      	blx	r3

	return status;
 80074fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <rs485_write_str>:
 * \brief
 * \p_params[in]
 *
 */
rs485_status_td rs485_write_str(rs485_params_td *p_params, const char *const p_msg)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0a6      	sub	sp, #152	@ 0x98
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
	rs485_status_td status = RS485_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t print_buffer[128];
	interface_data_info_td interface_data_read_write;
	
	sprintf(print_buffer, "[%s]\n\r", p_msg);
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	4910      	ldr	r1, [pc, #64]	@ (8007560 <rs485_write_str+0x58>)
 8007520:	4618      	mov	r0, r3
 8007522:	f000 f9d9 	bl	80078d8 <siprintf>

	interface_data_read_write.p_data = print_buffer;
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	60fb      	str	r3, [r7, #12]
	interface_data_read_write.data_size = strlen(print_buffer);
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	4618      	mov	r0, r3
 8007532:	f7f8 fe0d 	bl	8000150 <strlen>
 8007536:	4603      	mov	r3, r0
 8007538:	613b      	str	r3, [r7, #16]

	_rs_485_dir_set(p_params, RS485_TX);
 800753a:	2101      	movs	r1, #1
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ffa3 	bl	8007488 <_rs_485_dir_set>

	p_params->huart->write(p_params->huart, &interface_data_read_write);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	f107 010c 	add.w	r1, r7, #12
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3

	return status;
 8007554:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8007558:	4618      	mov	r0, r3
 800755a:	3798      	adds	r7, #152	@ 0x98
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	08008344 	.word	0x08008344

08007564 <rs485_init>:
 */
rs485_status_td rs485_init(rs485_params_td *p_params,
							periph_interface_td  * const p_interface,
							gpio_interface_td * const hgpio,
							uint32_t dir_pin_number)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
	rs485_status_td status = RS485_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]

	p_params->huart = p_interface;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	601a      	str	r2, [r3, #0]
	p_params->hgpio = hgpio;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]
	p_params->dir_pin = dir_pin_number;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	609a      	str	r2, [r3, #8]

	return status;
 8007588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <simple_led_set>:
 * \brief
 * \p_params[in] p_params ptr to simple_led parameter structure
 * \value[in] value for set
 */
uint16_t simple_led_set (simple_led_params_td *p_params, simple_led_states_td led_state)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
	simple_led_status_td status = SIMPLE_LED_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

	p_params->interface->gpio_set(p_params->pin, led_state);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6852      	ldr	r2, [r2, #4]
 80075b0:	78f9      	ldrb	r1, [r7, #3]
 80075b2:	4610      	mov	r0, r2
 80075b4:	4798      	blx	r3

	return status;
 80075b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ba:	b29b      	uxth	r3, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <simple_led_init>:
 * \brief simple led driver initialization
 * \p_params[in] p_params ptr to simple led parameter structure
 *
 */
simple_led_status_td simple_led_init(simple_led_params_td *p_params, gpio_interface_td *hgpio, uint32_t led_pin_number)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	simple_led_status_td status = SIMPLE_LED_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
	
	p_params->interface = hgpio;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	601a      	str	r2, [r3, #0]
	p_params->pin = led_pin_number;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]

	return status;
 80075e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <user_uart_tx_it>:
#endif

#ifdef HAL_UART_MODULE_ENABLED

user_hw_abstr_status_td user_uart_tx_it(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Transmit_IT((UART_HandleTypeDef *)p_interface_handle, p_data, data_size/*, timeout*/);
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	461a      	mov	r2, r3
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7fb fb36 	bl	8002c7a <HAL_UART_Transmit_IT>

	return user_status;
 800760e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <user_uart_rx_it>:

user_hw_abstr_status_td user_uart_rx_it(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4613      	mov	r3, r2
 8007628:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Receive_IT((UART_HandleTypeDef *)p_interface_handle, p_data, data_size/*, timeout*/);
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	461a      	mov	r2, r3
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7fb fb55 	bl	8002ce4 <HAL_UART_Receive_IT>

	return user_status;
 800763a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <user_wait_event_flags>:

#endif

user_hw_abstr_status_td user_wait_event_flags(void *const p_interface_events_handle, const uint32_t tx_done_event_flag)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
	user_hw_abstr_status_td user_status = USER_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
	uint32_t event_status = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
	osEventFlagsId_t evt_id = p_interface_events_handle;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

	event_status = osEventFlagsWait(evt_id, tx_done_event_flag, osFlagsWaitAny, osWaitForever); // wait for complete sending data
 800765c:	f04f 33ff 	mov.w	r3, #4294967295
 8007660:	2200      	movs	r2, #0
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7fc fb49 	bl	8003cfc <osEventFlagsWait>
 800766a:	6138      	str	r0, [r7, #16]
	if((event_status & tx_done_event_flag) == 0)
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	4013      	ands	r3, r2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <user_wait_event_flags+0x34>
	{
		user_status = USER_ERROR;
 8007676:	23ff      	movs	r3, #255	@ 0xff
 8007678:	75fb      	strb	r3, [r7, #23]
	}

	return user_status;
 800767a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <init_periph_events>:
/**
 * \brief
 *
 */
void init_periph_events(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
	_periph_event_id = osEventFlagsNew(NULL);
 800768c:	2000      	movs	r0, #0
 800768e:	f7fc fab4 	bl	8003bfa <osEventFlagsNew>
 8007692:	4603      	mov	r3, r0
 8007694:	4a06      	ldr	r2, [pc, #24]	@ (80076b0 <init_periph_events+0x28>)
 8007696:	6013      	str	r3, [r2, #0]
	if (_periph_event_id == NULL)
 8007698:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <init_periph_events+0x28>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <init_periph_events+0x22>
	{
		/// \\todo printf
	}
	else
	{
		set_cb_periph_event_id(_periph_event_id);
 80076a0:	4b03      	ldr	r3, [pc, #12]	@ (80076b0 <init_periph_events+0x28>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff fdb1 	bl	800720c <set_cb_periph_event_id>
	}
}
 80076aa:	bf00      	nop
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200041d0 	.word	0x200041d0

080076b4 <get_periph_event_id>:
/**
 * \brief
 *
 */
osEventFlagsId_t  get_periph_event_id(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
	return _periph_event_id;
 80076b8:	4b02      	ldr	r3, [pc, #8]	@ (80076c4 <get_periph_event_id+0x10>)
 80076ba:	681b      	ldr	r3, [r3, #0]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr
 80076c4:	200041d0 	.word	0x200041d0

080076c8 <print_msg_queue_init>:
/**
 * \brief
 *
 */
void print_msg_queue_init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
	_print_msg_queue_id = osMessageQueueNew(PRINT_MSGQUEUE_OBJECTS, PRINT_MSGQUEUE_OBJECT_SIZE, NULL);
 80076cc:	2200      	movs	r2, #0
 80076ce:	2180      	movs	r1, #128	@ 0x80
 80076d0:	2008      	movs	r0, #8
 80076d2:	f7fc fb78 	bl	8003dc6 <osMessageQueueNew>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a04      	ldr	r2, [pc, #16]	@ (80076ec <print_msg_queue_init+0x24>)
 80076da:	6013      	str	r3, [r2, #0]

	if (_print_msg_queue_id == NULL)
 80076dc:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <print_msg_queue_init+0x24>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <print_msg_queue_init+0x20>
	{
	 // Message Queue object not created, handle failure
	  /// \todo printf
		while(1){}
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <print_msg_queue_init+0x1c>
	}
}
 80076e8:	bf00      	nop
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	200041d4 	.word	0x200041d4

080076f0 <get_print_msg_queue_id>:
/**
 * \brief
 *
 */
osMessageQueueId_t get_print_msg_queue_id(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
	return _print_msg_queue_id;
 80076f4:	4b02      	ldr	r3, [pc, #8]	@ (8007700 <get_print_msg_queue_id+0x10>)
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr
 8007700:	200041d4 	.word	0x200041d4

08007704 <button_thread_init>:
/**
 * \brief
 *
 */
void button_thread_init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
	_button_thread_id = osThreadNew(button_thread, NULL, &_button_thread_attributes);
 8007708:	4a04      	ldr	r2, [pc, #16]	@ (800771c <button_thread_init+0x18>)
 800770a:	2100      	movs	r1, #0
 800770c:	4804      	ldr	r0, [pc, #16]	@ (8007720 <button_thread_init+0x1c>)
 800770e:	f7fc f9c7 	bl	8003aa0 <osThreadNew>
 8007712:	4603      	mov	r3, r0
 8007714:	4a03      	ldr	r2, [pc, #12]	@ (8007724 <button_thread_init+0x20>)
 8007716:	6013      	str	r3, [r2, #0]

	if(_button_thread_id == NULL)
	{
		/// \todo pprintf
	}
}
 8007718:	bf00      	nop
 800771a:	bd80      	pop	{r7, pc}
 800771c:	08008494 	.word	0x08008494
 8007720:	08007729 	.word	0x08007729
 8007724:	200041d8 	.word	0x200041d8

08007728 <button_thread>:
/**
 * \brief
 *
 */
void button_thread (void *argument)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	print_to_console("Buttons thread was started!");
 8007730:	480c      	ldr	r0, [pc, #48]	@ (8007764 <button_thread+0x3c>)
 8007732:	f7ff fccf 	bl	80070d4 <print_to_console>

	while(1)
	{
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 8007736:	4b0c      	ldr	r3, [pc, #48]	@ (8007768 <button_thread+0x40>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <button_thread+0x20>
		{
			print_to_console("User button 0 was pushed!");
 8007742:	480a      	ldr	r0, [pc, #40]	@ (800776c <button_thread+0x44>)
 8007744:	f7ff fcc6 	bl	80070d4 <print_to_console>
		}

		if(!(GPIOA->IDR & GPIO_IDR_IDR15))
 8007748:	4b09      	ldr	r3, [pc, #36]	@ (8007770 <button_thread+0x48>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <button_thread+0x32>
		{
			print_to_console("User button 1 was pushed!");
 8007754:	4807      	ldr	r0, [pc, #28]	@ (8007774 <button_thread+0x4c>)
 8007756:	f7ff fcbd 	bl	80070d4 <print_to_console>
		}

		osDelay(10);
 800775a:	200a      	movs	r0, #10
 800775c:	f7fc fa32 	bl	8003bc4 <osDelay>
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 8007760:	e7e9      	b.n	8007736 <button_thread+0xe>
 8007762:	bf00      	nop
 8007764:	08008358 	.word	0x08008358
 8007768:	40010c00 	.word	0x40010c00
 800776c:	08008374 	.word	0x08008374
 8007770:	40010800 	.word	0x40010800
 8007774:	08008390 	.word	0x08008390

08007778 <print_msg_thread_init>:

/**
 * \brief
 */
void print_msg_thread_init(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
	_print_msg_thread_id = osThreadNew(print_msg_thread, NULL, &_print_msg_thread_attributes);
 800777c:	4a07      	ldr	r2, [pc, #28]	@ (800779c <print_msg_thread_init+0x24>)
 800777e:	2100      	movs	r1, #0
 8007780:	4807      	ldr	r0, [pc, #28]	@ (80077a0 <print_msg_thread_init+0x28>)
 8007782:	f7fc f98d 	bl	8003aa0 <osThreadNew>
 8007786:	4603      	mov	r3, r0
 8007788:	4a06      	ldr	r2, [pc, #24]	@ (80077a4 <print_msg_thread_init+0x2c>)
 800778a:	6013      	str	r3, [r2, #0]

	if(_print_msg_thread_id == NULL)
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <print_msg_thread_init+0x2c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <print_msg_thread_init+0x20>
	{
		/// \todo pprintf
		while(1){}
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <print_msg_thread_init+0x1c>
	}
}
 8007798:	bf00      	nop
 800779a:	bd80      	pop	{r7, pc}
 800779c:	080084b8 	.word	0x080084b8
 80077a0:	080077a9 	.word	0x080077a9
 80077a4:	200041dc 	.word	0x200041dc

080077a8 <print_msg_thread>:
/**
 * \brief
 *
 */
void print_msg_thread(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b0a2      	sub	sp, #136	@ 0x88
 80077ac:	af00      	add	r7, sp, #0
	osStatus_t status = osOK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	osMessageQueueId_t print_msg_message_id = get_print_msg_queue_id();
 80077b4:	f7ff ff9c 	bl	80076f0 <get_print_msg_queue_id>
 80077b8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	uint8_t print_buffer[128] = {[0] = 0};
 80077bc:	2300      	movs	r3, #0
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	227c      	movs	r2, #124	@ 0x7c
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f8a6 	bl	8007918 <memset>

	while(1)
	{
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 80077cc:	e019      	b.n	8007802 <print_msg_thread+0x5a>
	    {
			status = osMessageQueueGet(print_msg_message_id, print_buffer, NULL, osWaitForever);   // wait for message
 80077ce:	4639      	mov	r1, r7
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80077da:	f7fc fbc7 	bl	8003f6c <osMessageQueueGet>
 80077de:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		    if (status == osOK)
 80077e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <print_msg_thread+0x5a>
		    {
		    	//printf(&print_buffer);
		        HAL_UART_Transmit(&huart1, print_buffer, strlen(print_buffer), 0xFFFF);
 80077ea:	463b      	mov	r3, r7
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 fcaf 	bl	8000150 <strlen>
 80077f2:	4603      	mov	r3, r0
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	4639      	mov	r1, r7
 80077f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077fc:	4806      	ldr	r0, [pc, #24]	@ (8007818 <print_msg_thread+0x70>)
 80077fe:	f7fb f9b1 	bl	8002b64 <HAL_UART_Transmit>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 8007802:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8007806:	f7fc fc0f 	bl	8004028 <osMessageQueueGetCount>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1de      	bne.n	80077ce <print_msg_thread+0x26>
		    }
	    }

		osDelay(100);
 8007810:	2064      	movs	r0, #100	@ 0x64
 8007812:	f7fc f9d7 	bl	8003bc4 <osDelay>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 8007816:	e7f4      	b.n	8007802 <print_msg_thread+0x5a>
 8007818:	200000f8 	.word	0x200000f8

0800781c <rs485_thread_init>:
/**
 * \brief
 *
 */
void rs485_thread_init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
	_rs485_thread_id = osThreadNew(rs485_thread, NULL, &_rs485_thread_attributes);
 8007820:	4a04      	ldr	r2, [pc, #16]	@ (8007834 <rs485_thread_init+0x18>)
 8007822:	2100      	movs	r1, #0
 8007824:	4804      	ldr	r0, [pc, #16]	@ (8007838 <rs485_thread_init+0x1c>)
 8007826:	f7fc f93b 	bl	8003aa0 <osThreadNew>
 800782a:	4603      	mov	r3, r0
 800782c:	4a03      	ldr	r2, [pc, #12]	@ (800783c <rs485_thread_init+0x20>)
 800782e:	6013      	str	r3, [r2, #0]

	if(_rs485_thread_id == NULL)
	{
		/// \todo pprintf
	}
}
 8007830:	bf00      	nop
 8007832:	bd80      	pop	{r7, pc}
 8007834:	080084dc 	.word	0x080084dc
 8007838:	08007841 	.word	0x08007841
 800783c:	200041e0 	.word	0x200041e0

08007840 <rs485_thread>:
/**
 * \brief
 *
 */
void rs485_thread (void *argument)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b08d      	sub	sp, #52	@ 0x34
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	rs485_status_td io_status = RS485_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	uint8_t buffer[16] = {0}; // 16 is only for tests
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	f107 0320 	add.w	r3, r7, #32
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	609a      	str	r2, [r3, #8]
	//periph_interface_td *p_rs485_interface = get_hard_uart_interface_handle(1);
	uint8_t response_data_buffer[4];
	uint8_t response_data_size = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	rs485_params_td rs485h;

	rs485_init(&rs485h, get_hard_uart_interface_handle(1), get_gpio_interface_handle(0), GPIO_RS485_DIR);
 8007864:	2001      	movs	r0, #1
 8007866:	f7ff fd8f 	bl	8007388 <get_hard_uart_interface_handle>
 800786a:	4604      	mov	r4, r0
 800786c:	2000      	movs	r0, #0
 800786e:	f7ff fd73 	bl	8007358 <get_gpio_interface_handle>
 8007872:	4602      	mov	r2, r0
 8007874:	f107 000c 	add.w	r0, r7, #12
 8007878:	2301      	movs	r3, #1
 800787a:	4621      	mov	r1, r4
 800787c:	f7ff fe72 	bl	8007564 <rs485_init>
	//print_operation_status_to_console(io_status, RS485_THREAD_NAME, "Thread started");

	while(1)
	{
		/// reset command packet header for the next receive operation
		memset(&buffer, 0, sizeof(buffer));
 8007880:	f107 031c 	add.w	r3, r7, #28
 8007884:	2210      	movs	r2, #16
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f845 	bl	8007918 <memset>

		print_to_console("RS485 WAIT FOR MSG!");
 800788e:	480f      	ldr	r0, [pc, #60]	@ (80078cc <rs485_thread+0x8c>)
 8007890:	f7ff fc20 	bl	80070d4 <print_to_console>
		io_status = rs485_read(&rs485h, buffer);
 8007894:	f107 021c 	add.w	r2, r7, #28
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fe13 	bl	80074ca <rs485_read>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		if(io_status == RS485_OK)
 80078aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d108      	bne.n	80078c4 <rs485_thread+0x84>
		{
			print_to_console("MSG FROM RS485 WAS GOT WITH 16 BYTES!");
 80078b2:	4807      	ldr	r0, [pc, #28]	@ (80078d0 <rs485_thread+0x90>)
 80078b4:	f7ff fc0e 	bl	80070d4 <print_to_console>
			rs485_write_str(&rs485h, "^_^");
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4905      	ldr	r1, [pc, #20]	@ (80078d4 <rs485_thread+0x94>)
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fe22 	bl	8007508 <rs485_write_str>
		}

		osDelay(10);
 80078c4:	200a      	movs	r0, #10
 80078c6:	f7fc f97d 	bl	8003bc4 <osDelay>
		memset(&buffer, 0, sizeof(buffer));
 80078ca:	e7d9      	b.n	8007880 <rs485_thread+0x40>
 80078cc:	080083cc 	.word	0x080083cc
 80078d0:	080083e0 	.word	0x080083e0
 80078d4:	08008408 	.word	0x08008408

080078d8 <siprintf>:
 80078d8:	b40e      	push	{r1, r2, r3}
 80078da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078de:	b500      	push	{lr}
 80078e0:	b09c      	sub	sp, #112	@ 0x70
 80078e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80078e4:	9002      	str	r0, [sp, #8]
 80078e6:	9006      	str	r0, [sp, #24]
 80078e8:	9107      	str	r1, [sp, #28]
 80078ea:	9104      	str	r1, [sp, #16]
 80078ec:	4808      	ldr	r0, [pc, #32]	@ (8007910 <siprintf+0x38>)
 80078ee:	4909      	ldr	r1, [pc, #36]	@ (8007914 <siprintf+0x3c>)
 80078f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f4:	9105      	str	r1, [sp, #20]
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	a902      	add	r1, sp, #8
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f000 f9f6 	bl	8007cec <_svfiprintf_r>
 8007900:	2200      	movs	r2, #0
 8007902:	9b02      	ldr	r3, [sp, #8]
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	b01c      	add	sp, #112	@ 0x70
 8007908:	f85d eb04 	ldr.w	lr, [sp], #4
 800790c:	b003      	add	sp, #12
 800790e:	4770      	bx	lr
 8007910:	20000010 	.word	0x20000010
 8007914:	ffff0208 	.word	0xffff0208

08007918 <memset>:
 8007918:	4603      	mov	r3, r0
 800791a:	4402      	add	r2, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	d100      	bne.n	8007922 <memset+0xa>
 8007920:	4770      	bx	lr
 8007922:	f803 1b01 	strb.w	r1, [r3], #1
 8007926:	e7f9      	b.n	800791c <memset+0x4>

08007928 <_reclaim_reent>:
 8007928:	4b29      	ldr	r3, [pc, #164]	@ (80079d0 <_reclaim_reent+0xa8>)
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4604      	mov	r4, r0
 8007930:	4283      	cmp	r3, r0
 8007932:	d04b      	beq.n	80079cc <_reclaim_reent+0xa4>
 8007934:	69c3      	ldr	r3, [r0, #28]
 8007936:	b1ab      	cbz	r3, 8007964 <_reclaim_reent+0x3c>
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	b16b      	cbz	r3, 8007958 <_reclaim_reent+0x30>
 800793c:	2500      	movs	r5, #0
 800793e:	69e3      	ldr	r3, [r4, #28]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	5959      	ldr	r1, [r3, r5]
 8007944:	2900      	cmp	r1, #0
 8007946:	d13b      	bne.n	80079c0 <_reclaim_reent+0x98>
 8007948:	3504      	adds	r5, #4
 800794a:	2d80      	cmp	r5, #128	@ 0x80
 800794c:	d1f7      	bne.n	800793e <_reclaim_reent+0x16>
 800794e:	69e3      	ldr	r3, [r4, #28]
 8007950:	4620      	mov	r0, r4
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	f000 f878 	bl	8007a48 <_free_r>
 8007958:	69e3      	ldr	r3, [r4, #28]
 800795a:	6819      	ldr	r1, [r3, #0]
 800795c:	b111      	cbz	r1, 8007964 <_reclaim_reent+0x3c>
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f872 	bl	8007a48 <_free_r>
 8007964:	6961      	ldr	r1, [r4, #20]
 8007966:	b111      	cbz	r1, 800796e <_reclaim_reent+0x46>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 f86d 	bl	8007a48 <_free_r>
 800796e:	69e1      	ldr	r1, [r4, #28]
 8007970:	b111      	cbz	r1, 8007978 <_reclaim_reent+0x50>
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f868 	bl	8007a48 <_free_r>
 8007978:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800797a:	b111      	cbz	r1, 8007982 <_reclaim_reent+0x5a>
 800797c:	4620      	mov	r0, r4
 800797e:	f000 f863 	bl	8007a48 <_free_r>
 8007982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007984:	b111      	cbz	r1, 800798c <_reclaim_reent+0x64>
 8007986:	4620      	mov	r0, r4
 8007988:	f000 f85e 	bl	8007a48 <_free_r>
 800798c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800798e:	b111      	cbz	r1, 8007996 <_reclaim_reent+0x6e>
 8007990:	4620      	mov	r0, r4
 8007992:	f000 f859 	bl	8007a48 <_free_r>
 8007996:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007998:	b111      	cbz	r1, 80079a0 <_reclaim_reent+0x78>
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f854 	bl	8007a48 <_free_r>
 80079a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80079a2:	b111      	cbz	r1, 80079aa <_reclaim_reent+0x82>
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 f84f 	bl	8007a48 <_free_r>
 80079aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80079ac:	b111      	cbz	r1, 80079b4 <_reclaim_reent+0x8c>
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 f84a 	bl	8007a48 <_free_r>
 80079b4:	6a23      	ldr	r3, [r4, #32]
 80079b6:	b14b      	cbz	r3, 80079cc <_reclaim_reent+0xa4>
 80079b8:	4620      	mov	r0, r4
 80079ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079be:	4718      	bx	r3
 80079c0:	680e      	ldr	r6, [r1, #0]
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 f840 	bl	8007a48 <_free_r>
 80079c8:	4631      	mov	r1, r6
 80079ca:	e7bb      	b.n	8007944 <_reclaim_reent+0x1c>
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	bf00      	nop
 80079d0:	20000010 	.word	0x20000010

080079d4 <__errno>:
 80079d4:	4b01      	ldr	r3, [pc, #4]	@ (80079dc <__errno+0x8>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000010 	.word	0x20000010

080079e0 <__libc_init_array>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	2600      	movs	r6, #0
 80079e4:	4d0c      	ldr	r5, [pc, #48]	@ (8007a18 <__libc_init_array+0x38>)
 80079e6:	4c0d      	ldr	r4, [pc, #52]	@ (8007a1c <__libc_init_array+0x3c>)
 80079e8:	1b64      	subs	r4, r4, r5
 80079ea:	10a4      	asrs	r4, r4, #2
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	d109      	bne.n	8007a04 <__libc_init_array+0x24>
 80079f0:	f000 fc78 	bl	80082e4 <_init>
 80079f4:	2600      	movs	r6, #0
 80079f6:	4d0a      	ldr	r5, [pc, #40]	@ (8007a20 <__libc_init_array+0x40>)
 80079f8:	4c0a      	ldr	r4, [pc, #40]	@ (8007a24 <__libc_init_array+0x44>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	d105      	bne.n	8007a0e <__libc_init_array+0x2e>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a08:	4798      	blx	r3
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7ee      	b.n	80079ec <__libc_init_array+0xc>
 8007a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a12:	4798      	blx	r3
 8007a14:	3601      	adds	r6, #1
 8007a16:	e7f2      	b.n	80079fe <__libc_init_array+0x1e>
 8007a18:	0800853c 	.word	0x0800853c
 8007a1c:	0800853c 	.word	0x0800853c
 8007a20:	0800853c 	.word	0x0800853c
 8007a24:	08008540 	.word	0x08008540

08007a28 <__retarget_lock_acquire_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__retarget_lock_release_recursive>:
 8007a2a:	4770      	bx	lr

08007a2c <memcpy>:
 8007a2c:	440a      	add	r2, r1
 8007a2e:	4291      	cmp	r1, r2
 8007a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a34:	d100      	bne.n	8007a38 <memcpy+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a44:	d1f9      	bne.n	8007a3a <memcpy+0xe>
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <_free_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d040      	beq.n	8007ad2 <_free_r+0x8a>
 8007a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a54:	1f0c      	subs	r4, r1, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfb8      	it	lt
 8007a5a:	18e4      	addlt	r4, r4, r3
 8007a5c:	f000 f8de 	bl	8007c1c <__malloc_lock>
 8007a60:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad4 <_free_r+0x8c>)
 8007a62:	6813      	ldr	r3, [r2, #0]
 8007a64:	b933      	cbnz	r3, 8007a74 <_free_r+0x2c>
 8007a66:	6063      	str	r3, [r4, #4]
 8007a68:	6014      	str	r4, [r2, #0]
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a70:	f000 b8da 	b.w	8007c28 <__malloc_unlock>
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d908      	bls.n	8007a8a <_free_r+0x42>
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	1821      	adds	r1, r4, r0
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	bf01      	itttt	eq
 8007a80:	6819      	ldreq	r1, [r3, #0]
 8007a82:	685b      	ldreq	r3, [r3, #4]
 8007a84:	1809      	addeq	r1, r1, r0
 8007a86:	6021      	streq	r1, [r4, #0]
 8007a88:	e7ed      	b.n	8007a66 <_free_r+0x1e>
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b10b      	cbz	r3, 8007a94 <_free_r+0x4c>
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d9fa      	bls.n	8007a8a <_free_r+0x42>
 8007a94:	6811      	ldr	r1, [r2, #0]
 8007a96:	1850      	adds	r0, r2, r1
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d10b      	bne.n	8007ab4 <_free_r+0x6c>
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	4401      	add	r1, r0
 8007aa0:	1850      	adds	r0, r2, r1
 8007aa2:	4283      	cmp	r3, r0
 8007aa4:	6011      	str	r1, [r2, #0]
 8007aa6:	d1e0      	bne.n	8007a6a <_free_r+0x22>
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4408      	add	r0, r1
 8007aae:	6010      	str	r0, [r2, #0]
 8007ab0:	6053      	str	r3, [r2, #4]
 8007ab2:	e7da      	b.n	8007a6a <_free_r+0x22>
 8007ab4:	d902      	bls.n	8007abc <_free_r+0x74>
 8007ab6:	230c      	movs	r3, #12
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	e7d6      	b.n	8007a6a <_free_r+0x22>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	1821      	adds	r1, r4, r0
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	bf01      	itttt	eq
 8007ac4:	6819      	ldreq	r1, [r3, #0]
 8007ac6:	685b      	ldreq	r3, [r3, #4]
 8007ac8:	1809      	addeq	r1, r1, r0
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	6054      	str	r4, [r2, #4]
 8007ad0:	e7cb      	b.n	8007a6a <_free_r+0x22>
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20004328 	.word	0x20004328

08007ad8 <sbrk_aligned>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4e0f      	ldr	r6, [pc, #60]	@ (8007b18 <sbrk_aligned+0x40>)
 8007adc:	460c      	mov	r4, r1
 8007ade:	6831      	ldr	r1, [r6, #0]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	b911      	cbnz	r1, 8007aea <sbrk_aligned+0x12>
 8007ae4:	f000 fbaa 	bl	800823c <_sbrk_r>
 8007ae8:	6030      	str	r0, [r6, #0]
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fba5 	bl	800823c <_sbrk_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d103      	bne.n	8007afe <sbrk_aligned+0x26>
 8007af6:	f04f 34ff 	mov.w	r4, #4294967295
 8007afa:	4620      	mov	r0, r4
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	1cc4      	adds	r4, r0, #3
 8007b00:	f024 0403 	bic.w	r4, r4, #3
 8007b04:	42a0      	cmp	r0, r4
 8007b06:	d0f8      	beq.n	8007afa <sbrk_aligned+0x22>
 8007b08:	1a21      	subs	r1, r4, r0
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 fb96 	bl	800823c <_sbrk_r>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1f2      	bne.n	8007afa <sbrk_aligned+0x22>
 8007b14:	e7ef      	b.n	8007af6 <sbrk_aligned+0x1e>
 8007b16:	bf00      	nop
 8007b18:	20004324 	.word	0x20004324

08007b1c <_malloc_r>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	1ccd      	adds	r5, r1, #3
 8007b22:	f025 0503 	bic.w	r5, r5, #3
 8007b26:	3508      	adds	r5, #8
 8007b28:	2d0c      	cmp	r5, #12
 8007b2a:	bf38      	it	cc
 8007b2c:	250c      	movcc	r5, #12
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	4606      	mov	r6, r0
 8007b32:	db01      	blt.n	8007b38 <_malloc_r+0x1c>
 8007b34:	42a9      	cmp	r1, r5
 8007b36:	d904      	bls.n	8007b42 <_malloc_r+0x26>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c18 <_malloc_r+0xfc>
 8007b46:	f000 f869 	bl	8007c1c <__malloc_lock>
 8007b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4e:	461c      	mov	r4, r3
 8007b50:	bb44      	cbnz	r4, 8007ba4 <_malloc_r+0x88>
 8007b52:	4629      	mov	r1, r5
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff ffbf 	bl	8007ad8 <sbrk_aligned>
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	d158      	bne.n	8007c12 <_malloc_r+0xf6>
 8007b60:	f8d8 4000 	ldr.w	r4, [r8]
 8007b64:	4627      	mov	r7, r4
 8007b66:	2f00      	cmp	r7, #0
 8007b68:	d143      	bne.n	8007bf2 <_malloc_r+0xd6>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d04b      	beq.n	8007c06 <_malloc_r+0xea>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	4639      	mov	r1, r7
 8007b72:	4630      	mov	r0, r6
 8007b74:	eb04 0903 	add.w	r9, r4, r3
 8007b78:	f000 fb60 	bl	800823c <_sbrk_r>
 8007b7c:	4581      	cmp	r9, r0
 8007b7e:	d142      	bne.n	8007c06 <_malloc_r+0xea>
 8007b80:	6821      	ldr	r1, [r4, #0]
 8007b82:	4630      	mov	r0, r6
 8007b84:	1a6d      	subs	r5, r5, r1
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7ff ffa6 	bl	8007ad8 <sbrk_aligned>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d03a      	beq.n	8007c06 <_malloc_r+0xea>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	442b      	add	r3, r5
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	bb62      	cbnz	r2, 8007bf8 <_malloc_r+0xdc>
 8007b9e:	f8c8 7000 	str.w	r7, [r8]
 8007ba2:	e00f      	b.n	8007bc4 <_malloc_r+0xa8>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	d420      	bmi.n	8007bec <_malloc_r+0xd0>
 8007baa:	2a0b      	cmp	r2, #11
 8007bac:	d917      	bls.n	8007bde <_malloc_r+0xc2>
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	6025      	str	r5, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	6059      	strne	r1, [r3, #4]
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	bf08      	it	eq
 8007bbc:	f8c8 1000 	streq.w	r1, [r8]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f82f 	bl	8007c28 <__malloc_unlock>
 8007bca:	f104 000b 	add.w	r0, r4, #11
 8007bce:	1d23      	adds	r3, r4, #4
 8007bd0:	f020 0007 	bic.w	r0, r0, #7
 8007bd4:	1ac2      	subs	r2, r0, r3
 8007bd6:	bf1c      	itt	ne
 8007bd8:	1a1b      	subne	r3, r3, r0
 8007bda:	50a3      	strne	r3, [r4, r2]
 8007bdc:	e7af      	b.n	8007b3e <_malloc_r+0x22>
 8007bde:	6862      	ldr	r2, [r4, #4]
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	bf0c      	ite	eq
 8007be4:	f8c8 2000 	streq.w	r2, [r8]
 8007be8:	605a      	strne	r2, [r3, #4]
 8007bea:	e7eb      	b.n	8007bc4 <_malloc_r+0xa8>
 8007bec:	4623      	mov	r3, r4
 8007bee:	6864      	ldr	r4, [r4, #4]
 8007bf0:	e7ae      	b.n	8007b50 <_malloc_r+0x34>
 8007bf2:	463c      	mov	r4, r7
 8007bf4:	687f      	ldr	r7, [r7, #4]
 8007bf6:	e7b6      	b.n	8007b66 <_malloc_r+0x4a>
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d1fb      	bne.n	8007bf8 <_malloc_r+0xdc>
 8007c00:	2300      	movs	r3, #0
 8007c02:	6053      	str	r3, [r2, #4]
 8007c04:	e7de      	b.n	8007bc4 <_malloc_r+0xa8>
 8007c06:	230c      	movs	r3, #12
 8007c08:	4630      	mov	r0, r6
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	f000 f80c 	bl	8007c28 <__malloc_unlock>
 8007c10:	e794      	b.n	8007b3c <_malloc_r+0x20>
 8007c12:	6005      	str	r5, [r0, #0]
 8007c14:	e7d6      	b.n	8007bc4 <_malloc_r+0xa8>
 8007c16:	bf00      	nop
 8007c18:	20004328 	.word	0x20004328

08007c1c <__malloc_lock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	@ (8007c24 <__malloc_lock+0x8>)
 8007c1e:	f7ff bf03 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 8007c22:	bf00      	nop
 8007c24:	20004320 	.word	0x20004320

08007c28 <__malloc_unlock>:
 8007c28:	4801      	ldr	r0, [pc, #4]	@ (8007c30 <__malloc_unlock+0x8>)
 8007c2a:	f7ff befe 	b.w	8007a2a <__retarget_lock_release_recursive>
 8007c2e:	bf00      	nop
 8007c30:	20004320 	.word	0x20004320

08007c34 <__ssputs_r>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	461f      	mov	r7, r3
 8007c3a:	688e      	ldr	r6, [r1, #8]
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	42be      	cmp	r6, r7
 8007c40:	460c      	mov	r4, r1
 8007c42:	4690      	mov	r8, r2
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	d82d      	bhi.n	8007ca4 <__ssputs_r+0x70>
 8007c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c50:	d026      	beq.n	8007ca0 <__ssputs_r+0x6c>
 8007c52:	6965      	ldr	r5, [r4, #20]
 8007c54:	6909      	ldr	r1, [r1, #16]
 8007c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c5a:	eba3 0901 	sub.w	r9, r3, r1
 8007c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c62:	1c7b      	adds	r3, r7, #1
 8007c64:	444b      	add	r3, r9
 8007c66:	106d      	asrs	r5, r5, #1
 8007c68:	429d      	cmp	r5, r3
 8007c6a:	bf38      	it	cc
 8007c6c:	461d      	movcc	r5, r3
 8007c6e:	0553      	lsls	r3, r2, #21
 8007c70:	d527      	bpl.n	8007cc2 <__ssputs_r+0x8e>
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7ff ff52 	bl	8007b1c <_malloc_r>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	b360      	cbz	r0, 8007cd6 <__ssputs_r+0xa2>
 8007c7c:	464a      	mov	r2, r9
 8007c7e:	6921      	ldr	r1, [r4, #16]
 8007c80:	f7ff fed4 	bl	8007a2c <memcpy>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	6126      	str	r6, [r4, #16]
 8007c92:	444e      	add	r6, r9
 8007c94:	6026      	str	r6, [r4, #0]
 8007c96:	463e      	mov	r6, r7
 8007c98:	6165      	str	r5, [r4, #20]
 8007c9a:	eba5 0509 	sub.w	r5, r5, r9
 8007c9e:	60a5      	str	r5, [r4, #8]
 8007ca0:	42be      	cmp	r6, r7
 8007ca2:	d900      	bls.n	8007ca6 <__ssputs_r+0x72>
 8007ca4:	463e      	mov	r6, r7
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	4641      	mov	r1, r8
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	f000 faac 	bl	8008208 <memmove>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	4433      	add	r3, r6
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	f000 fad8 	bl	8008278 <_realloc_r>
 8007cc8:	4606      	mov	r6, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1e0      	bne.n	8007c90 <__ssputs_r+0x5c>
 8007cce:	4650      	mov	r0, sl
 8007cd0:	6921      	ldr	r1, [r4, #16]
 8007cd2:	f7ff feb9 	bl	8007a48 <_free_r>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	f8ca 3000 	str.w	r3, [sl]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	e7e9      	b.n	8007cbe <__ssputs_r+0x8a>
	...

08007cec <_svfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	061b      	lsls	r3, r3, #24
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	b09d      	sub	sp, #116	@ 0x74
 8007cfe:	d510      	bpl.n	8007d22 <_svfiprintf_r+0x36>
 8007d00:	690b      	ldr	r3, [r1, #16]
 8007d02:	b973      	cbnz	r3, 8007d22 <_svfiprintf_r+0x36>
 8007d04:	2140      	movs	r1, #64	@ 0x40
 8007d06:	f7ff ff09 	bl	8007b1c <_malloc_r>
 8007d0a:	6028      	str	r0, [r5, #0]
 8007d0c:	6128      	str	r0, [r5, #16]
 8007d0e:	b930      	cbnz	r0, 8007d1e <_svfiprintf_r+0x32>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	b01d      	add	sp, #116	@ 0x74
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	2340      	movs	r3, #64	@ 0x40
 8007d20:	616b      	str	r3, [r5, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	2320      	movs	r3, #32
 8007d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d2c:	2330      	movs	r3, #48	@ 0x30
 8007d2e:	f04f 0901 	mov.w	r9, #1
 8007d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ed0 <_svfiprintf_r+0x1e4>
 8007d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d3e:	4623      	mov	r3, r4
 8007d40:	469a      	mov	sl, r3
 8007d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d46:	b10a      	cbz	r2, 8007d4c <_svfiprintf_r+0x60>
 8007d48:	2a25      	cmp	r2, #37	@ 0x25
 8007d4a:	d1f9      	bne.n	8007d40 <_svfiprintf_r+0x54>
 8007d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d50:	d00b      	beq.n	8007d6a <_svfiprintf_r+0x7e>
 8007d52:	465b      	mov	r3, fp
 8007d54:	4622      	mov	r2, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ff6b 	bl	8007c34 <__ssputs_r>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f000 80a7 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d66:	445a      	add	r2, fp
 8007d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 809f 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7e:	f10a 0a01 	add.w	sl, sl, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d8c:	4654      	mov	r4, sl
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	484e      	ldr	r0, [pc, #312]	@ (8007ed0 <_svfiprintf_r+0x1e4>)
 8007d96:	f000 fa61 	bl	800825c <memchr>
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_svfiprintf_r+0xea>
 8007d9e:	06d0      	lsls	r0, r2, #27
 8007da0:	bf44      	itt	mi
 8007da2:	2320      	movmi	r3, #32
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da8:	0711      	lsls	r1, r2, #28
 8007daa:	bf44      	itt	mi
 8007dac:	232b      	movmi	r3, #43	@ 0x2b
 8007dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db8:	d015      	beq.n	8007de6 <_svfiprintf_r+0xfa>
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dca:	3b30      	subs	r3, #48	@ 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d94b      	bls.n	8007e68 <_svfiprintf_r+0x17c>
 8007dd0:	b1b0      	cbz	r0, 8007e00 <_svfiprintf_r+0x114>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e014      	b.n	8007e00 <_svfiprintf_r+0x114>
 8007dd6:	eba0 0308 	sub.w	r3, r0, r8
 8007dda:	fa09 f303 	lsl.w	r3, r9, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	46a2      	mov	sl, r4
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	e7d2      	b.n	8007d8c <_svfiprintf_r+0xa0>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfbb      	ittet	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	f042 0202 	orrlt.w	r2, r2, #2
 8007df8:	9307      	strge	r3, [sp, #28]
 8007dfa:	9307      	strlt	r3, [sp, #28]
 8007dfc:	bfb8      	it	lt
 8007dfe:	9204      	strlt	r2, [sp, #16]
 8007e00:	7823      	ldrb	r3, [r4, #0]
 8007e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e04:	d10a      	bne.n	8007e1c <_svfiprintf_r+0x130>
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0a:	d132      	bne.n	8007e72 <_svfiprintf_r+0x186>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	3402      	adds	r4, #2
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9203      	str	r2, [sp, #12]
 8007e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ed4 <_svfiprintf_r+0x1e8>
 8007e20:	2203      	movs	r2, #3
 8007e22:	4650      	mov	r0, sl
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	f000 fa19 	bl	800825c <memchr>
 8007e2a:	b138      	cbz	r0, 8007e3c <_svfiprintf_r+0x150>
 8007e2c:	2240      	movs	r2, #64	@ 0x40
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	4082      	lsls	r2, r0
 8007e36:	4313      	orrs	r3, r2
 8007e38:	3401      	adds	r4, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	2206      	movs	r2, #6
 8007e42:	4825      	ldr	r0, [pc, #148]	@ (8007ed8 <_svfiprintf_r+0x1ec>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e48:	f000 fa08 	bl	800825c <memchr>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d036      	beq.n	8007ebe <_svfiprintf_r+0x1d2>
 8007e50:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <_svfiprintf_r+0x1f0>)
 8007e52:	bb1b      	cbnz	r3, 8007e9c <_svfiprintf_r+0x1b0>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	3307      	adds	r3, #7
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	4433      	add	r3, r6
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	e76a      	b.n	8007d3e <_svfiprintf_r+0x52>
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e70:	e7a8      	b.n	8007dc4 <_svfiprintf_r+0xd8>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4619      	mov	r1, r3
 8007e7a:	3401      	adds	r4, #1
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e84:	3a30      	subs	r2, #48	@ 0x30
 8007e86:	2a09      	cmp	r2, #9
 8007e88:	d903      	bls.n	8007e92 <_svfiprintf_r+0x1a6>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c6      	beq.n	8007e1c <_svfiprintf_r+0x130>
 8007e8e:	9105      	str	r1, [sp, #20]
 8007e90:	e7c4      	b.n	8007e1c <_svfiprintf_r+0x130>
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9a:	e7f0      	b.n	8007e7e <_svfiprintf_r+0x192>
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	f3af 8000 	nop.w
 8007eac:	1c42      	adds	r2, r0, #1
 8007eae:	4606      	mov	r6, r0
 8007eb0:	d1d6      	bne.n	8007e60 <_svfiprintf_r+0x174>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	065b      	lsls	r3, r3, #25
 8007eb6:	f53f af2d 	bmi.w	8007d14 <_svfiprintf_r+0x28>
 8007eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ebc:	e72c      	b.n	8007d18 <_svfiprintf_r+0x2c>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	f000 f87d 	bl	8007fc8 <_printf_i>
 8007ece:	e7ed      	b.n	8007eac <_svfiprintf_r+0x1c0>
 8007ed0:	08008500 	.word	0x08008500
 8007ed4:	08008506 	.word	0x08008506
 8007ed8:	0800850a 	.word	0x0800850a
 8007edc:	00000000 	.word	0x00000000
 8007ee0:	08007c35 	.word	0x08007c35

08007ee4 <_printf_common>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	4616      	mov	r6, r2
 8007eea:	4698      	mov	r8, r3
 8007eec:	688a      	ldr	r2, [r1, #8]
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	bfb8      	it	lt
 8007ef6:	4613      	movlt	r3, r2
 8007ef8:	6033      	str	r3, [r6, #0]
 8007efa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007efe:	460c      	mov	r4, r1
 8007f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f04:	b10a      	cbz	r2, 8007f0a <_printf_common+0x26>
 8007f06:	3301      	adds	r3, #1
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0699      	lsls	r1, r3, #26
 8007f0e:	bf42      	ittt	mi
 8007f10:	6833      	ldrmi	r3, [r6, #0]
 8007f12:	3302      	addmi	r3, #2
 8007f14:	6033      	strmi	r3, [r6, #0]
 8007f16:	6825      	ldr	r5, [r4, #0]
 8007f18:	f015 0506 	ands.w	r5, r5, #6
 8007f1c:	d106      	bne.n	8007f2c <_printf_common+0x48>
 8007f1e:	f104 0a19 	add.w	sl, r4, #25
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6832      	ldr	r2, [r6, #0]
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dc2b      	bgt.n	8007f84 <_printf_common+0xa0>
 8007f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	3b00      	subs	r3, #0
 8007f34:	bf18      	it	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	0692      	lsls	r2, r2, #26
 8007f3a:	d430      	bmi.n	8007f9e <_printf_common+0xba>
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f44:	47c8      	blx	r9
 8007f46:	3001      	adds	r0, #1
 8007f48:	d023      	beq.n	8007f92 <_printf_common+0xae>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	f003 0306 	and.w	r3, r3, #6
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	bf14      	ite	ne
 8007f56:	2500      	movne	r5, #0
 8007f58:	6833      	ldreq	r3, [r6, #0]
 8007f5a:	f04f 0600 	mov.w	r6, #0
 8007f5e:	bf08      	it	eq
 8007f60:	68e5      	ldreq	r5, [r4, #12]
 8007f62:	f104 041a 	add.w	r4, r4, #26
 8007f66:	bf08      	it	eq
 8007f68:	1aed      	subeq	r5, r5, r3
 8007f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f6e:	bf08      	it	eq
 8007f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f74:	4293      	cmp	r3, r2
 8007f76:	bfc4      	itt	gt
 8007f78:	1a9b      	subgt	r3, r3, r2
 8007f7a:	18ed      	addgt	r5, r5, r3
 8007f7c:	42b5      	cmp	r5, r6
 8007f7e:	d11a      	bne.n	8007fb6 <_printf_common+0xd2>
 8007f80:	2000      	movs	r0, #0
 8007f82:	e008      	b.n	8007f96 <_printf_common+0xb2>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4652      	mov	r2, sl
 8007f88:	4641      	mov	r1, r8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c8      	blx	r9
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d103      	bne.n	8007f9a <_printf_common+0xb6>
 8007f92:	f04f 30ff 	mov.w	r0, #4294967295
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	3501      	adds	r5, #1
 8007f9c:	e7c1      	b.n	8007f22 <_printf_common+0x3e>
 8007f9e:	2030      	movs	r0, #48	@ 0x30
 8007fa0:	18e1      	adds	r1, r4, r3
 8007fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fac:	4422      	add	r2, r4
 8007fae:	3302      	adds	r3, #2
 8007fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fb4:	e7c2      	b.n	8007f3c <_printf_common+0x58>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4641      	mov	r1, r8
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	47c8      	blx	r9
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d0e6      	beq.n	8007f92 <_printf_common+0xae>
 8007fc4:	3601      	adds	r6, #1
 8007fc6:	e7d9      	b.n	8007f7c <_printf_common+0x98>

08007fc8 <_printf_i>:
 8007fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	7e0f      	ldrb	r7, [r1, #24]
 8007fce:	4691      	mov	r9, r2
 8007fd0:	2f78      	cmp	r7, #120	@ 0x78
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	469a      	mov	sl, r3
 8007fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fde:	d807      	bhi.n	8007ff0 <_printf_i+0x28>
 8007fe0:	2f62      	cmp	r7, #98	@ 0x62
 8007fe2:	d80a      	bhi.n	8007ffa <_printf_i+0x32>
 8007fe4:	2f00      	cmp	r7, #0
 8007fe6:	f000 80d3 	beq.w	8008190 <_printf_i+0x1c8>
 8007fea:	2f58      	cmp	r7, #88	@ 0x58
 8007fec:	f000 80ba 	beq.w	8008164 <_printf_i+0x19c>
 8007ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ff8:	e03a      	b.n	8008070 <_printf_i+0xa8>
 8007ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ffe:	2b15      	cmp	r3, #21
 8008000:	d8f6      	bhi.n	8007ff0 <_printf_i+0x28>
 8008002:	a101      	add	r1, pc, #4	@ (adr r1, 8008008 <_printf_i+0x40>)
 8008004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008008:	08008061 	.word	0x08008061
 800800c:	08008075 	.word	0x08008075
 8008010:	08007ff1 	.word	0x08007ff1
 8008014:	08007ff1 	.word	0x08007ff1
 8008018:	08007ff1 	.word	0x08007ff1
 800801c:	08007ff1 	.word	0x08007ff1
 8008020:	08008075 	.word	0x08008075
 8008024:	08007ff1 	.word	0x08007ff1
 8008028:	08007ff1 	.word	0x08007ff1
 800802c:	08007ff1 	.word	0x08007ff1
 8008030:	08007ff1 	.word	0x08007ff1
 8008034:	08008177 	.word	0x08008177
 8008038:	0800809f 	.word	0x0800809f
 800803c:	08008131 	.word	0x08008131
 8008040:	08007ff1 	.word	0x08007ff1
 8008044:	08007ff1 	.word	0x08007ff1
 8008048:	08008199 	.word	0x08008199
 800804c:	08007ff1 	.word	0x08007ff1
 8008050:	0800809f 	.word	0x0800809f
 8008054:	08007ff1 	.word	0x08007ff1
 8008058:	08007ff1 	.word	0x08007ff1
 800805c:	08008139 	.word	0x08008139
 8008060:	6833      	ldr	r3, [r6, #0]
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6032      	str	r2, [r6, #0]
 8008068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800806c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008070:	2301      	movs	r3, #1
 8008072:	e09e      	b.n	80081b2 <_printf_i+0x1ea>
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	1d19      	adds	r1, r3, #4
 800807a:	6031      	str	r1, [r6, #0]
 800807c:	0606      	lsls	r6, r0, #24
 800807e:	d501      	bpl.n	8008084 <_printf_i+0xbc>
 8008080:	681d      	ldr	r5, [r3, #0]
 8008082:	e003      	b.n	800808c <_printf_i+0xc4>
 8008084:	0645      	lsls	r5, r0, #25
 8008086:	d5fb      	bpl.n	8008080 <_printf_i+0xb8>
 8008088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800808c:	2d00      	cmp	r5, #0
 800808e:	da03      	bge.n	8008098 <_printf_i+0xd0>
 8008090:	232d      	movs	r3, #45	@ 0x2d
 8008092:	426d      	negs	r5, r5
 8008094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008098:	230a      	movs	r3, #10
 800809a:	4859      	ldr	r0, [pc, #356]	@ (8008200 <_printf_i+0x238>)
 800809c:	e011      	b.n	80080c2 <_printf_i+0xfa>
 800809e:	6821      	ldr	r1, [r4, #0]
 80080a0:	6833      	ldr	r3, [r6, #0]
 80080a2:	0608      	lsls	r0, r1, #24
 80080a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80080a8:	d402      	bmi.n	80080b0 <_printf_i+0xe8>
 80080aa:	0649      	lsls	r1, r1, #25
 80080ac:	bf48      	it	mi
 80080ae:	b2ad      	uxthmi	r5, r5
 80080b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80080b2:	6033      	str	r3, [r6, #0]
 80080b4:	bf14      	ite	ne
 80080b6:	230a      	movne	r3, #10
 80080b8:	2308      	moveq	r3, #8
 80080ba:	4851      	ldr	r0, [pc, #324]	@ (8008200 <_printf_i+0x238>)
 80080bc:	2100      	movs	r1, #0
 80080be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080c2:	6866      	ldr	r6, [r4, #4]
 80080c4:	2e00      	cmp	r6, #0
 80080c6:	bfa8      	it	ge
 80080c8:	6821      	ldrge	r1, [r4, #0]
 80080ca:	60a6      	str	r6, [r4, #8]
 80080cc:	bfa4      	itt	ge
 80080ce:	f021 0104 	bicge.w	r1, r1, #4
 80080d2:	6021      	strge	r1, [r4, #0]
 80080d4:	b90d      	cbnz	r5, 80080da <_printf_i+0x112>
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d04b      	beq.n	8008172 <_printf_i+0x1aa>
 80080da:	4616      	mov	r6, r2
 80080dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80080e0:	fb03 5711 	mls	r7, r3, r1, r5
 80080e4:	5dc7      	ldrb	r7, [r0, r7]
 80080e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080ea:	462f      	mov	r7, r5
 80080ec:	42bb      	cmp	r3, r7
 80080ee:	460d      	mov	r5, r1
 80080f0:	d9f4      	bls.n	80080dc <_printf_i+0x114>
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d10b      	bne.n	800810e <_printf_i+0x146>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	07df      	lsls	r7, r3, #31
 80080fa:	d508      	bpl.n	800810e <_printf_i+0x146>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	6861      	ldr	r1, [r4, #4]
 8008100:	4299      	cmp	r1, r3
 8008102:	bfde      	ittt	le
 8008104:	2330      	movle	r3, #48	@ 0x30
 8008106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800810a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800810e:	1b92      	subs	r2, r2, r6
 8008110:	6122      	str	r2, [r4, #16]
 8008112:	464b      	mov	r3, r9
 8008114:	4621      	mov	r1, r4
 8008116:	4640      	mov	r0, r8
 8008118:	f8cd a000 	str.w	sl, [sp]
 800811c:	aa03      	add	r2, sp, #12
 800811e:	f7ff fee1 	bl	8007ee4 <_printf_common>
 8008122:	3001      	adds	r0, #1
 8008124:	d14a      	bne.n	80081bc <_printf_i+0x1f4>
 8008126:	f04f 30ff 	mov.w	r0, #4294967295
 800812a:	b004      	add	sp, #16
 800812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	f043 0320 	orr.w	r3, r3, #32
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	2778      	movs	r7, #120	@ 0x78
 800813a:	4832      	ldr	r0, [pc, #200]	@ (8008204 <_printf_i+0x23c>)
 800813c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	6831      	ldr	r1, [r6, #0]
 8008144:	061f      	lsls	r7, r3, #24
 8008146:	f851 5b04 	ldr.w	r5, [r1], #4
 800814a:	d402      	bmi.n	8008152 <_printf_i+0x18a>
 800814c:	065f      	lsls	r7, r3, #25
 800814e:	bf48      	it	mi
 8008150:	b2ad      	uxthmi	r5, r5
 8008152:	6031      	str	r1, [r6, #0]
 8008154:	07d9      	lsls	r1, r3, #31
 8008156:	bf44      	itt	mi
 8008158:	f043 0320 	orrmi.w	r3, r3, #32
 800815c:	6023      	strmi	r3, [r4, #0]
 800815e:	b11d      	cbz	r5, 8008168 <_printf_i+0x1a0>
 8008160:	2310      	movs	r3, #16
 8008162:	e7ab      	b.n	80080bc <_printf_i+0xf4>
 8008164:	4826      	ldr	r0, [pc, #152]	@ (8008200 <_printf_i+0x238>)
 8008166:	e7e9      	b.n	800813c <_printf_i+0x174>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	f023 0320 	bic.w	r3, r3, #32
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	e7f6      	b.n	8008160 <_printf_i+0x198>
 8008172:	4616      	mov	r6, r2
 8008174:	e7bd      	b.n	80080f2 <_printf_i+0x12a>
 8008176:	6833      	ldr	r3, [r6, #0]
 8008178:	6825      	ldr	r5, [r4, #0]
 800817a:	1d18      	adds	r0, r3, #4
 800817c:	6961      	ldr	r1, [r4, #20]
 800817e:	6030      	str	r0, [r6, #0]
 8008180:	062e      	lsls	r6, r5, #24
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	d501      	bpl.n	800818a <_printf_i+0x1c2>
 8008186:	6019      	str	r1, [r3, #0]
 8008188:	e002      	b.n	8008190 <_printf_i+0x1c8>
 800818a:	0668      	lsls	r0, r5, #25
 800818c:	d5fb      	bpl.n	8008186 <_printf_i+0x1be>
 800818e:	8019      	strh	r1, [r3, #0]
 8008190:	2300      	movs	r3, #0
 8008192:	4616      	mov	r6, r2
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	e7bc      	b.n	8008112 <_printf_i+0x14a>
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	2100      	movs	r1, #0
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	6032      	str	r2, [r6, #0]
 80081a0:	681e      	ldr	r6, [r3, #0]
 80081a2:	6862      	ldr	r2, [r4, #4]
 80081a4:	4630      	mov	r0, r6
 80081a6:	f000 f859 	bl	800825c <memchr>
 80081aa:	b108      	cbz	r0, 80081b0 <_printf_i+0x1e8>
 80081ac:	1b80      	subs	r0, r0, r6
 80081ae:	6060      	str	r0, [r4, #4]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	2300      	movs	r3, #0
 80081b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081ba:	e7aa      	b.n	8008112 <_printf_i+0x14a>
 80081bc:	4632      	mov	r2, r6
 80081be:	4649      	mov	r1, r9
 80081c0:	4640      	mov	r0, r8
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	47d0      	blx	sl
 80081c6:	3001      	adds	r0, #1
 80081c8:	d0ad      	beq.n	8008126 <_printf_i+0x15e>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	079b      	lsls	r3, r3, #30
 80081ce:	d413      	bmi.n	80081f8 <_printf_i+0x230>
 80081d0:	68e0      	ldr	r0, [r4, #12]
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	4298      	cmp	r0, r3
 80081d6:	bfb8      	it	lt
 80081d8:	4618      	movlt	r0, r3
 80081da:	e7a6      	b.n	800812a <_printf_i+0x162>
 80081dc:	2301      	movs	r3, #1
 80081de:	4632      	mov	r2, r6
 80081e0:	4649      	mov	r1, r9
 80081e2:	4640      	mov	r0, r8
 80081e4:	47d0      	blx	sl
 80081e6:	3001      	adds	r0, #1
 80081e8:	d09d      	beq.n	8008126 <_printf_i+0x15e>
 80081ea:	3501      	adds	r5, #1
 80081ec:	68e3      	ldr	r3, [r4, #12]
 80081ee:	9903      	ldr	r1, [sp, #12]
 80081f0:	1a5b      	subs	r3, r3, r1
 80081f2:	42ab      	cmp	r3, r5
 80081f4:	dcf2      	bgt.n	80081dc <_printf_i+0x214>
 80081f6:	e7eb      	b.n	80081d0 <_printf_i+0x208>
 80081f8:	2500      	movs	r5, #0
 80081fa:	f104 0619 	add.w	r6, r4, #25
 80081fe:	e7f5      	b.n	80081ec <_printf_i+0x224>
 8008200:	08008511 	.word	0x08008511
 8008204:	08008522 	.word	0x08008522

08008208 <memmove>:
 8008208:	4288      	cmp	r0, r1
 800820a:	b510      	push	{r4, lr}
 800820c:	eb01 0402 	add.w	r4, r1, r2
 8008210:	d902      	bls.n	8008218 <memmove+0x10>
 8008212:	4284      	cmp	r4, r0
 8008214:	4623      	mov	r3, r4
 8008216:	d807      	bhi.n	8008228 <memmove+0x20>
 8008218:	1e43      	subs	r3, r0, #1
 800821a:	42a1      	cmp	r1, r4
 800821c:	d008      	beq.n	8008230 <memmove+0x28>
 800821e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008226:	e7f8      	b.n	800821a <memmove+0x12>
 8008228:	4601      	mov	r1, r0
 800822a:	4402      	add	r2, r0
 800822c:	428a      	cmp	r2, r1
 800822e:	d100      	bne.n	8008232 <memmove+0x2a>
 8008230:	bd10      	pop	{r4, pc}
 8008232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800823a:	e7f7      	b.n	800822c <memmove+0x24>

0800823c <_sbrk_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	2300      	movs	r3, #0
 8008240:	4d05      	ldr	r5, [pc, #20]	@ (8008258 <_sbrk_r+0x1c>)
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7f8 fdbe 	bl	8000dc8 <_sbrk>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_sbrk_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_sbrk_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	2000431c 	.word	0x2000431c

0800825c <memchr>:
 800825c:	4603      	mov	r3, r0
 800825e:	b510      	push	{r4, lr}
 8008260:	b2c9      	uxtb	r1, r1
 8008262:	4402      	add	r2, r0
 8008264:	4293      	cmp	r3, r2
 8008266:	4618      	mov	r0, r3
 8008268:	d101      	bne.n	800826e <memchr+0x12>
 800826a:	2000      	movs	r0, #0
 800826c:	e003      	b.n	8008276 <memchr+0x1a>
 800826e:	7804      	ldrb	r4, [r0, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	428c      	cmp	r4, r1
 8008274:	d1f6      	bne.n	8008264 <memchr+0x8>
 8008276:	bd10      	pop	{r4, pc}

08008278 <_realloc_r>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4680      	mov	r8, r0
 800827e:	4615      	mov	r5, r2
 8008280:	460c      	mov	r4, r1
 8008282:	b921      	cbnz	r1, 800828e <_realloc_r+0x16>
 8008284:	4611      	mov	r1, r2
 8008286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	f7ff bc47 	b.w	8007b1c <_malloc_r>
 800828e:	b92a      	cbnz	r2, 800829c <_realloc_r+0x24>
 8008290:	f7ff fbda 	bl	8007a48 <_free_r>
 8008294:	2400      	movs	r4, #0
 8008296:	4620      	mov	r0, r4
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829c:	f000 f81a 	bl	80082d4 <_malloc_usable_size_r>
 80082a0:	4285      	cmp	r5, r0
 80082a2:	4606      	mov	r6, r0
 80082a4:	d802      	bhi.n	80082ac <_realloc_r+0x34>
 80082a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082aa:	d8f4      	bhi.n	8008296 <_realloc_r+0x1e>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7ff fc34 	bl	8007b1c <_malloc_r>
 80082b4:	4607      	mov	r7, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0ec      	beq.n	8008294 <_realloc_r+0x1c>
 80082ba:	42b5      	cmp	r5, r6
 80082bc:	462a      	mov	r2, r5
 80082be:	4621      	mov	r1, r4
 80082c0:	bf28      	it	cs
 80082c2:	4632      	movcs	r2, r6
 80082c4:	f7ff fbb2 	bl	8007a2c <memcpy>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7ff fbbc 	bl	8007a48 <_free_r>
 80082d0:	463c      	mov	r4, r7
 80082d2:	e7e0      	b.n	8008296 <_realloc_r+0x1e>

080082d4 <_malloc_usable_size_r>:
 80082d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d8:	1f18      	subs	r0, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfbc      	itt	lt
 80082de:	580b      	ldrlt	r3, [r1, r0]
 80082e0:	18c0      	addlt	r0, r0, r3
 80082e2:	4770      	bx	lr

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
