
mini_mth_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deb0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800dfc0  0800dfc0  0000efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1c8  0800e1c8  000101d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1c8  0800e1c8  0000f1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1d0  0800e1d0  000101d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1d0  0800e1d0  0000f1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1d4  0800e1d4  0000f1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800e1d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d0  200001d0  0800e3a8  000101d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  0800e3a8  000104a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029600  00000000  00000000  000101f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067d0  00000000  00000000  000397f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a06  00000000  00000000  000421d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008cad  00000000  00000000  00043bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ff28  00000000  00000000  0004c883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e00  00000000  00000000  0007c7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d5ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009190  00000000  00000000  0011d5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00126780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dfa8 	.word	0x0800dfa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800dfa8 	.word	0x0800dfa8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b968 	b.w	8000448 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9d08      	ldr	r5, [sp, #32]
 8000196:	460c      	mov	r4, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14e      	bne.n	800023a <__udivmoddi4+0xaa>
 800019c:	4694      	mov	ip, r2
 800019e:	458c      	cmp	ip, r1
 80001a0:	4686      	mov	lr, r0
 80001a2:	fab2 f282 	clz	r2, r2
 80001a6:	d962      	bls.n	800026e <__udivmoddi4+0xde>
 80001a8:	b14a      	cbz	r2, 80001be <__udivmoddi4+0x2e>
 80001aa:	f1c2 0320 	rsb	r3, r2, #32
 80001ae:	4091      	lsls	r1, r2
 80001b0:	fa20 f303 	lsr.w	r3, r0, r3
 80001b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b8:	4319      	orrs	r1, r3
 80001ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80001be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001c6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ca:	fa1f f68c 	uxth.w	r6, ip
 80001ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001d6:	fb04 f106 	mul.w	r1, r4, r6
 80001da:	4299      	cmp	r1, r3
 80001dc:	d90a      	bls.n	80001f4 <__udivmoddi4+0x64>
 80001de:	eb1c 0303 	adds.w	r3, ip, r3
 80001e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001e6:	f080 8110 	bcs.w	800040a <__udivmoddi4+0x27a>
 80001ea:	4299      	cmp	r1, r3
 80001ec:	f240 810d 	bls.w	800040a <__udivmoddi4+0x27a>
 80001f0:	3c02      	subs	r4, #2
 80001f2:	4463      	add	r3, ip
 80001f4:	1a59      	subs	r1, r3, r1
 80001f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001fa:	fb07 1110 	mls	r1, r7, r0, r1
 80001fe:	fb00 f606 	mul.w	r6, r0, r6
 8000202:	fa1f f38e 	uxth.w	r3, lr
 8000206:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800020a:	429e      	cmp	r6, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f100 31ff 	add.w	r1, r0, #4294967295
 8000216:	f080 80fa 	bcs.w	800040e <__udivmoddi4+0x27e>
 800021a:	429e      	cmp	r6, r3
 800021c:	f240 80f7 	bls.w	800040e <__udivmoddi4+0x27e>
 8000220:	4463      	add	r3, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	1b9b      	subs	r3, r3, r6
 8000228:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800022c:	b11d      	cbz	r5, 8000236 <__udivmoddi4+0xa6>
 800022e:	40d3      	lsrs	r3, r2
 8000230:	2200      	movs	r2, #0
 8000232:	e9c5 3200 	strd	r3, r2, [r5]
 8000236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023a:	428b      	cmp	r3, r1
 800023c:	d905      	bls.n	800024a <__udivmoddi4+0xba>
 800023e:	b10d      	cbz	r5, 8000244 <__udivmoddi4+0xb4>
 8000240:	e9c5 0100 	strd	r0, r1, [r5]
 8000244:	2100      	movs	r1, #0
 8000246:	4608      	mov	r0, r1
 8000248:	e7f5      	b.n	8000236 <__udivmoddi4+0xa6>
 800024a:	fab3 f183 	clz	r1, r3
 800024e:	2900      	cmp	r1, #0
 8000250:	d146      	bne.n	80002e0 <__udivmoddi4+0x150>
 8000252:	42a3      	cmp	r3, r4
 8000254:	d302      	bcc.n	800025c <__udivmoddi4+0xcc>
 8000256:	4290      	cmp	r0, r2
 8000258:	f0c0 80ee 	bcc.w	8000438 <__udivmoddi4+0x2a8>
 800025c:	1a86      	subs	r6, r0, r2
 800025e:	eb64 0303 	sbc.w	r3, r4, r3
 8000262:	2001      	movs	r0, #1
 8000264:	2d00      	cmp	r5, #0
 8000266:	d0e6      	beq.n	8000236 <__udivmoddi4+0xa6>
 8000268:	e9c5 6300 	strd	r6, r3, [r5]
 800026c:	e7e3      	b.n	8000236 <__udivmoddi4+0xa6>
 800026e:	2a00      	cmp	r2, #0
 8000270:	f040 808f 	bne.w	8000392 <__udivmoddi4+0x202>
 8000274:	eba1 040c 	sub.w	r4, r1, ip
 8000278:	2101      	movs	r1, #1
 800027a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fbb4 f6f8 	udiv	r6, r4, r8
 8000286:	fb08 4416 	mls	r4, r8, r6, r4
 800028a:	fb07 f006 	mul.w	r0, r7, r6
 800028e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000296:	4298      	cmp	r0, r3
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x11c>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f106 34ff 	add.w	r4, r6, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x11a>
 80002a4:	4298      	cmp	r0, r3
 80002a6:	f200 80cb 	bhi.w	8000440 <__udivmoddi4+0x2b0>
 80002aa:	4626      	mov	r6, r4
 80002ac:	1a1c      	subs	r4, r3, r0
 80002ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80002b2:	fb08 4410 	mls	r4, r8, r0, r4
 80002b6:	fb00 f707 	mul.w	r7, r0, r7
 80002ba:	fa1f f38e 	uxth.w	r3, lr
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	429f      	cmp	r7, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x148>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x146>
 80002d0:	429f      	cmp	r7, r3
 80002d2:	f200 80ae 	bhi.w	8000432 <__udivmoddi4+0x2a2>
 80002d6:	4620      	mov	r0, r4
 80002d8:	1bdb      	subs	r3, r3, r7
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	e7a5      	b.n	800022c <__udivmoddi4+0x9c>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa24 f607 	lsr.w	r6, r4, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	fb09 6618 	mls	r6, r9, r8, r6
 8000302:	fa20 f307 	lsr.w	r3, r0, r7
 8000306:	408c      	lsls	r4, r1
 8000308:	fa00 fa01 	lsl.w	sl, r0, r1
 800030c:	fb08 f00e 	mul.w	r0, r8, lr
 8000310:	431c      	orrs	r4, r3
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000318:	4298      	cmp	r0, r3
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x1a6>
 8000320:	eb1c 0303 	adds.w	r3, ip, r3
 8000324:	f108 36ff 	add.w	r6, r8, #4294967295
 8000328:	f080 8081 	bcs.w	800042e <__udivmoddi4+0x29e>
 800032c:	4298      	cmp	r0, r3
 800032e:	d97e      	bls.n	800042e <__udivmoddi4+0x29e>
 8000330:	f1a8 0802 	sub.w	r8, r8, #2
 8000334:	4463      	add	r3, ip
 8000336:	1a1e      	subs	r6, r3, r0
 8000338:	fbb6 f3f9 	udiv	r3, r6, r9
 800033c:	fb09 6613 	mls	r6, r9, r3, r6
 8000340:	fb03 fe0e 	mul.w	lr, r3, lr
 8000344:	b2a4      	uxth	r4, r4
 8000346:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800034a:	45a6      	cmp	lr, r4
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x1d0>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f103 30ff 	add.w	r0, r3, #4294967295
 8000356:	d266      	bcs.n	8000426 <__udivmoddi4+0x296>
 8000358:	45a6      	cmp	lr, r4
 800035a:	d964      	bls.n	8000426 <__udivmoddi4+0x296>
 800035c:	3b02      	subs	r3, #2
 800035e:	4464      	add	r4, ip
 8000360:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000364:	fba0 8302 	umull	r8, r3, r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	429c      	cmp	r4, r3
 800036e:	46c6      	mov	lr, r8
 8000370:	461e      	mov	r6, r3
 8000372:	d350      	bcc.n	8000416 <__udivmoddi4+0x286>
 8000374:	d04d      	beq.n	8000412 <__udivmoddi4+0x282>
 8000376:	b155      	cbz	r5, 800038e <__udivmoddi4+0x1fe>
 8000378:	ebba 030e 	subs.w	r3, sl, lr
 800037c:	eb64 0406 	sbc.w	r4, r4, r6
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	40cb      	lsrs	r3, r1
 8000386:	431f      	orrs	r7, r3
 8000388:	40cc      	lsrs	r4, r1
 800038a:	e9c5 7400 	strd	r7, r4, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	e751      	b.n	8000236 <__udivmoddi4+0xa6>
 8000392:	fa0c fc02 	lsl.w	ip, ip, r2
 8000396:	f1c2 0320 	rsb	r3, r2, #32
 800039a:	40d9      	lsrs	r1, r3
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003a8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003ac:	fb08 1110 	mls	r1, r8, r0, r1
 80003b0:	4094      	lsls	r4, r2
 80003b2:	431c      	orrs	r4, r3
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	0c23      	lsrs	r3, r4, #16
 80003ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003be:	fb00 f107 	mul.w	r1, r0, r7
 80003c2:	4299      	cmp	r1, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x248>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ce:	d22c      	bcs.n	800042a <__udivmoddi4+0x29a>
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d92a      	bls.n	800042a <__udivmoddi4+0x29a>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4463      	add	r3, ip
 80003d8:	1a5b      	subs	r3, r3, r1
 80003da:	fbb3 f1f8 	udiv	r1, r3, r8
 80003de:	fb08 3311 	mls	r3, r8, r1, r3
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e8:	fb01 f307 	mul.w	r3, r1, r7
 80003ec:	42a3      	cmp	r3, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x272>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003f8:	d213      	bcs.n	8000422 <__udivmoddi4+0x292>
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	d911      	bls.n	8000422 <__udivmoddi4+0x292>
 80003fe:	3902      	subs	r1, #2
 8000400:	4464      	add	r4, ip
 8000402:	1ae4      	subs	r4, r4, r3
 8000404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000408:	e73b      	b.n	8000282 <__udivmoddi4+0xf2>
 800040a:	4604      	mov	r4, r0
 800040c:	e6f2      	b.n	80001f4 <__udivmoddi4+0x64>
 800040e:	4608      	mov	r0, r1
 8000410:	e708      	b.n	8000224 <__udivmoddi4+0x94>
 8000412:	45c2      	cmp	sl, r8
 8000414:	d2af      	bcs.n	8000376 <__udivmoddi4+0x1e6>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb63 060c 	sbc.w	r6, r3, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7a9      	b.n	8000376 <__udivmoddi4+0x1e6>
 8000422:	4631      	mov	r1, r6
 8000424:	e7ed      	b.n	8000402 <__udivmoddi4+0x272>
 8000426:	4603      	mov	r3, r0
 8000428:	e79a      	b.n	8000360 <__udivmoddi4+0x1d0>
 800042a:	4630      	mov	r0, r6
 800042c:	e7d4      	b.n	80003d8 <__udivmoddi4+0x248>
 800042e:	46b0      	mov	r8, r6
 8000430:	e781      	b.n	8000336 <__udivmoddi4+0x1a6>
 8000432:	4463      	add	r3, ip
 8000434:	3802      	subs	r0, #2
 8000436:	e74f      	b.n	80002d8 <__udivmoddi4+0x148>
 8000438:	4606      	mov	r6, r0
 800043a:	4623      	mov	r3, r4
 800043c:	4608      	mov	r0, r1
 800043e:	e711      	b.n	8000264 <__udivmoddi4+0xd4>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	e732      	b.n	80002ac <__udivmoddi4+0x11c>
 8000446:	bf00      	nop

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b087      	sub	sp, #28
 8000450:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000452:	f000 fccf 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000456:	f000 f851 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045a:	f000 f965 	bl	8000728 <MX_GPIO_Init>
  MX_I2C2_Init();
 800045e:	f000 f8e1 	bl	8000624 <MX_I2C2_Init>
  MX_CAN_Init();
 8000462:	f000 f8ab 	bl	80005bc <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000466:	f000 f935 	bl	80006d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800046a:	f000 f909 	bl	8000680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  link_gpio_interface(&hgpio, gpio_set, gpio_get);
 800046e:	4a19      	ldr	r2, [pc, #100]	@ (80004d4 <main+0x88>)
 8000470:	4919      	ldr	r1, [pc, #100]	@ (80004d8 <main+0x8c>)
 8000472:	481a      	ldr	r0, [pc, #104]	@ (80004dc <main+0x90>)
 8000474:	f00c fec2 	bl	800d1fc <link_gpio_interface>

  link_periph_interface(
 8000478:	2000      	movs	r0, #0
 800047a:	f00c fed1 	bl	800d220 <get_hard_uart_interface_handle>
 800047e:	4604      	mov	r4, r0
		  get_hard_uart_interface_handle(0),
		  get_periph_event_id(),
 8000480:	f00c ffd8 	bl	800d434 <get_periph_event_id>
 8000484:	4601      	mov	r1, r0
  link_periph_interface(
 8000486:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <main+0x94>)
 8000488:	9305      	str	r3, [sp, #20]
 800048a:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <main+0x98>)
 800048c:	9304      	str	r3, [sp, #16]
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <main+0x9c>)
 8000490:	9303      	str	r3, [sp, #12]
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <main+0xa0>)
 8000494:	9302      	str	r3, [sp, #8]
 8000496:	2301      	movs	r3, #1
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2302      	movs	r3, #2
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2300      	movs	r3, #0
 80004a0:	2200      	movs	r2, #0
 80004a2:	4620      	mov	r0, r4
 80004a4:	f00c fe80 	bl	800d1a8 <link_periph_interface>
		  delay_us);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a8:	f007 fa06 	bl	80078b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  print_msg_queue_init();
 80004ac:	f00c ffcc 	bl	800d448 <print_msg_queue_init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004b0:	4a0f      	ldr	r2, [pc, #60]	@ (80004f0 <main+0xa4>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <main+0xa8>)
 80004b6:	f007 fab7 	bl	8007a28 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <main+0xac>)
 80004be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  print_msg_thread_init();
 80004c0:	f00d f81a 	bl	800d4f8 <print_msg_thread_init>
  button_thread_init();
 80004c4:	f00c ffde 	bl	800d484 <button_thread_init>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  init_periph_events();
 80004c8:	f00c ff9e 	bl	800d408 <init_periph_events>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004cc:	f007 fa16 	bl	80078fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x84>
 80004d4:	0800d159 	.word	0x0800d159
 80004d8:	0800d0f1 	.word	0x0800d0f1
 80004dc:	200002fc 	.word	0x200002fc
 80004e0:	0800cfe5 	.word	0x0800cfe5
 80004e4:	0800d2b7 	.word	0x0800d2b7
 80004e8:	0800d255 	.word	0x0800d255
 80004ec:	20000268 	.word	0x20000268
 80004f0:	0800e0c4 	.word	0x0800e0c4
 80004f4:	080008a1 	.word	0x080008a1
 80004f8:	200002f8 	.word	0x200002f8

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000506:	2228      	movs	r2, #40	@ 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f00d f866 	bl	800d5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052c:	2301      	movs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f96c 	bl	8003830 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 f9d9 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000572:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fbd8 	bl	8003d34 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058a:	f000 f9c3 	bl	8000914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800058e:	2310      	movs	r3, #16
 8000590:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fdc3 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a4:	f000 f9b6 	bl	8000914 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f04f 61e0 	mov.w	r1, #117440512	@ 0x7000000
 80005ae:	2000      	movs	r0, #0
 80005b0:	f003 fcaa 	bl	8003f08 <HAL_RCC_MCOConfig>
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <MX_CAN_Init+0x60>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_CAN_Init+0x64>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <MX_CAN_Init+0x60>)
 80005c8:	2210      	movs	r2, #16
 80005ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_CAN_Init+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <MX_CAN_Init+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <MX_CAN_Init+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_CAN_Init+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_CAN_Init+0x60>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_CAN_Init+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_CAN_Init+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_CAN_Init+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_CAN_Init+0x60>)
 80005fe:	2200      	movs	r2, #0
 8000600:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_CAN_Init+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_CAN_Init+0x60>)
 800060a:	f000 fc25 	bl	8000e58 <HAL_CAN_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000614:	f000 f97e 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200001ec 	.word	0x200001ec
 8000620:	40006400 	.word	0x40006400

08000624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_I2C2_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <MX_I2C2_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000630:	4a12      	ldr	r2, [pc, #72]	@ (800067c <MX_I2C2_Init+0x58>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_I2C2_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_I2C2_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_I2C2_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000662:	f001 fa41 	bl	8001ae8 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f952 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000214 	.word	0x20000214
 8000678:	40005800 	.word	0x40005800
 800067c:	000186a0 	.word	0x000186a0

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f004 f828 	bl	800470c <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f927 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000268 	.word	0x20000268
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f003 fffe 	bl	800470c <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8fd 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200002b0 	.word	0x200002b0
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <MX_GPIO_Init+0x168>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a53      	ldr	r2, [pc, #332]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b51      	ldr	r3, [pc, #324]	@ (8000890 <MX_GPIO_Init+0x168>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b4e      	ldr	r3, [pc, #312]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a4d      	ldr	r2, [pc, #308]	@ (8000890 <MX_GPIO_Init+0x168>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b4b      	ldr	r3, [pc, #300]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b48      	ldr	r3, [pc, #288]	@ (8000890 <MX_GPIO_Init+0x168>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a47      	ldr	r2, [pc, #284]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <MX_GPIO_Init+0x168>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a41      	ldr	r2, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x168>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a2:	483c      	ldr	r0, [pc, #240]	@ (8000894 <MX_GPIO_Init+0x16c>)
 80007a4:	f001 f987 	bl	8001ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	483a      	ldr	r0, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x170>)
 80007ae:	f001 f982 	bl	8001ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2104      	movs	r1, #4
 80007b6:	4839      	ldr	r0, [pc, #228]	@ (800089c <MX_GPIO_Init+0x174>)
 80007b8:	f001 f97d 	bl	8001ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	482f      	ldr	r0, [pc, #188]	@ (8000894 <MX_GPIO_Init+0x16c>)
 80007d6:	f000 ffd3 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007da:	23f1      	movs	r3, #241	@ 0xf1
 80007dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	482b      	ldr	r0, [pc, #172]	@ (8000898 <MX_GPIO_Init+0x170>)
 80007ea:	f000 ffc9 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	4824      	ldr	r0, [pc, #144]	@ (8000898 <MX_GPIO_Init+0x170>)
 8000806:	f000 ffbb 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800080a:	f24f 03f9 	movw	r3, #61689	@ 0xf0f9
 800080e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4820      	ldr	r0, [pc, #128]	@ (800089c <MX_GPIO_Init+0x174>)
 800081c:	f000 ffb0 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_0_Pin */
  GPIO_InitStruct.Pin = USER_BTN_0_Pin;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_0_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	481a      	ldr	r0, [pc, #104]	@ (800089c <MX_GPIO_Init+0x174>)
 8000834:	f000 ffa4 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8000838:	2304      	movs	r3, #4
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2302      	movs	r3, #2
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_GPIO_Init+0x174>)
 8000850:	f000 ff96 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <MX_GPIO_Init+0x170>)
 800086a:	f000 ff89 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 800086e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_GPIO_Init+0x170>)
 8000884:	f000 ff7c 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	simple_led_params_td hled;

	simple_led_init(&hled, &hgpio, GPIO_LED_ORANGE);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2200      	movs	r2, #0
 80008ae:	490e      	ldr	r1, [pc, #56]	@ (80008e8 <StartDefaultTask+0x48>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00c fd48 	bl	800d346 <simple_led_init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008b6:	f00b feeb 	bl	800c690 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  simple_led_set(&hled, LED_ON);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00c fd29 	bl	800d318 <simple_led_set>
	//gpio_set(0, GPIO_TRUE);
	osDelay(100);
 80008c6:	2064      	movs	r0, #100	@ 0x64
 80008c8:	f007 f940 	bl	8007b4c <osDelay>
	//gpio_set(0, GPIO_FALSE);
	simple_led_set(&hled, LED_OFF);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00c fd20 	bl	800d318 <simple_led_set>
    osDelay(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f007 f937 	bl	8007b4c <osDelay>

    print_to_console("Default task says Hello!");
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <StartDefaultTask+0x4c>)
 80008e0:	f00c fb62 	bl	800cfa8 <print_to_console>
	  simple_led_set(&hled, LED_ON);
 80008e4:	bf00      	nop
 80008e6:	e7e8      	b.n	80008ba <StartDefaultTask+0x1a>
 80008e8:	200002fc 	.word	0x200002fc
 80008ec:	0800dfcc 	.word	0x0800dfcc

080008f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000902:	f000 fa8d 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40012c00 	.word	0x40012c00

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_MspInit+0x68>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_MspInit+0x68>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_MspInit+0x68>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_MspInit+0x68>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a11      	ldr	r2, [pc, #68]	@ (8000988 <HAL_MspInit+0x68>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x68>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fe58 	bl	8001612 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_MspInit+0x6c>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_MspInit+0x6c>)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000

08000990 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a29      	ldr	r2, [pc, #164]	@ (8000a50 <HAL_CAN_MspInit+0xc0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d14b      	bne.n	8000a48 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <HAL_CAN_MspInit+0xc4>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <HAL_CAN_MspInit+0xc8>)
 80009f6:	f000 fec3 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <HAL_CAN_MspInit+0xc8>)
 8000a10:	f000 feb6 	bl	8001780 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_CAN_MspInit+0xcc>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_CAN_MspInit+0xcc>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a36:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2014      	movs	r0, #20
 8000a3e:	f000 fde8 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a42:	2014      	movs	r0, #20
 8000a44:	f000 fe01 	bl	800164a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	@ 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40006400 	.word	0x40006400
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40010000 	.word	0x40010000

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a16      	ldr	r2, [pc, #88]	@ (8000ad4 <HAL_I2C_MspInit+0x74>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d124      	bne.n	8000aca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <HAL_I2C_MspInit+0x7c>)
 8000aae:	f000 fe67 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_I2C_MspInit+0x78>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a37      	ldr	r2, [pc, #220]	@ (8000bd8 <HAL_UART_MspInit+0xf8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d132      	bne.n	8000b66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b00:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a35      	ldr	r2, [pc, #212]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b33      	ldr	r3, [pc, #204]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b2d      	ldr	r3, [pc, #180]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4826      	ldr	r0, [pc, #152]	@ (8000be0 <HAL_UART_MspInit+0x100>)
 8000b46:	f000 fe1b 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4820      	ldr	r0, [pc, #128]	@ (8000be0 <HAL_UART_MspInit+0x100>)
 8000b60:	f000 fe0e 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	e034      	b.n	8000bd0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <HAL_UART_MspInit+0x104>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d12f      	bne.n	8000bd0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7a:	61d3      	str	r3, [r2, #28]
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0xfc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <HAL_UART_MspInit+0x100>)
 8000bb4:	f000 fde4 	bl	8001780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0x100>)
 8000bcc:	f000 fdd8 	bl	8001780 <HAL_GPIO_Init>
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40004400 	.word	0x40004400

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	@ 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <HAL_InitTick+0xd0>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb8 <HAL_InitTick+0xd0>)
 8000c04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <HAL_InitTick+0xd0>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fa31 	bl	8004088 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c26:	f003 fa1b 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8000c2a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2e:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <HAL_InitTick+0xd4>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9b      	lsrs	r3, r3, #18
 8000c36:	3b01      	subs	r3, #1
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c3c:	4a21      	ldr	r2, [pc, #132]	@ (8000cc4 <HAL_InitTick+0xdc>)
 8000c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c46:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c48:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c62:	f003 fb15 	bl	8004290 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c74:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <HAL_InitTick+0xd8>)
 8000c76:	f003 fb63 	bl	8004340 <HAL_TIM_Base_Start_IT>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d111      	bne.n	8000cac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c88:	2019      	movs	r0, #25
 8000c8a:	f000 fcde 	bl	800164a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d808      	bhi.n	8000ca6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2019      	movs	r0, #25
 8000c9a:	f000 fcba 	bl	8001612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_InitTick+0xe0>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e002      	b.n	8000cac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3730      	adds	r7, #48	@ 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	431bde83 	.word	0x431bde83
 8000cc0:	20000304 	.word	0x20000304
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	20000004 	.word	0x20000004

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000d06:	f000 f9a2 	bl	800104e <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000d0c:	f001 f94c 	bl	8001fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200001ec 	.word	0x200001ec
 8000d18:	20003e04 	.word	0x20003e04

08000d1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <TIM1_UP_IRQHandler+0x10>)
 8000d22:	f003 fb5f 	bl	80043e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000304 	.word	0x20000304

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f00c fc9a 	bl	800d698 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20005000 	.word	0x20005000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000034c 	.word	0x2000034c
 8000d98:	200044a0 	.word	0x200044a0

08000d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da8:	f7ff fff8 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dae:	490c      	ldr	r1, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dc4:	4c09      	ldr	r4, [pc, #36]	@ (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f00c fc67 	bl	800d6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fb39 	bl	800044c <main>
  bx lr
 8000dda:	4770      	bx	lr
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000de4:	0800e1d8 	.word	0x0800e1d8
  ldr r2, =_sbss
 8000de8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000dec:	200044a0 	.word	0x200044a0

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fbf9 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff feec 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fd86 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000350 	.word	0x20000350

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000350 	.word	0x20000350

08000e58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0ed      	b.n	8001046 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd8a 	bl	8000990 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8c:	f7ff ffda 	bl	8000e44 <HAL_GetTick>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e94:	f7ff ffd6 	bl	8000e44 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d90b      	bls.n	8000eba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0c5      	b.n	8001046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e5      	beq.n	8000e94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0202 	bic.w	r2, r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff ffb4 	bl	8000e44 <HAL_GetTick>
 8000edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ede:	e012      	b.n	8000f06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee0:	f7ff ffb0 	bl	8000e44 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2205      	movs	r2, #5
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e09f      	b.n	8001046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e5      	bne.n	8000ee0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7e1b      	ldrb	r3, [r3, #24]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e5b      	ldrb	r3, [r3, #25]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d108      	bne.n	8000f58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7e9b      	ldrb	r3, [r3, #26]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d108      	bne.n	8000f82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e007      	b.n	8000f92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0220 	bic.w	r2, r2, #32
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7edb      	ldrb	r3, [r3, #27]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0210 	bic.w	r2, r2, #16
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0210 	orr.w	r2, r2, #16
 8000fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7f1b      	ldrb	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0208 	orr.w	r2, r2, #8
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0208 	bic.w	r2, r2, #8
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7f5b      	ldrb	r3, [r3, #29]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0204 	orr.w	r2, r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0204 	bic.w	r2, r2, #4
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	ea42 0103 	orr.w	r1, r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b08a      	sub	sp, #40	@ 0x28
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d07c      	beq.n	800118e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d023      	beq.n	80010e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2201      	movs	r2, #1
 80010a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f983 	bl	80013bc <HAL_CAN_TxMailbox0CompleteCallback>
 80010b6:	e016      	b.n	80010e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ca:	e00c      	b.n	80010e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010de:	e002      	b.n	80010e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f986 	bl	80013f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d024      	beq.n	800113a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f962 	bl	80013ce <HAL_CAN_TxMailbox1CompleteCallback>
 800110a:	e016      	b.n	800113a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
 800111e:	e00c      	b.n	800113a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
 8001132:	e002      	b.n	800113a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f965 	bl	8001404 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d024      	beq.n	800118e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800114c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f941 	bl	80013e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800115e:	e016      	b.n	800118e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
 8001172:	e00c      	b.n	800118e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e002      	b.n	800118e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f944 	bl	8001416 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2210      	movs	r2, #16
 80011b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2208      	movs	r2, #8
 80011cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f933 	bl	800143a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d009      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f91b 	bl	8001428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2210      	movs	r2, #16
 8001214:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f913 	bl	800145e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f8fb 	bl	800144c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00b      	beq.n	8001278 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2210      	movs	r2, #16
 8001270:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f8fc 	bl	8001470 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2208      	movs	r2, #8
 8001292:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f8f4 	bl	8001482 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d07b      	beq.n	800139c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d072      	beq.n	8001394 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001308:	2b00      	cmp	r3, #0
 800130a:	d043      	beq.n	8001394 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001312:	2b00      	cmp	r3, #0
 8001314:	d03e      	beq.n	8001394 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800131c:	2b60      	cmp	r3, #96	@ 0x60
 800131e:	d02b      	beq.n	8001378 <HAL_CAN_IRQHandler+0x32a>
 8001320:	2b60      	cmp	r3, #96	@ 0x60
 8001322:	d82e      	bhi.n	8001382 <HAL_CAN_IRQHandler+0x334>
 8001324:	2b50      	cmp	r3, #80	@ 0x50
 8001326:	d022      	beq.n	800136e <HAL_CAN_IRQHandler+0x320>
 8001328:	2b50      	cmp	r3, #80	@ 0x50
 800132a:	d82a      	bhi.n	8001382 <HAL_CAN_IRQHandler+0x334>
 800132c:	2b40      	cmp	r3, #64	@ 0x40
 800132e:	d019      	beq.n	8001364 <HAL_CAN_IRQHandler+0x316>
 8001330:	2b40      	cmp	r3, #64	@ 0x40
 8001332:	d826      	bhi.n	8001382 <HAL_CAN_IRQHandler+0x334>
 8001334:	2b30      	cmp	r3, #48	@ 0x30
 8001336:	d010      	beq.n	800135a <HAL_CAN_IRQHandler+0x30c>
 8001338:	2b30      	cmp	r3, #48	@ 0x30
 800133a:	d822      	bhi.n	8001382 <HAL_CAN_IRQHandler+0x334>
 800133c:	2b10      	cmp	r3, #16
 800133e:	d002      	beq.n	8001346 <HAL_CAN_IRQHandler+0x2f8>
 8001340:	2b20      	cmp	r3, #32
 8001342:	d005      	beq.n	8001350 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001344:	e01d      	b.n	8001382 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800134e:	e019      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001358:	e014      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001362:	e00f      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800136c:	e00a      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001376:	e005      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001380:	e000      	b.n	8001384 <HAL_CAN_IRQHandler+0x336>
            break;
 8001382:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001392:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2204      	movs	r2, #4
 800139a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f870 	bl	8001494 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	@ (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff4f 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff64 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ffb2 	bl	8001598 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff81 	bl	8001544 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff57 	bl	800150c <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Start_IT+0x20>
 8001682:	2302      	movs	r3, #2
 8001684:	e04b      	b.n	800171e <HAL_DMA_Start_IT+0xb8>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d13a      	bne.n	8001710 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f831 	bl	8001726 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 020e 	orr.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e00f      	b.n	80016fe <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0204 	bic.w	r2, r2, #4
 80016ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 020a 	orr.w	r2, r2, #10
 80016fc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e005      	b.n	800171c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001718:	2302      	movs	r3, #2
 800171a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d108      	bne.n	8001766 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001764:	e007      	b.n	8001776 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b08b      	sub	sp, #44	@ 0x2c
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e169      	b.n	8001a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001794:	2201      	movs	r2, #1
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8158 	bne.w	8001a62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a20 <HAL_GPIO_Init+0x2a0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d05e      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017bc:	4a98      	ldr	r2, [pc, #608]	@ (8001a20 <HAL_GPIO_Init+0x2a0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d875      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017c2:	4a98      	ldr	r2, [pc, #608]	@ (8001a24 <HAL_GPIO_Init+0x2a4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d058      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017c8:	4a96      	ldr	r2, [pc, #600]	@ (8001a24 <HAL_GPIO_Init+0x2a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d86f      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017ce:	4a96      	ldr	r2, [pc, #600]	@ (8001a28 <HAL_GPIO_Init+0x2a8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d052      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017d4:	4a94      	ldr	r2, [pc, #592]	@ (8001a28 <HAL_GPIO_Init+0x2a8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d869      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017da:	4a94      	ldr	r2, [pc, #592]	@ (8001a2c <HAL_GPIO_Init+0x2ac>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d04c      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017e0:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_GPIO_Init+0x2ac>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d863      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017e6:	4a92      	ldr	r2, [pc, #584]	@ (8001a30 <HAL_GPIO_Init+0x2b0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d046      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017ec:	4a90      	ldr	r2, [pc, #576]	@ (8001a30 <HAL_GPIO_Init+0x2b0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d85d      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d82a      	bhi.n	800184c <HAL_GPIO_Init+0xcc>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d859      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <HAL_GPIO_Init+0x80>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	0800187b 	.word	0x0800187b
 8001804:	08001855 	.word	0x08001855
 8001808:	08001867 	.word	0x08001867
 800180c:	080018a9 	.word	0x080018a9
 8001810:	080018af 	.word	0x080018af
 8001814:	080018af 	.word	0x080018af
 8001818:	080018af 	.word	0x080018af
 800181c:	080018af 	.word	0x080018af
 8001820:	080018af 	.word	0x080018af
 8001824:	080018af 	.word	0x080018af
 8001828:	080018af 	.word	0x080018af
 800182c:	080018af 	.word	0x080018af
 8001830:	080018af 	.word	0x080018af
 8001834:	080018af 	.word	0x080018af
 8001838:	080018af 	.word	0x080018af
 800183c:	080018af 	.word	0x080018af
 8001840:	080018af 	.word	0x080018af
 8001844:	0800185d 	.word	0x0800185d
 8001848:	08001871 	.word	0x08001871
 800184c:	4a79      	ldr	r2, [pc, #484]	@ (8001a34 <HAL_GPIO_Init+0x2b4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001852:	e02c      	b.n	80018ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e029      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e024      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	3308      	adds	r3, #8
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e01f      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	330c      	adds	r3, #12
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e01a      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001882:	2304      	movs	r3, #4
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e013      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	611a      	str	r2, [r3, #16]
          break;
 800189a:	e009      	b.n	80018b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	615a      	str	r2, [r3, #20]
          break;
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          break;
 80018ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	@ 0xff
 80018b4:	d801      	bhi.n	80018ba <HAL_GPIO_Init+0x13a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_Init+0x13e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d802      	bhi.n	80018cc <HAL_GPIO_Init+0x14c>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x152>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	3b08      	subs	r3, #8
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	210f      	movs	r1, #15
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80b1 	beq.w	8001a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001900:	4b4d      	ldr	r3, [pc, #308]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a4c      	ldr	r2, [pc, #304]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_GPIO_Init+0x2bc>)
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a40      	ldr	r2, [pc, #256]	@ (8001a40 <HAL_GPIO_Init+0x2c0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_GPIO_Init+0x1ec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3f      	ldr	r2, [pc, #252]	@ (8001a44 <HAL_GPIO_Init+0x2c4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00d      	beq.n	8001968 <HAL_GPIO_Init+0x1e8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a48 <HAL_GPIO_Init+0x2c8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x1e4>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <HAL_GPIO_Init+0x2cc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_Init+0x1e0>
 800195c:	2303      	movs	r3, #3
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001960:	2304      	movs	r3, #4
 8001962:	e004      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 800196c:	2300      	movs	r3, #0
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	f002 0203 	and.w	r2, r2, #3
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4093      	lsls	r3, r2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197e:	492f      	ldr	r1, [pc, #188]	@ (8001a3c <HAL_GPIO_Init+0x2bc>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	492c      	ldr	r1, [pc, #176]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4928      	ldr	r1, [pc, #160]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4922      	ldr	r1, [pc, #136]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	491e      	ldr	r1, [pc, #120]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4918      	ldr	r1, [pc, #96]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4914      	ldr	r1, [pc, #80]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d021      	beq.n	8001a54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e021      	b.n	8001a62 <HAL_GPIO_Init+0x2e2>
 8001a1e:	bf00      	nop
 8001a20:	10320000 	.word	0x10320000
 8001a24:	10310000 	.word	0x10310000
 8001a28:	10220000 	.word	0x10220000
 8001a2c:	10210000 	.word	0x10210000
 8001a30:	10120000 	.word	0x10120000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40010800 	.word	0x40010800
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40011400 	.word	0x40011400
 8001a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_GPIO_Init+0x304>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4909      	ldr	r1, [pc, #36]	@ (8001a84 <HAL_GPIO_Init+0x304>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae8e 	bne.w	8001794 <HAL_GPIO_Init+0x14>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	372c      	adds	r7, #44	@ 0x2c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac6:	787b      	ldrb	r3, [r7, #1]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad2:	e003      	b.n	8001adc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	041a      	lsls	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e12b      	b.n	8001d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe ffa6 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	@ 0x24
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b4c:	f002 fa74 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8001b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a81      	ldr	r2, [pc, #516]	@ (8001d5c <HAL_I2C_Init+0x274>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d807      	bhi.n	8001b6c <HAL_I2C_Init+0x84>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a80      	ldr	r2, [pc, #512]	@ (8001d60 <HAL_I2C_Init+0x278>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	bf94      	ite	ls
 8001b64:	2301      	movls	r3, #1
 8001b66:	2300      	movhi	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e006      	b.n	8001b7a <HAL_I2C_Init+0x92>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d64 <HAL_I2C_Init+0x27c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bf94      	ite	ls
 8001b74:	2301      	movls	r3, #1
 8001b76:	2300      	movhi	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0e7      	b.n	8001d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a78      	ldr	r2, [pc, #480]	@ (8001d68 <HAL_I2C_Init+0x280>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d5c <HAL_I2C_Init+0x274>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d802      	bhi.n	8001bbc <HAL_I2C_Init+0xd4>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	e009      	b.n	8001bd0 <HAL_I2C_Init+0xe8>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a69      	ldr	r2, [pc, #420]	@ (8001d6c <HAL_I2C_Init+0x284>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001be2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	495c      	ldr	r1, [pc, #368]	@ (8001d5c <HAL_I2C_Init+0x274>)
 8001bec:	428b      	cmp	r3, r1
 8001bee:	d819      	bhi.n	8001c24 <HAL_I2C_Init+0x13c>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e59      	subs	r1, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c04:	400b      	ands	r3, r1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <HAL_I2C_Init+0x138>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1e59      	subs	r1, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1e:	e051      	b.n	8001cc4 <HAL_I2C_Init+0x1dc>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e04f      	b.n	8001cc4 <HAL_I2C_Init+0x1dc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d111      	bne.n	8001c50 <HAL_I2C_Init+0x168>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	440b      	add	r3, r1
 8001c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e012      	b.n	8001c76 <HAL_I2C_Init+0x18e>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e58      	subs	r0, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	0099      	lsls	r1, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Init+0x196>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e022      	b.n	8001cc4 <HAL_I2C_Init+0x1dc>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10e      	bne.n	8001ca4 <HAL_I2C_Init+0x1bc>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e58      	subs	r0, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6859      	ldr	r1, [r3, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	440b      	add	r3, r1
 8001c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca2:	e00f      	b.n	8001cc4 <HAL_I2C_Init+0x1dc>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	6809      	ldr	r1, [r1, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6911      	ldr	r1, [r2, #16]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68d2      	ldr	r2, [r2, #12]
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	000186a0 	.word	0x000186a0
 8001d60:	001e847f 	.word	0x001e847f
 8001d64:	003d08ff 	.word	0x003d08ff
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0e8      	b.n	8001f54 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f00a fe46 	bl	800ca28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 f9cb 	bl	800514a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	f003 f9a1 	bl	8005104 <USB_CoreInit>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0bf      	b.n	8001f54 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f9cf 	bl	800517e <USB_SetCurrentMode>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0b0      	b.n	8001f54 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e03e      	b.n	8001e76 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3311      	adds	r3, #17
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3313      	adds	r3, #19
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3320      	adds	r3, #32
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3324      	adds	r3, #36	@ 0x24
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3bb      	bcc.n	8001df8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e044      	b.n	8001f10 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3b5      	bcc.n	8001e86 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f24:	f003 f937 	bl	8005196 <USB_DevInit>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00c      	b.n	8001f54 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f005 fbb6 	bl	80076be <USB_DevDisconnect>

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_Start+0x16>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e016      	b.n	8001fa0 <HAL_PCD_Start+0x44>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 f8cd 	bl	800511e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f84:	2101      	movs	r1, #1
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f00a ffc1 	bl	800cf0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f005 fb8a 	bl	80076aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 fb8c 	bl	80076d2 <USB_ReadInterrupts>
 8001fba:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fb1a 	bl	8002600 <PCD_EP_ISR_Handler>

    return;
 8001fcc:	e119      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fea:	b292      	uxth	r2, r2
 8001fec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f00a fd94 	bl	800cb1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f905 	bl	8002208 <HAL_PCD_SetAddress>

    return;
 8001ffe:	e100      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800201c:	b292      	uxth	r2, r2
 800201e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002022:	e0ee      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002040:	b292      	uxth	r2, r2
 8002042:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002046:	e0dc      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d027      	beq.n	80020a2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0204 	bic.w	r2, r2, #4
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0208 	bic.w	r2, r2, #8
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f00a fd84 	bl	800cb90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800209a:	b292      	uxth	r2, r2
 800209c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020a0:	e0af      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8083 	beq.w	80021b4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	e010      	b.n	80020d6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	441a      	add	r2, r3
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	8812      	ldrh	r2, [r2, #0]
 80020c4:	b292      	uxth	r2, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3320      	adds	r3, #32
 80020ca:	443b      	add	r3, r7
 80020cc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	3301      	adds	r3, #1
 80020d4:	77fb      	strb	r3, [r7, #31]
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b07      	cmp	r3, #7
 80020da:	d9eb      	bls.n	80020b4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	b292      	uxth	r2, r2
 8002108:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800210c:	bf00      	nop
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002116:	b29b      	uxth	r3, r3
 8002118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f6      	beq.n	800210e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002132:	b292      	uxth	r2, r2
 8002134:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
 800213c:	e00f      	b.n	800215e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4611      	mov	r1, r2
 8002146:	7ffa      	ldrb	r2, [r7, #31]
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	440a      	add	r2, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	3320      	adds	r3, #32
 8002150:	443b      	add	r3, r7
 8002152:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002156:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002158:	7ffb      	ldrb	r3, [r7, #31]
 800215a:	3301      	adds	r3, #1
 800215c:	77fb      	strb	r3, [r7, #31]
 800215e:	7ffb      	ldrb	r3, [r7, #31]
 8002160:	2b07      	cmp	r3, #7
 8002162:	d9ec      	bls.n	800213e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0208 	orr.w	r2, r2, #8
 8002176:	b292      	uxth	r2, r2
 8002178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800218e:	b292      	uxth	r2, r2
 8002190:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0204 	orr.w	r2, r2, #4
 80021a6:	b292      	uxth	r2, r2
 80021a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f00a fcd5 	bl	800cb5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021b2:	e026      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00f      	beq.n	80021de <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021d0:	b292      	uxth	r2, r2
 80021d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f00a fc93 	bl	800cb02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021dc:	e011      	b.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021fa:	b292      	uxth	r2, r2
 80021fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002200:	bf00      	nop
  }
}
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_PCD_SetAddress+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e012      	b.n	8002248 <HAL_PCD_SetAddress+0x40>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fa23 	bl	8007684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	460b      	mov	r3, r1
 8002264:	803b      	strh	r3, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800226e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da0e      	bge.n	8002294 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0207 	and.w	r2, r3, #7
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	3310      	adds	r3, #16
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0207 	and.w	r2, r3, #7
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022be:	883a      	ldrh	r2, [r7, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	78ba      	ldrb	r2, [r7, #2]
 80022c8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022ca:	78bb      	ldrb	r3, [r7, #2]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d102      	bne.n	80022d6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_EP_Open+0x94>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e00e      	b.n	8002302 <HAL_PCD_EP_Open+0xb2>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 ff6c 	bl	80051d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002300:	7afb      	ldrb	r3, [r7, #11]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0e      	bge.n	800233c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0207 	and.w	r2, r3, #7
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	3310      	adds	r3, #16
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	705a      	strb	r2, [r3, #1]
 800233a:	e00e      	b.n	800235a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 0207 	and.w	r2, r3, #7
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_PCD_EP_Close+0x6a>
 8002370:	2302      	movs	r3, #2
 8002372:	e00e      	b.n	8002392 <HAL_PCD_EP_Close+0x88>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68f9      	ldr	r1, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fae4 	bl	8005950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	460b      	mov	r3, r1
 80023a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 0207 	and.w	r2, r3, #7
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2200      	movs	r2, #0
 80023d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fc9b 	bl	8005d28 <USB_EPStartXfer>

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr

0800242a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	f003 0207 	and.w	r2, r3, #7
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	3310      	adds	r3, #16
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4413      	add	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2201      	movs	r2, #1
 8002474:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002476:	7afb      	ldrb	r3, [r7, #11]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	b2da      	uxtb	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fc4d 	bl	8005d28 <USB_EPStartXfer>

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	7912      	ldrb	r2, [r2, #4]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e04c      	b.n	8002550 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da0e      	bge.n	80024dc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0207 	and.w	r2, r3, #7
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	3310      	adds	r3, #16
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	705a      	strb	r2, [r3, #1]
 80024da:	e00c      	b.n	80024f6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_SetStall+0x7e>
 8002512:	2302      	movs	r3, #2
 8002514:	e01c      	b.n	8002550 <HAL_PCD_EP_SetStall+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f004 ffb0 	bl	800748a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	2b00      	cmp	r3, #0
 8002532:	d108      	bne.n	8002546 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f005 f8d5 	bl	80076f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7912      	ldrb	r2, [r2, #4]
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e040      	b.n	80025f8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da0e      	bge.n	800259c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 0207 	and.w	r2, r3, #7
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3310      	adds	r3, #16
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
 800259a:	e00e      	b.n	80025ba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_PCD_EP_ClrStall+0x82>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e00e      	b.n	80025f8 <HAL_PCD_EP_ClrStall+0xa0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f004 ff9e 	bl	800752a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b096      	sub	sp, #88	@ 0x58
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002608:	e3bb      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002612:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002624:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8175 	bne.w	8002918 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800262e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d14e      	bne.n	80026d8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264a:	81fb      	strh	r3, [r7, #14]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29b      	uxth	r3, r3
 800265c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3310      	adds	r3, #16
 8002662:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3302      	adds	r3, #2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	441a      	add	r2, r3
 800269a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f00a fa14 	bl	800cace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7b5b      	ldrb	r3, [r3, #13]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8368 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x782>
 80026b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 8363 	bne.w	8002d82 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7b5b      	ldrb	r3, [r3, #13]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	735a      	strb	r2, [r3, #13]
 80026d6:	e354      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026de:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d034      	beq.n	8002760 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	3306      	adds	r3, #6
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002720:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002732:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002734:	b29b      	uxth	r3, r3
 8002736:	f005 f82b 	bl	8007790 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002746:	4013      	ands	r3, r2
 8002748:	823b      	strh	r3, [r7, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	8a3a      	ldrh	r2, [r7, #16]
 8002750:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002754:	b292      	uxth	r2, r2
 8002756:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f00a f98b 	bl	800ca74 <HAL_PCD_SetupStageCallback>
 800275e:	e310      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002760:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002764:	2b00      	cmp	r3, #0
 8002766:	f280 830c 	bge.w	8002d82 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29a      	uxth	r2, r3
 8002772:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002776:	4013      	ands	r3, r2
 8002778:	83fb      	strh	r3, [r7, #30]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	8bfa      	ldrh	r2, [r7, #30]
 8002780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002784:	b292      	uxth	r2, r2
 8002786:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	3306      	adds	r3, #6
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d019      	beq.n	80027f0 <PCD_EP_ISR_Handler+0x1f0>
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ca:	6959      	ldr	r1, [r3, #20]
 80027cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f004 ffdb 	bl	8007790 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	441a      	add	r2, r3
 80027e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f00a f954 	bl	800ca98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 82bd 	bne.w	8002d82 <PCD_EP_ISR_Handler+0x782>
 8002808:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800280c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002814:	f000 82b5 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b3e      	cmp	r3, #62	@ 0x3e
 800284e:	d91d      	bls.n	800288c <PCD_EP_ISR_Handler+0x28c>
 8002850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	647b      	str	r3, [r7, #68]	@ 0x44
 8002858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <PCD_EP_ISR_Handler+0x26a>
 8002864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002866:	3b01      	subs	r3, #1
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29a      	uxth	r2, r3
 8002870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002872:	b29b      	uxth	r3, r3
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	b29b      	uxth	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002884:	b29a      	uxth	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e026      	b.n	80028da <PCD_EP_ISR_Handler+0x2da>
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <PCD_EP_ISR_Handler+0x2aa>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	e017      	b.n	80028da <PCD_EP_ISR_Handler+0x2da>
 80028aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <PCD_EP_ISR_Handler+0x2c4>
 80028be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c0:	3301      	adds	r3, #1
 80028c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	827b      	strh	r3, [r7, #18]
 80028ec:	8a7b      	ldrh	r3, [r7, #18]
 80028ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80028f2:	827b      	strh	r3, [r7, #18]
 80028f4:	8a7b      	ldrh	r3, [r7, #18]
 80028f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028fa:	827b      	strh	r3, [r7, #18]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	8a7b      	ldrh	r3, [r7, #18]
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800290a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
 8002916:	e234      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800292c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002930:	2b00      	cmp	r3, #0
 8002932:	f280 80fc 	bge.w	8002b2e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29a      	uxth	r2, r3
 8002948:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800294c:	4013      	ands	r3, r2
 800294e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002964:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002968:	b292      	uxth	r2, r2
 800296a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800296c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002984:	7b1b      	ldrb	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d125      	bne.n	80029d6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	3306      	adds	r3, #6
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80029b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8092 	beq.w	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c6:	6959      	ldr	r1, [r3, #20]
 80029c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ca:	88da      	ldrh	r2, [r3, #6]
 80029cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029d0:	f004 fede 	bl	8007790 <USB_ReadPMA>
 80029d4:	e086      	b.n	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d10a      	bne.n	80029f4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029e2:	461a      	mov	r2, r3
 80029e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9d9 	bl	8002d9e <HAL_PCD_EP_DB_Receive>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80029f2:	e077      	b.n	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d024      	beq.n	8002a9c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	3302      	adds	r3, #2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d02e      	beq.n	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a90:	891a      	ldrh	r2, [r3, #8]
 8002a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a96:	f004 fe7b 	bl	8007790 <USB_ReadPMA>
 8002a9a:	e023      	b.n	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3306      	adds	r3, #6
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002ac8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	6959      	ldr	r1, [r3, #20]
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	895a      	ldrh	r2, [r3, #10]
 8002adc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ae0:	f004 fe56 	bl	8007790 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aec:	441a      	add	r2, r3
 8002aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002afa:	441a      	add	r2, r3
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <PCD_EP_ISR_Handler+0x514>
 8002b08:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d206      	bcs.n	8002b22 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f009 ffbc 	bl	800ca98 <HAL_PCD_DataOutStageCallback>
 8002b20:	e005      	b.n	8002b2e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 f8fd 	bl	8005d28 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8123 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b3c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3310      	adds	r3, #16
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 80a2 	bne.w	8002cda <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8093 	beq.w	8002ccc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ba6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d046      	beq.n	8002c40 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d126      	bne.n	8002c08 <PCD_EP_ISR_Handler+0x608>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	4413      	add	r3, r2
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	011a      	lsls	r2, r3, #4
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	4413      	add	r3, r2
 8002bdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e061      	b.n	8002ccc <PCD_EP_ISR_Handler+0x6cc>
 8002c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d15d      	bne.n	8002ccc <PCD_EP_ISR_Handler+0x6cc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c24:	4413      	add	r3, r2
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	011a      	lsls	r2, r3, #4
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	4413      	add	r3, r2
 8002c32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e045      	b.n	8002ccc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d126      	bne.n	8002c9c <PCD_EP_ISR_Handler+0x69c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c62:	4413      	add	r3, r2
 8002c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	011a      	lsls	r2, r3, #4
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	4413      	add	r3, r2
 8002c70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	801a      	strh	r2, [r3, #0]
 8002c9a:	e017      	b.n	8002ccc <PCD_EP_ISR_Handler+0x6cc>
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d113      	bne.n	8002ccc <PCD_EP_ISR_Handler+0x6cc>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	011a      	lsls	r2, r3, #4
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f009 fefb 	bl	800cace <HAL_PCD_DataInStageCallback>
 8002cd8:	e053      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002cda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d146      	bne.n	8002d74 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d907      	bls.n	8002d2e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2a:	619a      	str	r2, [r3, #24]
 8002d2c:	e002      	b.n	8002d34 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f009 fec3 	bl	800cace <HAL_PCD_DataInStageCallback>
 8002d48:	e01b      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d52:	441a      	add	r2, r3
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d60:	441a      	add	r2, r3
 8002d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d64:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 ffdb 	bl	8005d28 <USB_EPStartXfer>
 8002d72:	e006      	b.n	8002d82 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f91b 	bl	8002fb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f6ff ac3b 	blt.w	800260a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3758      	adds	r7, #88	@ 0x58
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b088      	sub	sp, #32
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07e      	beq.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	8b7b      	ldrh	r3, [r7, #26]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d306      	bcc.n	8002df8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	8b7b      	ldrh	r3, [r7, #26]
 8002df0:	1ad2      	subs	r2, r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	619a      	str	r2, [r3, #24]
 8002df6:	e002      	b.n	8002dfe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d123      	bne.n	8002e4e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e20:	833b      	strh	r3, [r7, #24]
 8002e22:	8b3b      	ldrh	r3, [r7, #24]
 8002e24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e28:	833b      	strh	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	8b3b      	ldrh	r3, [r7, #24]
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01f      	beq.n	8002e98 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	82fb      	strh	r3, [r7, #22]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	8afb      	ldrh	r3, [r7, #22]
 8002e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e98:	8b7b      	ldrh	r3, [r7, #26]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6959      	ldr	r1, [r3, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	891a      	ldrh	r2, [r3, #8]
 8002eac:	8b7b      	ldrh	r3, [r7, #26]
 8002eae:	f004 fc6f 	bl	8007790 <USB_ReadPMA>
 8002eb2:	e07c      	b.n	8002fae <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3306      	adds	r3, #6
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002edc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	8b7b      	ldrh	r3, [r7, #26]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d306      	bcc.n	8002ef6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	8b7b      	ldrh	r3, [r7, #26]
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	e002      	b.n	8002efc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d123      	bne.n	8002f4c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	83fb      	strh	r3, [r7, #30]
 8002f20:	8bfb      	ldrh	r3, [r7, #30]
 8002f22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f26:	83fb      	strh	r3, [r7, #30]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	8bfb      	ldrh	r3, [r7, #30]
 8002f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11f      	bne.n	8002f96 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f70:	83bb      	strh	r3, [r7, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	441a      	add	r2, r3
 8002f80:	8bbb      	ldrh	r3, [r7, #28]
 8002f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f96:	8b7b      	ldrh	r3, [r7, #26]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6959      	ldr	r1, [r3, #20]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	895a      	ldrh	r2, [r3, #10]
 8002fa8:	8b7b      	ldrh	r3, [r7, #26]
 8002faa:	f004 fbf1 	bl	8007790 <USB_ReadPMA>
    }
  }

  return count;
 8002fae:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0a4      	sub	sp, #144	@ 0x90
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 81dd 	beq.w	800338c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003006:	429a      	cmp	r2, r3
 8003008:	d907      	bls.n	800301a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	e002      	b.n	8003020 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 80b9 	bne.w	800319c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d126      	bne.n	8003080 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	4413      	add	r3, r2
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	4413      	add	r3, r2
 8003054:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	b29a      	uxth	r2, r3
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e01a      	b.n	80030b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d116      	bne.n	80030b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309c:	4413      	add	r3, r2
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d126      	bne.n	8003112 <HAL_PCD_EP_DB_Transmit+0x15a>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	011a      	lsls	r2, r3, #4
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800310a:	b29a      	uxth	r2, r3
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	e017      	b.n	8003142 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d113      	bne.n	8003142 <HAL_PCD_EP_DB_Transmit+0x18a>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	4413      	add	r3, r2
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	011a      	lsls	r2, r3, #4
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	4413      	add	r3, r2
 8003136:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2200      	movs	r2, #0
 8003140:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f009 fcc0 	bl	800cace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 82fc 	beq.w	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003174:	82fb      	strh	r3, [r7, #22]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	8afb      	ldrh	r3, [r7, #22]
 8003186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800318a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800318e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
 800319a:	e2da      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d021      	beq.n	80031ea <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80031d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 82ae 	bne.w	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031fe:	441a      	add	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800320c:	441a      	add	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d30b      	bcc.n	8003236 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e017      	b.n	8003266 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800323e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800324e:	e00a      	b.n	8003266 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d165      	bne.n	800333a <HAL_PCD_EP_DB_Transmit+0x382>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003282:	4413      	add	r3, r2
 8003284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	011a      	lsls	r2, r3, #4
 800328c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328e:	4413      	add	r3, r2
 8003290:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80032ac:	d91d      	bls.n	80032ea <HAL_PCD_EP_DB_Transmit+0x332>
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x310>
 80032c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c4:	3b01      	subs	r3, #1
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	029b      	lsls	r3, r3, #10
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	801a      	strh	r2, [r3, #0]
 80032e8:	e044      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_PCD_EP_DB_Transmit+0x350>
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003300:	b29a      	uxth	r2, r3
 8003302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	e035      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_PCD_EP_DB_Transmit+0x36a>
 800331c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800331e:	3301      	adds	r3, #1
 8003320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332a:	b29b      	uxth	r3, r3
 800332c:	029b      	lsls	r3, r3, #10
 800332e:	b29b      	uxth	r3, r3
 8003330:	4313      	orrs	r3, r2
 8003332:	b29a      	uxth	r2, r3
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	e01c      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d118      	bne.n	8003374 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	647b      	str	r3, [r7, #68]	@ 0x44
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003356:	4413      	add	r3, r2
 8003358:	647b      	str	r3, [r7, #68]	@ 0x44
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	011a      	lsls	r2, r3, #4
 8003360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003362:	4413      	add	r3, r2
 8003364:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003368:	643b      	str	r3, [r7, #64]	@ 0x40
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800336e:	b29a      	uxth	r2, r3
 8003370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003372:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6959      	ldr	r1, [r3, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	891a      	ldrh	r2, [r3, #8]
 8003380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003384:	b29b      	uxth	r3, r3
 8003386:	f004 f9be 	bl	8007706 <USB_WritePMA>
 800338a:	e1e2      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	3306      	adds	r3, #6
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d307      	bcc.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	e002      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80c0 	bne.w	8003564 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d126      	bne.n	800343a <HAL_PCD_EP_DB_Transmit+0x482>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003400:	4413      	add	r3, r2
 8003402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	011a      	lsls	r2, r3, #4
 800340a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800340c:	4413      	add	r3, r2
 800340e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003412:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341e:	b29a      	uxth	r2, r3
 8003420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003432:	b29a      	uxth	r2, r3
 8003434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003436:	801a      	strh	r2, [r3, #0]
 8003438:	e01a      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d116      	bne.n	8003470 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	667b      	str	r3, [r7, #100]	@ 0x64
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003456:	4413      	add	r3, r2
 8003458:	667b      	str	r3, [r7, #100]	@ 0x64
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	011a      	lsls	r2, r3, #4
 8003460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003462:	4413      	add	r3, r2
 8003464:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
 800346a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800346c:	2200      	movs	r2, #0
 800346e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	677b      	str	r3, [r7, #116]	@ 0x74
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d12b      	bne.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003492:	4413      	add	r3, r2
 8003494:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	011a      	lsls	r2, r3, #4
 800349c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349e:	4413      	add	r3, r2
 80034a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	e017      	b.n	8003506 <HAL_PCD_EP_DB_Transmit+0x54e>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d113      	bne.n	8003506 <HAL_PCD_EP_DB_Transmit+0x54e>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ec:	4413      	add	r3, r2
 80034ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	011a      	lsls	r2, r3, #4
 80034f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f009 fade 	bl	800cace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 811a 	bne.w	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003538:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800355a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e0f6      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d121      	bne.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003588:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800359e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 80ca 	bne.w	8003752 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035c6:	441a      	add	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035d4:	441a      	add	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d30b      	bcc.n	80035fe <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	621a      	str	r2, [r3, #32]
 80035fc:	e017      	b.n	800362e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003606:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800360a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003616:	e00a      	b.n	800362e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	657b      	str	r3, [r7, #84]	@ 0x54
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d165      	bne.n	8003708 <HAL_PCD_EP_DB_Transmit+0x750>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800364a:	b29b      	uxth	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003650:	4413      	add	r3, r2
 8003652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	011a      	lsls	r2, r3, #4
 800365a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365c:	4413      	add	r3, r2
 800365e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003662:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366e:	b29a      	uxth	r2, r3
 8003670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003678:	2b3e      	cmp	r3, #62	@ 0x3e
 800367a:	d91d      	bls.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x700>
 800367c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003692:	3b01      	subs	r3, #1
 8003694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29a      	uxth	r2, r3
 800369c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800369e:	b29b      	uxth	r3, r3
 80036a0:	029b      	lsls	r3, r3, #10
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e041      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x784>
 80036b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80036c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	e032      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x784>
 80036d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x738>
 80036ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ec:	3301      	adds	r3, #1
 80036ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	b29a      	uxth	r2, r3
 8003702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	e019      	b.n	800373c <HAL_PCD_EP_DB_Transmit+0x784>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d115      	bne.n	800373c <HAL_PCD_EP_DB_Transmit+0x784>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003718:	b29b      	uxth	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371e:	4413      	add	r3, r2
 8003720:	657b      	str	r3, [r7, #84]	@ 0x54
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	4413      	add	r3, r2
 800372c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003730:	653b      	str	r3, [r7, #80]	@ 0x50
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003736:	b29a      	uxth	r2, r3
 8003738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800373a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6959      	ldr	r1, [r3, #20]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	895a      	ldrh	r2, [r3, #10]
 8003748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800374c:	b29b      	uxth	r3, r3
 800374e:	f003 ffda 	bl	8007706 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376c:	82bb      	strh	r3, [r7, #20]
 800376e:	8abb      	ldrh	r3, [r7, #20]
 8003770:	f083 0310 	eor.w	r3, r3, #16
 8003774:	82bb      	strh	r3, [r7, #20]
 8003776:	8abb      	ldrh	r3, [r7, #20]
 8003778:	f083 0320 	eor.w	r3, r3, #32
 800377c:	82bb      	strh	r3, [r7, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	8abb      	ldrh	r3, [r7, #20]
 800378e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800379a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3790      	adds	r7, #144	@ 0x90
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	4613      	mov	r3, r2
 80037bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	f003 0207 	and.w	r2, r3, #7
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3310      	adds	r3, #16
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e009      	b.n	80037f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037e2:	897a      	ldrh	r2, [r7, #10]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b29a      	uxth	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	80da      	strh	r2, [r3, #6]
 800380a:	e00b      	b.n	8003824 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2201      	movs	r2, #1
 8003810:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	b29a      	uxth	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b29a      	uxth	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e272      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8087 	beq.w	800395e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003850:	4b92      	ldr	r3, [pc, #584]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800385c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <HAL_RCC_OscConfig+0x5e>
 8003868:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b89      	ldr	r3, [pc, #548]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d06c      	beq.n	800395c <HAL_RCC_OscConfig+0x12c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d168      	bne.n	800395c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e24c      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x76>
 8003898:	4b80      	ldr	r3, [pc, #512]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e02e      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b7b      	ldr	r3, [pc, #492]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7a      	ldr	r2, [pc, #488]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b78      	ldr	r3, [pc, #480]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a77      	ldr	r2, [pc, #476]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0xbc>
 80038d2:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a71      	ldr	r2, [pc, #452]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b6f      	ldr	r3, [pc, #444]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xd4>
 80038ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a67      	ldr	r2, [pc, #412]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd fa9a 	bl	8000e44 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fd fa96 	bl	8000e44 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e200      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b5d      	ldr	r3, [pc, #372]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xe4>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fa86 	bl	8000e44 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7fd fa82 	bl	8000e44 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	@ 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1ec      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x10c>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x18c>
 8003982:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b43      	ldr	r3, [pc, #268]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x176>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1c0      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4939      	ldr	r1, [pc, #228]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e03a      	b.n	8003a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fd fa3b 	bl	8000e44 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fd fa37 	bl	8000e44 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e1a1      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4927      	ldr	r1, [pc, #156]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a06:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <HAL_RCC_OscConfig+0x270>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fa1a 	bl	8000e44 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fd fa16 	bl	8000e44 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e180      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03a      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d019      	beq.n	8003a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a46:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd f9fa 	bl	8000e44 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fd f9f6 	bl	8000e44 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e160      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <HAL_RCC_OscConfig+0x26c>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 fb38 	bl	80040e8 <RCC_Delay>
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7fd f9e0 	bl	8000e44 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd f9dc 	bl	8000e44 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e146      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	42420000 	.word	0x42420000
 8003aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	4b92      	ldr	r3, [pc, #584]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e9      	bne.n	8003a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a6 	beq.w	8003c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b88      	ldr	r3, [pc, #544]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a87      	ldr	r2, [pc, #540]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]
 8003ade:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b82      	ldr	r3, [pc, #520]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fd f99d 	bl	8000e44 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fd f999 	bl	8000e44 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b64      	cmp	r3, #100	@ 0x64
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e103      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b75      	ldr	r3, [pc, #468]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x312>
 8003b34:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6213      	str	r3, [r2, #32]
 8003b40:	e02d      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x334>
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4a69      	ldr	r2, [pc, #420]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6213      	str	r3, [r2, #32]
 8003b56:	4b67      	ldr	r3, [pc, #412]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a66      	ldr	r2, [pc, #408]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	6213      	str	r3, [r2, #32]
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x356>
 8003b6c:	4b61      	ldr	r3, [pc, #388]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	4b5e      	ldr	r3, [pc, #376]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x36e>
 8003b86:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6213      	str	r3, [r2, #32]
 8003b92:	4b58      	ldr	r3, [pc, #352]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a57      	ldr	r2, [pc, #348]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fd f94d 	bl	8000e44 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd f949 	bl	8000e44 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0b1      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x37e>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f937 	bl	8000e44 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f933 	bl	8000e44 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e09b      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b40      	ldr	r3, [pc, #256]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8087 	beq.w	8003d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c18:	4b36      	ldr	r3, [pc, #216]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d061      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d146      	bne.n	8003cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b33      	ldr	r3, [pc, #204]	@ (8003cfc <HAL_RCC_OscConfig+0x4cc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fd f907 	bl	8000e44 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd f903 	bl	8000e44 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e06d      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4c:	4b29      	ldr	r3, [pc, #164]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c60:	d108      	bne.n	8003c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c62:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4921      	ldr	r1, [pc, #132]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c74:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a19      	ldr	r1, [r3, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	430b      	orrs	r3, r1
 8003c86:	491b      	ldr	r1, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fd f8d7 	bl	8000e44 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fd f8d3 	bl	8000e44 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e03d      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x46a>
 8003cb8:	e035      	b.n	8003d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f8c0 	bl	8000e44 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f8bc 	bl	8000e44 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e026      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x498>
 8003ce6:	e01e      	b.n	8003d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e019      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_OscConfig+0x500>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d0      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d910      	bls.n	8003d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b67      	ldr	r3, [pc, #412]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	4965      	ldr	r1, [pc, #404]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b63      	ldr	r3, [pc, #396]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0b8      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d90:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a58      	ldr	r2, [pc, #352]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da8:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a52      	ldr	r2, [pc, #328]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	494d      	ldr	r1, [pc, #308]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d040      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d115      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e07f      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e073      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e06b      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4936      	ldr	r1, [pc, #216]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fd f80e 	bl	8000e44 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fd f80a 	bl	8000e44 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e053      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d210      	bcs.n	8003e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	4922      	ldr	r1, [pc, #136]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e032      	b.n	8003eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4916      	ldr	r1, [pc, #88]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	490e      	ldr	r1, [pc, #56]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec2:	f000 f859 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	490a      	ldr	r1, [pc, #40]	@ (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	5ccb      	ldrb	r3, [r1, r3]
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	4a09      	ldr	r2, [pc, #36]	@ (8003f00 <HAL_RCC_ClockConfig+0x1cc>)
 8003edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_RCC_ClockConfig+0x1d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc fe80 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800e0e8 	.word	0x0800e0e8
 8003f00:	20000000 	.word	0x20000000
 8003f04:	20000004 	.word	0x20000004

08003f08 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	@ 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003f14:	f107 0318 	add.w	r3, r7, #24
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003f26:	2303      	movs	r3, #3
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f32:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003f34:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <HAL_RCC_MCOConfig+0x68>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	4a0d      	ldr	r2, [pc, #52]	@ (8003f70 <HAL_RCC_MCOConfig+0x68>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	6193      	str	r3, [r2, #24]
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_MCOConfig+0x68>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003f4c:	f107 0318 	add.w	r3, r7, #24
 8003f50:	4619      	mov	r1, r3
 8003f52:	4808      	ldr	r0, [pc, #32]	@ (8003f74 <HAL_RCC_MCOConfig+0x6c>)
 8003f54:	f7fd fc14 	bl	8001780 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCC_MCOConfig+0x68>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCC_MCOConfig+0x68>)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010800 	.word	0x40010800

08003f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x36>
 8003fa6:	e027      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x98>)
 8003faa:	613b      	str	r3, [r7, #16]
      break;
 8003fac:	e027      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a17      	ldr	r2, [pc, #92]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fc6:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0c5b      	lsrs	r3, r3, #17
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	4a11      	ldr	r2, [pc, #68]	@ (8004018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fda:	fb03 f202 	mul.w	r2, r3, r2
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0c      	ldr	r2, [pc, #48]	@ (800401c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	613b      	str	r3, [r7, #16]
      break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ffa:	613b      	str	r3, [r7, #16]
      break;
 8003ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffe:	693b      	ldr	r3, [r7, #16]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	00b71b00 	.word	0x00b71b00
 8004014:	0800e100 	.word	0x0800e100
 8004018:	0800e110 	.word	0x0800e110
 800401c:	003d0900 	.word	0x003d0900
 8004020:	007a1200 	.word	0x007a1200

08004024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004028:	4b02      	ldr	r3, [pc, #8]	@ (8004034 <HAL_RCC_GetHCLKFreq+0x10>)
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000000 	.word	0x20000000

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff2 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	@ (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	0800e0f8 	.word	0x0800e0f8

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffde 	bl	8004024 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	0adb      	lsrs	r3, r3, #11
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	0800e0f8 	.word	0x0800e0f8

08004088 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	220f      	movs	r2, #15
 8004096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_RCC_GetClockConfig+0x58>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_RCC_GetClockConfig+0x58>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <HAL_RCC_GetClockConfig+0x58>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80040bc:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <HAL_RCC_GetClockConfig+0x58>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	08db      	lsrs	r3, r3, #3
 80040c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_GetClockConfig+0x5c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0207 	and.w	r2, r3, #7
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40022000 	.word	0x40022000

080040e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <RCC_Delay+0x34>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004120 <RCC_Delay+0x38>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0a5b      	lsrs	r3, r3, #9
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004104:	bf00      	nop
  }
  while (Delay --);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	60fa      	str	r2, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f9      	bne.n	8004104 <RCC_Delay+0x1c>
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	20000000 	.word	0x20000000
 8004120:	10624dd3 	.word	0x10624dd3

08004124 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d07d      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004144:	4b4f      	ldr	r3, [pc, #316]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b4c      	ldr	r3, [pc, #304]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4a4b      	ldr	r2, [pc, #300]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415a:	61d3      	str	r3, [r2, #28]
 800415c:	4b49      	ldr	r3, [pc, #292]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d118      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004178:	4b43      	ldr	r3, [pc, #268]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a42      	ldr	r2, [pc, #264]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004184:	f7fc fe5e 	bl	8000e44 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	e008      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fc fe5a 	bl	8000e44 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06d      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b3a      	ldr	r3, [pc, #232]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041aa:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02e      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d027      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b2e      	ldr	r3, [pc, #184]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041de:	4a29      	ldr	r2, [pc, #164]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d014      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fc fe29 	bl	8000e44 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fc fe25 	bl	8000e44 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e036      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420c:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004218:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4917      	ldr	r1, [pc, #92]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	4313      	orrs	r3, r2
 8004228:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	490b      	ldr	r1, [pc, #44]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4904      	ldr	r1, [pc, #16]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
 800428c:	42420440 	.word	0x42420440

08004290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e041      	b.n	8004326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f839 	bl	800432e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f000 f99c 	bl	800460c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e03a      	b.n	80043ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <HAL_TIM_Base_Start_IT+0x98>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x58>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004382:	d009      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x58>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a14      	ldr	r2, [pc, #80]	@ (80043dc <HAL_TIM_Base_Start_IT+0x9c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x58>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d111      	bne.n	80043bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d010      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	e007      	b.n	80043cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800

080043e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d020      	beq.n	8004448 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0202 	mvn.w	r2, #2
 8004418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8d1 	bl	80045d6 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8c4 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8d3 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d020      	beq.n	8004494 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0204 	mvn.w	r2, #4
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8ab 	bl	80045d6 <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f89e 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8ad 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0208 	mvn.w	r2, #8
 80044b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2204      	movs	r2, #4
 80044b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f885 	bl	80045d6 <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f878 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f887 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d020      	beq.n	800452c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0210 	mvn.w	r2, #16
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2208      	movs	r2, #8
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f85f 	bl	80045d6 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f852 	bl	80045c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f861 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0201 	mvn.w	r2, #1
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc f9d0 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8c3 	bl	80046fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f831 	bl	80045fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0220 	mvn.w	r2, #32
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f896 	bl	80046e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <TIM_Base_SetConfig+0xd0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_Base_SetConfig+0x30>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d007      	beq.n	800463c <TIM_Base_SetConfig+0x30>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <TIM_Base_SetConfig+0xd4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0x30>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <TIM_Base_SetConfig+0xd8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <TIM_Base_SetConfig+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1f      	ldr	r2, [pc, #124]	@ (80046e0 <TIM_Base_SetConfig+0xd4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1e      	ldr	r2, [pc, #120]	@ (80046e4 <TIM_Base_SetConfig+0xd8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0d      	ldr	r2, [pc, #52]	@ (80046dc <TIM_Base_SetConfig+0xd0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]
  }
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800

080046e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e042      	b.n	80047a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc f9d4 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	@ 0x24
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800474e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fc49 	bl	8004fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d175      	bne.n	80048b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Transmit+0x2c>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e06e      	b.n	80048ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2221      	movs	r2, #33	@ 0x21
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ea:	f7fc fb2b 	bl	8000e44 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004804:	d108      	bne.n	8004818 <HAL_UART_Transmit+0x6c>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e003      	b.n	8004820 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004820:	e02e      	b.n	8004880 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	2180      	movs	r1, #128	@ 0x80
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa5d 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e03a      	b.n	80048ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	3302      	adds	r3, #2
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	e007      	b.n	8004872 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	3301      	adds	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1cb      	bne.n	8004822 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	2140      	movs	r1, #64	@ 0x40
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fa29 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e006      	b.n	80048ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	@ 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d156      	bne.n	800498c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UART_Transmit_DMA+0x26>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e04f      	b.n	800498e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_UART_Transmit_DMA+0xd4>)
 8004914:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	4a20      	ldr	r2, [pc, #128]	@ (800499c <HAL_UART_Transmit_DMA+0xd8>)
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_UART_Transmit_DMA+0xdc>)
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3304      	adds	r3, #4
 8004942:	461a      	mov	r2, r3
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	f7fc fe8e 	bl	8001666 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004952:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	617b      	str	r3, [r7, #20]
   return(result);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004974:	627a      	str	r2, [r7, #36]	@ 0x24
 8004976:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6a39      	ldr	r1, [r7, #32]
 800497a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	61fb      	str	r3, [r7, #28]
   return(result);
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3730      	adds	r7, #48	@ 0x30
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	08004a3b 	.word	0x08004a3b
 800499c:	08004ad5 	.word	0x08004ad5
 80049a0:	08004c59 	.word	0x08004c59

080049a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d112      	bne.n	80049e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Receive_DMA+0x26>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00b      	b.n	80049e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049d4:	88fb      	ldrh	r3, [r7, #6]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f9e0 	bl	8004da0 <UART_Start_Receive_DMA>
 80049e0:	4603      	mov	r3, r0
 80049e2:	e000      	b.n	80049e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b090      	sub	sp, #64	@ 0x40
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d137      	bne.n	8004ac6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ac4:	e002      	b.n	8004acc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ac6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ac8:	f008 fae2 	bl	800d090 <HAL_UART_TxCpltCallback>
}
 8004acc:	bf00      	nop
 8004ace:	3740      	adds	r7, #64	@ 0x40
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff ff83 	bl	80049ee <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b09c      	sub	sp, #112	@ 0x70
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d172      	bne.n	8004bf2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0e:	2200      	movs	r2, #0
 8004b10:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b66:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3314      	adds	r3, #20
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e5      	bne.n	8004b7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d119      	bne.n	8004bf2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 0310 	bic.w	r3, r3, #16
 8004bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004bde:	61fa      	str	r2, [r7, #28]
 8004be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	69b9      	ldr	r1, [r7, #24]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	617b      	str	r3, [r7, #20]
   return(result);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e5      	bne.n	8004bbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c04:	4619      	mov	r1, r3
 8004c06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c08:	f7ff ff0c 	bl	8004a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c0c:	e002      	b.n	8004c14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004c0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c10:	f008 fa24 	bl	800d05c <HAL_UART_RxCpltCallback>
}
 8004c14:	bf00      	nop
 8004c16:	3770      	adds	r7, #112	@ 0x70
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d108      	bne.n	8004c4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff feee 	bl	8004a24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c48:	e002      	b.n	8004c50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fed8 	bl	8004a00 <HAL_UART_RxHalfCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b21      	cmp	r3, #33	@ 0x21
 8004c8a:	d108      	bne.n	8004c9e <UART_DMAError+0x46>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c98:	68b8      	ldr	r0, [r7, #8]
 8004c9a:	f000 f91b 	bl	8004ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b22      	cmp	r3, #34	@ 0x22
 8004cbe:	d108      	bne.n	8004cd2 <UART_DMAError+0x7a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f000 f928 	bl	8004f22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f043 0210 	orr.w	r2, r3, #16
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f7ff fe97 	bl	8004a12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	e03b      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d037      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fc f89d 	bl	8000e44 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e03a      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d023      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b80      	cmp	r3, #128	@ 0x80
 8004d32:	d020      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d01d      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d116      	bne.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8df 	bl	8004f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2208      	movs	r2, #8
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00f      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d0b4      	beq.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b098      	sub	sp, #96	@ 0x60
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2222      	movs	r2, #34	@ 0x22
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ec8 <UART_Start_Receive_DMA+0x128>)
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ecc <UART_Start_Receive_DMA+0x12c>)
 8004dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed0 <UART_Start_Receive_DMA+0x130>)
 8004dde:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de4:	2200      	movs	r2, #0
 8004de6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	f7fc fc31 	bl	8001666 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d019      	beq.n	8004e56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004eaa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6a39      	ldr	r1, [r7, #32]
 8004eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3760      	adds	r7, #96	@ 0x60
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	08004af1 	.word	0x08004af1
 8004ecc:	08004c1d 	.word	0x08004c1d
 8004ed0:	08004c59 	.word	0x08004c59

08004ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	61ba      	str	r2, [r7, #24]
 8004efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e5      	bne.n	8004edc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f18:	bf00      	nop
 8004f1a:	3724      	adds	r7, #36	@ 0x24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr

08004f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b095      	sub	sp, #84	@ 0x54
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d119      	bne.n	8004fce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fba:	61ba      	str	r2, [r7, #24]
 8004fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fdc:	bf00      	nop
 8004fde:	3754      	adds	r7, #84	@ 0x54
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005022:	f023 030c 	bic.w	r3, r3, #12
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	430b      	orrs	r3, r1
 800502e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2c      	ldr	r2, [pc, #176]	@ (80050fc <UART_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d103      	bne.n	8005058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7ff f806 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	e002      	b.n	800505e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe ffee 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 800505c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009a      	lsls	r2, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <UART_SetConfig+0x118>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	0119      	lsls	r1, r3, #4
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009a      	lsls	r2, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	fbb2 f2f3 	udiv	r2, r2, r3
 8005094:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <UART_SetConfig+0x118>)
 8005096:	fba3 0302 	umull	r0, r3, r3, r2
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	2064      	movs	r0, #100	@ 0x64
 800509e:	fb00 f303 	mul.w	r3, r0, r3
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	3332      	adds	r3, #50	@ 0x32
 80050a8:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <UART_SetConfig+0x118>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b4:	4419      	add	r1, r3
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009a      	lsls	r2, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <UART_SetConfig+0x118>)
 80050ce:	fba3 0302 	umull	r0, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2064      	movs	r0, #100	@ 0x64
 80050d6:	fb00 f303 	mul.w	r3, r0, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	3332      	adds	r3, #50	@ 0x32
 80050e0:	4a07      	ldr	r2, [pc, #28]	@ (8005100 <UART_SetConfig+0x118>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	440a      	add	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40013800 	.word	0x40013800
 8005100:	51eb851f 	.word	0x51eb851f

08005104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4638      	mov	r0, r7
 800510e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800512e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005132:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005152:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	b29b      	uxth	r3, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	4013      	ands	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	4638      	mov	r0, r7
 80051a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b09d      	sub	sp, #116	@ 0x74
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	78db      	ldrb	r3, [r3, #3]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d81f      	bhi.n	8005242 <USB_ActivateEndpoint+0x72>
 8005202:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <USB_ActivateEndpoint+0x38>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005219 	.word	0x08005219
 800520c:	08005235 	.word	0x08005235
 8005210:	0800524b 	.word	0x0800524b
 8005214:	08005227 	.word	0x08005227
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005218:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800521c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005220:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005224:	e012      	b.n	800524c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005226:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800522a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800522e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005232:	e00b      	b.n	800524c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005238:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800523c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005240:	e004      	b.n	800524c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005248:	e000      	b.n	800524c <USB_ActivateEndpoint+0x7c>
      break;
 800524a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005284:	b29b      	uxth	r3, r3
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	7b1b      	ldrb	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 8178 	bne.w	80055ac <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8084 	beq.w	80053ce <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	4413      	add	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	011a      	lsls	r2, r3, #4
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	88db      	ldrh	r3, [r3, #6]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	827b      	strh	r3, [r7, #18]
 8005308:	8a7b      	ldrh	r3, [r7, #18]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <USB_ActivateEndpoint+0x17a>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005328:	823b      	strh	r3, [r7, #16]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	8a3b      	ldrh	r3, [r7, #16]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005342:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d020      	beq.n	8005394 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005368:	81bb      	strh	r3, [r7, #12]
 800536a:	89bb      	ldrh	r3, [r7, #12]
 800536c:	f083 0320 	eor.w	r3, r3, #32
 8005370:	81bb      	strh	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	89bb      	ldrh	r3, [r7, #12]
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800538a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
 8005392:	e2d5      	b.n	8005940 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053aa:	81fb      	strh	r3, [r7, #14]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	89fb      	ldrh	r3, [r7, #14]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
 80053cc:	e2b8      	b.n	8005940 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	4413      	add	r3, r2
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	88db      	ldrh	r3, [r3, #6]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	4413      	add	r3, r2
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	011a      	lsls	r2, r3, #4
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	4413      	add	r3, r2
 8005420:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005430:	b29a      	uxth	r2, r3
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b3e      	cmp	r3, #62	@ 0x3e
 800543c:	d91d      	bls.n	800547a <USB_ActivateEndpoint+0x2aa>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <USB_ActivateEndpoint+0x288>
 8005452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005454:	3b01      	subs	r3, #1
 8005456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29a      	uxth	r2, r3
 800545e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005472:	b29a      	uxth	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	e026      	b.n	80054c8 <USB_ActivateEndpoint+0x2f8>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <USB_ActivateEndpoint+0x2c8>
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005490:	b29a      	uxth	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e017      	b.n	80054c8 <USB_ActivateEndpoint+0x2f8>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <USB_ActivateEndpoint+0x2e2>
 80054ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ae:	3301      	adds	r3, #1
 80054b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	029b      	lsls	r3, r3, #10
 80054be:	b29b      	uxth	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <USB_ActivateEndpoint+0x348>
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	843b      	strh	r3, [r7, #32]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	8c3b      	ldrh	r3, [r7, #32]
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d124      	bne.n	800556a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005536:	83bb      	strh	r3, [r7, #28]
 8005538:	8bbb      	ldrh	r3, [r7, #28]
 800553a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800553e:	83bb      	strh	r3, [r7, #28]
 8005540:	8bbb      	ldrh	r3, [r7, #28]
 8005542:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005546:	83bb      	strh	r3, [r7, #28]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	8bbb      	ldrh	r3, [r7, #28]
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
 8005568:	e1ea      	b.n	8005940 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005580:	83fb      	strh	r3, [r7, #30]
 8005582:	8bfb      	ldrh	r3, [r7, #30]
 8005584:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005588:	83fb      	strh	r3, [r7, #30]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8bfb      	ldrh	r3, [r7, #30]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
 80055aa:	e1c9      	b.n	8005940 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	78db      	ldrb	r3, [r3, #3]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d11e      	bne.n	80055f2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	441a      	add	r2, r3
 80055d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80055e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8013      	strh	r3, [r2, #0]
 80055f0:	e01d      	b.n	800562e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800561a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800563e:	4413      	add	r3, r2
 8005640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	011a      	lsls	r2, r3, #4
 8005648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800564a:	4413      	add	r3, r2
 800564c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005650:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	891b      	ldrh	r3, [r3, #8]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	657b      	str	r3, [r7, #84]	@ 0x54
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800566c:	b29b      	uxth	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005672:	4413      	add	r3, r2
 8005674:	657b      	str	r3, [r7, #84]	@ 0x54
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	011a      	lsls	r2, r3, #4
 800567c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567e:	4413      	add	r3, r2
 8005680:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005684:	653b      	str	r3, [r7, #80]	@ 0x50
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	895b      	ldrh	r3, [r3, #10]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005694:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 8093 	bne.w	80057c6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80056b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <USB_ActivateEndpoint+0x524>
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005702:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01b      	beq.n	8005744 <USB_ActivateEndpoint+0x574>
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800573c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800575c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800575e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005762:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005764:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005766:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800576a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800577c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800579e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
 80057c4:	e0bc      	b.n	8005940 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01d      	beq.n	800581e <USB_ActivateEndpoint+0x64e>
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800580a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800580e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581a:	b29b      	uxth	r3, r3
 800581c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800582e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01d      	beq.n	8005876 <USB_ActivateEndpoint+0x6a6>
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005850:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800586e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	78db      	ldrb	r3, [r3, #3]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d024      	beq.n	80058c8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005894:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005898:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800589c:	f083 0320 	eor.w	r3, r3, #32
 80058a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
 80058c6:	e01d      	b.n	8005904 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005940:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005944:	4618      	mov	r0, r3
 8005946:	3774      	adds	r7, #116	@ 0x74
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005950:	b480      	push	{r7}
 8005952:	b08d      	sub	sp, #52	@ 0x34
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	7b1b      	ldrb	r3, [r3, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 808e 	bne.w	8005a80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d044      	beq.n	80059f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	81bb      	strh	r3, [r7, #12]
 800597a:	89bb      	ldrh	r3, [r7, #12]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01b      	beq.n	80059bc <USB_DeactivateEndpoint+0x6c>
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599a:	817b      	strh	r3, [r7, #10]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d2:	813b      	strh	r3, [r7, #8]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	441a      	add	r2, r3
 80059de:	893b      	ldrh	r3, [r7, #8]
 80059e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8013      	strh	r3, [r2, #0]
 80059f4:	e192      	b.n	8005d1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	827b      	strh	r3, [r7, #18]
 8005a04:	8a7b      	ldrh	r3, [r7, #18]
 8005a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01b      	beq.n	8005a46 <USB_DeactivateEndpoint+0xf6>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a24:	823b      	strh	r3, [r7, #16]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8a3b      	ldrh	r3, [r7, #16]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5c:	81fb      	strh	r3, [r7, #14]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	89fb      	ldrh	r3, [r7, #14]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]
 8005a7e:	e14d      	b.n	8005d1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 80a5 	bne.w	8005bd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	843b      	strh	r3, [r7, #32]
 8005a98:	8c3b      	ldrh	r3, [r7, #32]
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01b      	beq.n	8005ada <USB_DeactivateEndpoint+0x18a>
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab8:	83fb      	strh	r3, [r7, #30]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	8bfb      	ldrh	r3, [r7, #30]
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	83bb      	strh	r3, [r7, #28]
 8005ae8:	8bbb      	ldrh	r3, [r7, #28]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01b      	beq.n	8005b2a <USB_DeactivateEndpoint+0x1da>
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b08:	837b      	strh	r3, [r7, #26]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	8b7b      	ldrh	r3, [r7, #26]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	833b      	strh	r3, [r7, #24]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	8b3b      	ldrh	r3, [r7, #24]
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b78:	82fb      	strh	r3, [r7, #22]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	8afb      	ldrh	r3, [r7, #22]
 8005b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	82bb      	strh	r3, [r7, #20]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8abb      	ldrh	r3, [r7, #20]
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]
 8005bd2:	e0a3      	b.n	8005d1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005be2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <USB_DeactivateEndpoint+0x2d4>
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <USB_DeactivateEndpoint+0x324>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3734      	adds	r7, #52	@ 0x34
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b0c2      	sub	sp, #264	@ 0x108
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d36:	6018      	str	r0, [r3, #0]
 8005d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d40:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	f040 86b7 	bne.w	8006ac2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d80:	e007      	b.n	8005d92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	7b1b      	ldrb	r3, [r3, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d13a      	bne.n	8005e18 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	88da      	ldrh	r2, [r3, #6]
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dc8:	6800      	ldr	r0, [r0, #0]
 8005dca:	f001 fc9c 	bl	8007706 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	f000 be1f 	b.w	8006a56 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	f040 8462 	bne.w	80066ee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	f240 83df 	bls.w	8006606 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e98:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 81c7 	beq.w	8006278 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d177      	bne.n	8005ff6 <USB_EPStartXfer+0x2ce>
 8005f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	4413      	add	r3, r2
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	011a      	lsls	r2, r3, #4
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f58:	d921      	bls.n	8005f9e <USB_EPStartXfer+0x276>
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <USB_EPStartXfer+0x252>
 8005f70:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f74:	3b01      	subs	r3, #1
 8005f76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	029b      	lsls	r3, r3, #10
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e050      	b.n	8006040 <USB_EPStartXfer+0x318>
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <USB_EPStartXfer+0x294>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e041      	b.n	8006040 <USB_EPStartXfer+0x318>
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <USB_EPStartXfer+0x2b4>
 8005fd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4313      	orrs	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e024      	b.n	8006040 <USB_EPStartXfer+0x318>
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d11c      	bne.n	8006040 <USB_EPStartXfer+0x318>
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	4413      	add	r3, r2
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	011a      	lsls	r2, r3, #4
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	4413      	add	r3, r2
 8006030:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603a:	b29a      	uxth	r2, r3
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	895b      	ldrh	r3, [r3, #10]
 800604c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6959      	ldr	r1, [r3, #20]
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	b29b      	uxth	r3, r3
 8006062:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006066:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800606a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800606e:	6800      	ldr	r0, [r0, #0]
 8006070:	f001 fb49 	bl	8007706 <USB_WritePMA>
            ep->xfer_buff += len;
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	441a      	add	r2, r3
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d90f      	bls.n	80060ce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80060ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	621a      	str	r2, [r3, #32]
 80060cc:	e00e      	b.n	80060ec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2200      	movs	r2, #0
 80060ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d177      	bne.n	80061ec <USB_EPStartXfer+0x4c4>
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	4413      	add	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	011a      	lsls	r2, r3, #4
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	4413      	add	r3, r2
 8006132:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006142:	b29a      	uxth	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	2b3e      	cmp	r3, #62	@ 0x3e
 800614e:	d921      	bls.n	8006194 <USB_EPStartXfer+0x46c>
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <USB_EPStartXfer+0x448>
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616a:	3b01      	subs	r3, #1
 800616c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29a      	uxth	r2, r3
 8006176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618c:	b29a      	uxth	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e056      	b.n	8006242 <USB_EPStartXfer+0x51a>
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <USB_EPStartXfer+0x48a>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e047      	b.n	8006242 <USB_EPStartXfer+0x51a>
 80061b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <USB_EPStartXfer+0x4aa>
 80061c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061cc:	3301      	adds	r3, #1
 80061ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e02a      	b.n	8006242 <USB_EPStartXfer+0x51a>
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d122      	bne.n	8006242 <USB_EPStartXfer+0x51a>
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	4413      	add	r3, r2
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	011a      	lsls	r2, r3, #4
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	4413      	add	r3, r2
 8006232:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623c:	b29a      	uxth	r2, r3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	891b      	ldrh	r3, [r3, #8]
 800624e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006262:	b29b      	uxth	r3, r3
 8006264:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006268:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800626c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f001 fa48 	bl	8007706 <USB_WritePMA>
 8006276:	e3ee      	b.n	8006a56 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d177      	bne.n	8006378 <USB_EPStartXfer+0x650>
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a8:	4413      	add	r3, r2
 80062aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	011a      	lsls	r2, r3, #4
 80062ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80062da:	d921      	bls.n	8006320 <USB_EPStartXfer+0x5f8>
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <USB_EPStartXfer+0x5d4>
 80062f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062f6:	3b01      	subs	r3, #1
 80062f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006318:	b29a      	uxth	r2, r3
 800631a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e056      	b.n	80063ce <USB_EPStartXfer+0x6a6>
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <USB_EPStartXfer+0x616>
 8006328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006336:	b29a      	uxth	r2, r3
 8006338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	e047      	b.n	80063ce <USB_EPStartXfer+0x6a6>
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <USB_EPStartXfer+0x636>
 8006354:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006358:	3301      	adds	r3, #1
 800635a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800635e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006368:	b29b      	uxth	r3, r3
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	b29b      	uxth	r3, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	b29a      	uxth	r2, r3
 8006372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e02a      	b.n	80063ce <USB_EPStartXfer+0x6a6>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d122      	bne.n	80063ce <USB_EPStartXfer+0x6a6>
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	653b      	str	r3, [r7, #80]	@ 0x50
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a8:	4413      	add	r3, r2
 80063aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	011a      	lsls	r2, r3, #4
 80063ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063bc:	4413      	add	r3, r2
 80063be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	891b      	ldrh	r3, [r3, #8]
 80063da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f001 f982 	bl	8007706 <USB_WritePMA>
            ep->xfer_buff += len;
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006412:	441a      	add	r2, r3
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d90f      	bls.n	800645c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644c:	1ad2      	subs	r2, r2, r3
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	621a      	str	r2, [r3, #32]
 800645a:	e00e      	b.n	800647a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	643b      	str	r3, [r7, #64]	@ 0x40
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d177      	bne.n	8006586 <USB_EPStartXfer+0x85e>
 8006496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	4413      	add	r3, r2
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	011a      	lsls	r2, r3, #4
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	4413      	add	r3, r2
 80064cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e8:	d921      	bls.n	800652e <USB_EPStartXfer+0x806>
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <USB_EPStartXfer+0x7e2>
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	3b01      	subs	r3, #1
 8006506:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800650a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e050      	b.n	80065d0 <USB_EPStartXfer+0x8a8>
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USB_EPStartXfer+0x824>
 8006536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29a      	uxth	r2, r3
 8006546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e041      	b.n	80065d0 <USB_EPStartXfer+0x8a8>
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <USB_EPStartXfer+0x844>
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	3301      	adds	r3, #1
 8006568:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29b      	uxth	r3, r3
 800657c:	4313      	orrs	r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e024      	b.n	80065d0 <USB_EPStartXfer+0x8a8>
 8006586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d11c      	bne.n	80065d0 <USB_EPStartXfer+0x8a8>
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065aa:	4413      	add	r3, r2
 80065ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	011a      	lsls	r2, r3, #4
 80065bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065be:	4413      	add	r3, r2
 80065c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	895b      	ldrh	r3, [r3, #10]
 80065dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6959      	ldr	r1, [r3, #20]
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065f6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065fa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065fe:	6800      	ldr	r0, [r0, #0]
 8006600:	f001 f881 	bl	8007706 <USB_WritePMA>
 8006604:	e227      	b.n	8006a56 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	441a      	add	r2, r3
 800665a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800665e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668c:	b29b      	uxth	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006692:	4413      	add	r3, r2
 8006694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	011a      	lsls	r2, r3, #4
 80066a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	891b      	ldrh	r3, [r3, #8]
 80066c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066e6:	6800      	ldr	r0, [r0, #0]
 80066e8:	f001 f80d 	bl	8007706 <USB_WritePMA>
 80066ec:	e1b3      	b.n	8006a56 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80c6 	beq.w	80068c0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d177      	bne.n	8006840 <USB_EPStartXfer+0xb18>
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006770:	4413      	add	r3, r2
 8006772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006784:	4413      	add	r3, r2
 8006786:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800678a:	667b      	str	r3, [r7, #100]	@ 0x64
 800678c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006796:	b29a      	uxth	r2, r3
 8006798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80067a2:	d921      	bls.n	80067e8 <USB_EPStartXfer+0xac0>
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <USB_EPStartXfer+0xa9c>
 80067ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067be:	3b01      	subs	r3, #1
 80067c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	4313      	orrs	r3, r2
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e050      	b.n	800688a <USB_EPStartXfer+0xb62>
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <USB_EPStartXfer+0xade>
 80067f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fe:	b29a      	uxth	r2, r3
 8006800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e041      	b.n	800688a <USB_EPStartXfer+0xb62>
 8006806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <USB_EPStartXfer+0xafe>
 800681c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006820:	3301      	adds	r3, #1
 8006822:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29a      	uxth	r2, r3
 800682c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006830:	b29b      	uxth	r3, r3
 8006832:	029b      	lsls	r3, r3, #10
 8006834:	b29b      	uxth	r3, r3
 8006836:	4313      	orrs	r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	e024      	b.n	800688a <USB_EPStartXfer+0xb62>
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d11c      	bne.n	800688a <USB_EPStartXfer+0xb62>
 8006850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006864:	4413      	add	r3, r2
 8006866:	673b      	str	r3, [r7, #112]	@ 0x70
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006878:	4413      	add	r3, r2
 800687a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800687e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	b29a      	uxth	r2, r3
 8006886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006888:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	895b      	ldrh	r3, [r3, #10]
 8006896:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6959      	ldr	r1, [r3, #20]
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068b8:	6800      	ldr	r0, [r0, #0]
 80068ba:	f000 ff24 	bl	8007706 <USB_WritePMA>
 80068be:	e0ca      	b.n	8006a56 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d177      	bne.n	80069c0 <USB_EPStartXfer+0xc98>
 80068d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f0:	4413      	add	r3, r2
 80068f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	011a      	lsls	r2, r3, #4
 8006902:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006904:	4413      	add	r3, r2
 8006906:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800690a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006916:	b29a      	uxth	r2, r3
 8006918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	2b3e      	cmp	r3, #62	@ 0x3e
 8006922:	d921      	bls.n	8006968 <USB_EPStartXfer+0xc40>
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <USB_EPStartXfer+0xc1c>
 800693a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800693e:	3b01      	subs	r3, #1
 8006940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29a      	uxth	r2, r3
 800694a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800694e:	b29b      	uxth	r3, r3
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	b29b      	uxth	r3, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006960:	b29a      	uxth	r2, r3
 8006962:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	e05c      	b.n	8006a22 <USB_EPStartXfer+0xcfa>
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <USB_EPStartXfer+0xc5e>
 8006970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697e:	b29a      	uxth	r2, r3
 8006980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	e04d      	b.n	8006a22 <USB_EPStartXfer+0xcfa>
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <USB_EPStartXfer+0xc7e>
 800699c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069a0:	3301      	adds	r3, #1
 80069a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e030      	b.n	8006a22 <USB_EPStartXfer+0xcfa>
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d128      	bne.n	8006a22 <USB_EPStartXfer+0xcfa>
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069f4:	4413      	add	r3, r2
 80069f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	011a      	lsls	r2, r3, #4
 8006a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	891b      	ldrh	r3, [r3, #8]
 8006a2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6959      	ldr	r1, [r3, #20]
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a50:	6800      	ldr	r0, [r0, #0]
 8006a52:	f000 fe58 	bl	8007706 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	897b      	ldrh	r3, [r7, #10]
 8006a80:	f083 0310 	eor.w	r3, r3, #16
 8006a84:	817b      	strh	r3, [r7, #10]
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	f083 0320 	eor.w	r3, r3, #32
 8006a8c:	817b      	strh	r3, [r7, #10]
 8006a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	897b      	ldrh	r3, [r7, #10]
 8006aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	8013      	strh	r3, [r2, #0]
 8006abe:	f000 bcde 	b.w	800747e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	7b1b      	ldrb	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 80bb 	bne.w	8006c4a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d917      	bls.n	8006b20 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	1ad2      	subs	r2, r2, r3
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	619a      	str	r2, [r3, #24]
 8006b1e:	e00e      	b.n	8006b3e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b62:	4413      	add	r3, r2
 8006b64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	011a      	lsls	r2, r3, #4
 8006b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b9e:	d924      	bls.n	8006bea <USB_EPStartXfer+0xec2>
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <USB_EPStartXfer+0xe98>
 8006bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	029b      	lsls	r3, r3, #10
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	f000 bc10 	b.w	800740a <USB_EPStartXfer+0x16e2>
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10c      	bne.n	8006c0c <USB_EPStartXfer+0xee4>
 8006bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	e3fe      	b.n	800740a <USB_EPStartXfer+0x16e2>
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <USB_EPStartXfer+0xf04>
 8006c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c26:	3301      	adds	r3, #1
 8006c28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e3df      	b.n	800740a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	78db      	ldrb	r3, [r3, #3]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	f040 8218 	bne.w	800708c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 809d 	bne.w	8006da8 <USB_EPStartXfer+0x1080>
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c92:	4413      	add	r3, r2
 8006c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	011a      	lsls	r2, r3, #4
 8006ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cd6:	d92b      	bls.n	8006d30 <USB_EPStartXfer+0x1008>
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <USB_EPStartXfer+0xfe0>
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	3b01      	subs	r3, #1
 8006d04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	029b      	lsls	r3, r3, #10
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e070      	b.n	8006e12 <USB_EPStartXfer+0x10ea>
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10c      	bne.n	8006d5a <USB_EPStartXfer+0x1032>
 8006d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e05b      	b.n	8006e12 <USB_EPStartXfer+0x10ea>
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <USB_EPStartXfer+0x1062>
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	029b      	lsls	r3, r3, #10
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	e034      	b.n	8006e12 <USB_EPStartXfer+0x10ea>
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d12c      	bne.n	8006e12 <USB_EPStartXfer+0x10ea>
 8006db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ddc:	4413      	add	r3, r2
 8006dde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	011a      	lsls	r2, r3, #4
 8006df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 809d 	bne.w	8006f6c <USB_EPStartXfer+0x1244>
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e56:	4413      	add	r3, r2
 8006e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	011a      	lsls	r2, r3, #4
 8006e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e9a:	d92b      	bls.n	8006ef4 <USB_EPStartXfer+0x11cc>
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USB_EPStartXfer+0x11a4>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e069      	b.n	8006fc8 <USB_EPStartXfer+0x12a0>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <USB_EPStartXfer+0x11f6>
 8006f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e054      	b.n	8006fc8 <USB_EPStartXfer+0x12a0>
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <USB_EPStartXfer+0x1226>
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	029b      	lsls	r3, r3, #10
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4313      	orrs	r3, r2
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	e02d      	b.n	8006fc8 <USB_EPStartXfer+0x12a0>
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d125      	bne.n	8006fc8 <USB_EPStartXfer+0x12a0>
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f92:	4413      	add	r3, r2
 8006f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	011a      	lsls	r2, r3, #4
 8006fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006faa:	4413      	add	r3, r2
 8006fac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fc6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8218 	beq.w	800740a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ffa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <USB_EPStartXfer+0x12ea>
 8007006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007012:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 81f5 	bne.w	800740a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007020:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 81ee 	bne.w	800740a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007054:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007082:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
 800708a:	e1be      	b.n	800740a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800708c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	78db      	ldrb	r3, [r3, #3]
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 81b4 	bne.w	8007406 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d917      	bls.n	80070ea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	619a      	str	r2, [r3, #24]
 80070e8:	e00e      	b.n	8007108 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f040 8085 	bne.w	8007224 <USB_EPStartXfer+0x14fc>
 800711a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800713e:	4413      	add	r3, r2
 8007140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007156:	4413      	add	r3, r2
 8007158:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800715c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	2b3e      	cmp	r3, #62	@ 0x3e
 800717a:	d923      	bls.n	80071c4 <USB_EPStartXfer+0x149c>
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <USB_EPStartXfer+0x1474>
 8007192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007196:	3b01      	subs	r3, #1
 8007198:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800719c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	029b      	lsls	r3, r3, #10
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e060      	b.n	8007286 <USB_EPStartXfer+0x155e>
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <USB_EPStartXfer+0x14be>
 80071cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	e04f      	b.n	8007286 <USB_EPStartXfer+0x155e>
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <USB_EPStartXfer+0x14de>
 80071fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007212:	b29b      	uxth	r3, r3
 8007214:	029b      	lsls	r3, r3, #10
 8007216:	b29b      	uxth	r3, r3
 8007218:	4313      	orrs	r3, r2
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	e030      	b.n	8007286 <USB_EPStartXfer+0x155e>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d128      	bne.n	8007286 <USB_EPStartXfer+0x155e>
 8007234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007258:	4413      	add	r3, r2
 800725a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	011a      	lsls	r2, r3, #4
 800726c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007270:	4413      	add	r3, r2
 8007272:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007276:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 8085 	bne.w	80073b0 <USB_EPStartXfer+0x1688>
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072ca:	4413      	add	r3, r2
 80072cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	011a      	lsls	r2, r3, #4
 80072de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072e2:	4413      	add	r3, r2
 80072e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007304:	2b3e      	cmp	r3, #62	@ 0x3e
 8007306:	d923      	bls.n	8007350 <USB_EPStartXfer+0x1628>
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	2b00      	cmp	r3, #0
 800731c:	d104      	bne.n	8007328 <USB_EPStartXfer+0x1600>
 800731e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007322:	3b01      	subs	r3, #1
 8007324:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007334:	b29b      	uxth	r3, r3
 8007336:	029b      	lsls	r3, r3, #10
 8007338:	b29b      	uxth	r3, r3
 800733a:	4313      	orrs	r3, r2
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e05c      	b.n	800740a <USB_EPStartXfer+0x16e2>
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10c      	bne.n	8007372 <USB_EPStartXfer+0x164a>
 8007358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e04b      	b.n	800740a <USB_EPStartXfer+0x16e2>
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <USB_EPStartXfer+0x166a>
 8007388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800738c:	3301      	adds	r3, #1
 800738e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e02c      	b.n	800740a <USB_EPStartXfer+0x16e2>
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d124      	bne.n	800740a <USB_EPStartXfer+0x16e2>
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073d6:	4413      	add	r3, r2
 80073d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e001      	b.n	800740a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e03a      	b.n	8007480 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800742c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007430:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007438:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800743c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007444:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007448:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d020      	beq.n	80074de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b2:	81bb      	strh	r3, [r7, #12]
 80074b4:	89bb      	ldrh	r3, [r7, #12]
 80074b6:	f083 0310 	eor.w	r3, r3, #16
 80074ba:	81bb      	strh	r3, [r7, #12]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	89bb      	ldrh	r3, [r7, #12]
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
 80074dc:	e01f      	b.n	800751e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f4:	81fb      	strh	r3, [r7, #14]
 80074f6:	89fb      	ldrh	r3, [r7, #14]
 80074f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074fc:	81fb      	strh	r3, [r7, #14]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	441a      	add	r2, r3
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800750e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	7b1b      	ldrb	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 809d 	bne.w	8007678 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d04c      	beq.n	80075e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	823b      	strh	r3, [r7, #16]
 8007554:	8a3b      	ldrh	r3, [r7, #16]
 8007556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01b      	beq.n	8007596 <USB_EPClearStall+0x6c>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007574:	81fb      	strh	r3, [r7, #14]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	89fb      	ldrh	r3, [r7, #14]
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800758a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800758e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d06c      	beq.n	8007678 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b4:	81bb      	strh	r3, [r7, #12]
 80075b6:	89bb      	ldrh	r3, [r7, #12]
 80075b8:	f083 0320 	eor.w	r3, r3, #32
 80075bc:	81bb      	strh	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	89bb      	ldrh	r3, [r7, #12]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
 80075de:	e04b      	b.n	8007678 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	82fb      	strh	r3, [r7, #22]
 80075ee:	8afb      	ldrh	r3, [r7, #22]
 80075f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01b      	beq.n	8007630 <USB_EPClearStall+0x106>
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800760a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760e:	82bb      	strh	r3, [r7, #20]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	8abb      	ldrh	r3, [r7, #20]
 800761c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800762c:	b29b      	uxth	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007646:	827b      	strh	r3, [r7, #18]
 8007648:	8a7b      	ldrh	r3, [r7, #18]
 800764a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800764e:	827b      	strh	r3, [r7, #18]
 8007650:	8a7b      	ldrh	r3, [r7, #18]
 8007652:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007656:	827b      	strh	r3, [r7, #18]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	8a7b      	ldrh	r3, [r7, #18]
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr

08007684 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d103      	bne.n	800769e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2280      	movs	r2, #128	@ 0x80
 800769a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr

080076aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr

080076d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076e4:	68fb      	ldr	r3, [r7, #12]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr

08007706 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007706:	b480      	push	{r7}
 8007708:	b08b      	sub	sp, #44	@ 0x2c
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	4611      	mov	r1, r2
 8007712:	461a      	mov	r2, r3
 8007714:	460b      	mov	r3, r1
 8007716:	80fb      	strh	r3, [r7, #6]
 8007718:	4613      	mov	r3, r2
 800771a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800771c:	88bb      	ldrh	r3, [r7, #4]
 800771e:	3301      	adds	r3, #1
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	005a      	lsls	r2, r3, #1
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007738:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	627b      	str	r3, [r7, #36]	@ 0x24
 800773e:	e01e      	b.n	800777e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	3301      	adds	r3, #1
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b21a      	sxth	r2, r3
 8007750:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007754:	4313      	orrs	r3, r2
 8007756:	b21b      	sxth	r3, r3
 8007758:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	8a7a      	ldrh	r2, [r7, #18]
 800775e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	3302      	adds	r3, #2
 8007764:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	3302      	adds	r3, #2
 800776a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	3b01      	subs	r3, #1
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1dd      	bne.n	8007740 <USB_WritePMA+0x3a>
  }
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	372c      	adds	r7, #44	@ 0x2c
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007790:	b480      	push	{r7}
 8007792:	b08b      	sub	sp, #44	@ 0x2c
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4611      	mov	r1, r2
 800779c:	461a      	mov	r2, r3
 800779e:	460b      	mov	r3, r1
 80077a0:	80fb      	strh	r3, [r7, #6]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077a6:	88bb      	ldrh	r3, [r7, #4]
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	005a      	lsls	r2, r3, #1
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c8:	e01b      	b.n	8007802 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	3302      	adds	r3, #2
 80077d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	3301      	adds	r3, #1
 80077e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	3301      	adds	r3, #1
 80077f4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	3302      	adds	r3, #2
 80077fa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	3b01      	subs	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e0      	bne.n	80077ca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007808:	88bb      	ldrh	r3, [r7, #4]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	701a      	strb	r2, [r3, #0]
  }
}
 8007824:	bf00      	nop
 8007826:	372c      	adds	r7, #44	@ 0x2c
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr
	...

08007830 <__NVIC_SetPriority>:
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800783c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007840:	2b00      	cmp	r3, #0
 8007842:	db0a      	blt.n	800785a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	490c      	ldr	r1, [pc, #48]	@ (800787c <__NVIC_SetPriority+0x4c>)
 800784a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784e:	0112      	lsls	r2, r2, #4
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	440b      	add	r3, r1
 8007854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007858:	e00a      	b.n	8007870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4908      	ldr	r1, [pc, #32]	@ (8007880 <__NVIC_SetPriority+0x50>)
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	3b04      	subs	r3, #4
 8007868:	0112      	lsls	r2, r2, #4
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	440b      	add	r3, r1
 800786e:	761a      	strb	r2, [r3, #24]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e100 	.word	0xe000e100
 8007880:	e000ed00 	.word	0xe000ed00

08007884 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007888:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <SysTick_Handler+0x1c>)
 800788a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800788c:	f002 ff52 	bl	800a734 <xTaskGetSchedulerState>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d001      	beq.n	800789a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007896:	f001 f9df 	bl	8008c58 <xPortSysTickHandler>
  }
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	e000e010 	.word	0xe000e010

080078a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078a8:	2100      	movs	r1, #0
 80078aa:	f06f 0004 	mvn.w	r0, #4
 80078ae:	f7ff ffbf 	bl	8007830 <__NVIC_SetPriority>
#endif
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078be:	f3ef 8305 	mrs	r3, IPSR
 80078c2:	603b      	str	r3, [r7, #0]
  return(result);
 80078c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078ca:	f06f 0305 	mvn.w	r3, #5
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e00c      	b.n	80078ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078d2:	4b09      	ldr	r3, [pc, #36]	@ (80078f8 <osKernelInitialize+0x40>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078da:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <osKernelInitialize+0x40>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	607b      	str	r3, [r7, #4]
 80078e4:	e002      	b.n	80078ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078ec:	687b      	ldr	r3, [r7, #4]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr
 80078f8:	20000354 	.word	0x20000354

080078fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007902:	f3ef 8305 	mrs	r3, IPSR
 8007906:	603b      	str	r3, [r7, #0]
  return(result);
 8007908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <osKernelStart+0x1a>
    stat = osErrorISR;
 800790e:	f06f 0305 	mvn.w	r3, #5
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e010      	b.n	8007938 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <osKernelStart+0x48>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d109      	bne.n	8007932 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800791e:	f7ff ffc1 	bl	80078a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007922:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <osKernelStart+0x48>)
 8007924:	2202      	movs	r2, #2
 8007926:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007928:	f002 fa02 	bl	8009d30 <vTaskStartScheduler>
      stat = osOK;
 800792c:	2300      	movs	r3, #0
 800792e:	607b      	str	r3, [r7, #4]
 8007930:	e002      	b.n	8007938 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295
 8007936:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007938:	687b      	ldr	r3, [r7, #4]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000354 	.word	0x20000354

08007948 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 800794e:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <OS_Tick_GetCount+0x20>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8007954:	4b04      	ldr	r3, [pc, #16]	@ (8007968 <OS_Tick_GetCount+0x20>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	1ad3      	subs	r3, r2, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	e000e010 	.word	0xe000e010

0800796c <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8007970:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <OS_Tick_GetOverflow+0x18>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	f003 0301 	and.w	r3, r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e010 	.word	0xe000e010

08007988 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 800798c:	4b03      	ldr	r3, [pc, #12]	@ (800799c <OS_Tick_GetInterval+0x14>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	3301      	adds	r3, #1
}
 8007992:	4618      	mov	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	bc80      	pop	{r7}
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	e000e010 	.word	0xe000e010

080079a0 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a6:	f3ef 8310 	mrs	r3, PRIMASK
 80079aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ac:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079b2:	f3ef 8311 	mrs	r3, BASEPRI
 80079b6:	607b      	str	r3, [r7, #4]
  return(result);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <osKernelGetSysTimerCount+0x22>
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <osKernelGetSysTimerCount+0x24>
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80079c6:	b672      	cpsid	i
}
 80079c8:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 80079ca:	f002 facd 	bl	8009f68 <xTaskGetTickCount>
 80079ce:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 80079d0:	f7ff ffba 	bl	8007948 <OS_Tick_GetCount>
 80079d4:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 80079d6:	f7ff ffc9 	bl	800796c <OS_Tick_GetOverflow>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 80079e0:	f7ff ffb2 	bl	8007948 <OS_Tick_GetCount>
 80079e4:	6138      	str	r0, [r7, #16]
    ticks++;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	3301      	adds	r3, #1
 80079ea:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 80079ec:	f7ff ffcc 	bl	8007988 <OS_Tick_GetInterval>
 80079f0:	4602      	mov	r2, r0
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8007a04:	b662      	cpsie	i
}
 8007a06:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8007a08:	693b      	ldr	r3, [r7, #16]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <osKernelGetSysTimerFreq>:

uint32_t osKernelGetSysTimerFreq (void) {
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 8007a18:	4b02      	ldr	r3, [pc, #8]	@ (8007a24 <osKernelGetSysTimerFreq+0x10>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr
 8007a24:	20000000 	.word	0x20000000

08007a28 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	@ 0x38
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d17e      	bne.n	8007b42 <osThreadNew+0x11a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d07b      	beq.n	8007b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a4a:	2380      	movs	r3, #128	@ 0x80
 8007a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a4e:	2318      	movs	r3, #24
 8007a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d045      	beq.n	8007aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <osThreadNew+0x48>
        name = attr->name;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <osThreadNew+0x6e>
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b38      	cmp	r3, #56	@ 0x38
 8007a88:	d805      	bhi.n	8007a96 <osThreadNew+0x6e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <osThreadNew+0x72>
        return (NULL);
 8007a96:	2300      	movs	r3, #0
 8007a98:	e054      	b.n	8007b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <osThreadNew+0xa8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ab8:	d90a      	bls.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <osThreadNew+0xa8>
        mem = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e010      	b.n	8007af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <osThreadNew+0xca>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <osThreadNew+0xca>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <osThreadNew+0xca>
          mem = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	e001      	b.n	8007af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d110      	bne.n	8007b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b00:	9202      	str	r2, [sp, #8]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 ff1a 	bl	8009948 <xTaskCreateStatic>
 8007b14:	4603      	mov	r3, r0
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e013      	b.n	8007b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f107 0310 	add.w	r3, r7, #16
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 ff68 	bl	8009a08 <xTaskCreate>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <osThreadNew+0x11a>
            hTask = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b42:	693b      	ldr	r3, [r7, #16]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	@ 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b54:	f3ef 8305 	mrs	r3, IPSR
 8007b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <osDelay+0x1c>
    stat = osErrorISR;
 8007b60:	f06f 0305 	mvn.w	r3, #5
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e007      	b.n	8007b78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f002 f8a6 	bl	8009cc4 <vTaskDelay>
    }
  }

  return (stat);
 8007b78:	68fb      	ldr	r3, [r7, #12]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b086      	sub	sp, #24
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8e:	f3ef 8305 	mrs	r3, IPSR
 8007b92:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b94:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12d      	bne.n	8007bf6 <osEventFlagsNew+0x74>
    mem = -1;
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d015      	beq.n	8007bd2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <osEventFlagsNew+0x3a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b1f      	cmp	r3, #31
 8007bb4:	d902      	bls.n	8007bbc <osEventFlagsNew+0x3a>
        mem = 1;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	e00c      	b.n	8007bd6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <osEventFlagsNew+0x54>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <osEventFlagsNew+0x54>
          mem = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	e001      	b.n	8007bd6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d106      	bne.n	8007bea <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fa37 	bl	8008054 <xEventGroupCreateStatic>
 8007be6:	6178      	str	r0, [r7, #20]
 8007be8:	e005      	b.n	8007bf6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007bf0:	f000 fa69 	bl	80080c6 <xEventGroupCreate>
 8007bf4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007bf6:	697b      	ldr	r3, [r7, #20]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <osEventFlagsSet+0x1c>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c1a:	d303      	bcc.n	8007c24 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007c1c:	f06f 0303 	mvn.w	r3, #3
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e028      	b.n	8007c76 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c24:	f3ef 8305 	mrs	r3, IPSR
 8007c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01d      	beq.n	8007c6c <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007c34:	f107 0308 	add.w	r3, r7, #8
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6938      	ldr	r0, [r7, #16]
 8007c3e:	f000 fbe9 	bl	8008414 <xEventGroupSetBitsFromISR>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007c48:	f06f 0302 	mvn.w	r3, #2
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e012      	b.n	8007c76 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00d      	beq.n	8007c76 <osEventFlagsSet+0x76>
 8007c5a:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <osEventFlagsSet+0x80>)
 8007c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	e004      	b.n	8007c76 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6938      	ldr	r0, [r7, #16]
 8007c70:	f000 fb16 	bl	80082a0 <xEventGroupSetBits>
 8007c74:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007c76:	697b      	ldr	r3, [r7, #20]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08c      	sub	sp, #48	@ 0x30
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <osEventFlagsWait+0x20>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ca2:	d303      	bcc.n	8007cac <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007ca4:	f06f 0303 	mvn.w	r3, #3
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	e04b      	b.n	8007d44 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cac:	f3ef 8305 	mrs	r3, IPSR
 8007cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8007cb2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007cb8:	f06f 0305 	mvn.w	r3, #5
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	e041      	b.n	8007d44 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cce:	e001      	b.n	8007cd4 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	623b      	str	r3, [r7, #32]
 8007ce2:	e001      	b.n	8007ce8 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	69b8      	ldr	r0, [r7, #24]
 8007cf4:	f000 fa02 	bl	80080fc <xEventGroupWaitBits>
 8007cf8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d010      	beq.n	8007d26 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d019      	beq.n	8007d44 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007d16:	f06f 0301 	mvn.w	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	e012      	b.n	8007d44 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007d1e:	f06f 0302 	mvn.w	r3, #2
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e00e      	b.n	8007d44 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007d36:	f06f 0301 	mvn.w	r3, #1
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	e002      	b.n	8007d44 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007d3e:	f06f 0302 	mvn.w	r3, #2
 8007d42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007d44:	69fb      	ldr	r3, [r7, #28]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	@ 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08a      	sub	sp, #40	@ 0x28
 8007d52:	af02      	add	r7, sp, #8
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5e:	f3ef 8305 	mrs	r3, IPSR
 8007d62:	613b      	str	r3, [r7, #16]
  return(result);
 8007d64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d15f      	bne.n	8007e2a <osMessageQueueNew+0xdc>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d05c      	beq.n	8007e2a <osMessageQueueNew+0xdc>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d059      	beq.n	8007e2a <osMessageQueueNew+0xdc>
    mem = -1;
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d029      	beq.n	8007dd6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d012      	beq.n	8007db0 <osMessageQueueNew+0x62>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007d90:	d90e      	bls.n	8007db0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	fb01 f303 	mul.w	r3, r1, r3
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <osMessageQueueNew+0x62>
        mem = 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	e014      	b.n	8007dda <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d110      	bne.n	8007dda <osMessageQueueNew+0x8c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d108      	bne.n	8007dda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <osMessageQueueNew+0x8c>
          mem = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	e001      	b.n	8007dda <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10b      	bne.n	8007df8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2100      	movs	r1, #0
 8007dea:	9100      	str	r1, [sp, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 f820 	bl	8008e34 <xQueueGenericCreateStatic>
 8007df4:	61f8      	str	r0, [r7, #28]
 8007df6:	e008      	b.n	8007e0a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 f893 	bl	8008f2e <xQueueGenericCreate>
 8007e08:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00c      	beq.n	8007e2a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e001      	b.n	8007e22 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e22:	6979      	ldr	r1, [r7, #20]
 8007e24:	69f8      	ldr	r0, [r7, #28]
 8007e26:	f001 fd33 	bl	8009890 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e2a:	69fb      	ldr	r3, [r7, #28]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3720      	adds	r7, #32
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e4c:	f3ef 8305 	mrs	r3, IPSR
 8007e50:	617b      	str	r3, [r7, #20]
  return(result);
 8007e52:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d028      	beq.n	8007eaa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <osMessageQueuePut+0x36>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <osMessageQueuePut+0x36>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007e6a:	f06f 0303 	mvn.w	r3, #3
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e038      	b.n	8007ee4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e76:	f107 0210 	add.w	r2, r7, #16
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	69b8      	ldr	r0, [r7, #24]
 8007e80:	f001 f9b6 	bl	80091f0 <xQueueGenericSendFromISR>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d003      	beq.n	8007e92 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007e8a:	f06f 0302 	mvn.w	r3, #2
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e028      	b.n	8007ee4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d025      	beq.n	8007ee4 <osMessageQueuePut+0xb0>
 8007e98:	4b15      	ldr	r3, [pc, #84]	@ (8007ef0 <osMessageQueuePut+0xbc>)
 8007e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	e01c      	b.n	8007ee4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <osMessageQueuePut+0x82>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007eb6:	f06f 0303 	mvn.w	r3, #3
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e012      	b.n	8007ee4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	69b8      	ldr	r0, [r7, #24]
 8007ec6:	f001 f891 	bl	8008fec <xQueueGenericSend>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d009      	beq.n	8007ee4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007ed6:	f06f 0301 	mvn.w	r3, #1
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e002      	b.n	8007ee4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007ede:	f06f 0302 	mvn.w	r3, #2
 8007ee2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007ee4:	69fb      	ldr	r3, [r7, #28]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f0a:	f3ef 8305 	mrs	r3, IPSR
 8007f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f10:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d028      	beq.n	8007f68 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <osMessageQueueGet+0x34>
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <osMessageQueueGet+0x34>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007f28:	f06f 0303 	mvn.w	r3, #3
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e037      	b.n	8007fa0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	69b8      	ldr	r0, [r7, #24]
 8007f3e:	f001 fad7 	bl	80094f0 <xQueueReceiveFromISR>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d003      	beq.n	8007f50 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007f48:	f06f 0302 	mvn.w	r3, #2
 8007f4c:	61fb      	str	r3, [r7, #28]
 8007f4e:	e027      	b.n	8007fa0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d024      	beq.n	8007fa0 <osMessageQueueGet+0xac>
 8007f56:	4b15      	ldr	r3, [pc, #84]	@ (8007fac <osMessageQueueGet+0xb8>)
 8007f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	e01b      	b.n	8007fa0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <osMessageQueueGet+0x80>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007f74:	f06f 0303 	mvn.w	r3, #3
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	e011      	b.n	8007fa0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	69b8      	ldr	r0, [r7, #24]
 8007f82:	f001 f9d3 	bl	800932c <xQueueReceive>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d009      	beq.n	8007fa0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007f92:	f06f 0301 	mvn.w	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e002      	b.n	8007fa0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007f9a:	f06f 0302 	mvn.w	r3, #2
 8007f9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	e00e      	b.n	8007fe6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc8:	f3ef 8305 	mrs	r3, IPSR
 8007fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007fd4:	6938      	ldr	r0, [r7, #16]
 8007fd6:	f001 fb2c 	bl	8009632 <uxQueueMessagesWaitingFromISR>
 8007fda:	6178      	str	r0, [r7, #20]
 8007fdc:	e003      	b.n	8007fe6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007fde:	6938      	ldr	r0, [r7, #16]
 8007fe0:	f001 fb08 	bl	80095f4 <uxQueueMessagesWaiting>
 8007fe4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8007fe6:	697b      	ldr	r3, [r7, #20]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a06      	ldr	r2, [pc, #24]	@ (8008018 <vApplicationGetIdleTaskMemory+0x28>)
 8008000:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a05      	ldr	r2, [pc, #20]	@ (800801c <vApplicationGetIdleTaskMemory+0x2c>)
 8008006:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2280      	movs	r2, #128	@ 0x80
 800800c:	601a      	str	r2, [r3, #0]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr
 8008018:	20000358 	.word	0x20000358
 800801c:	20000400 	.word	0x20000400

08008020 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a07      	ldr	r2, [pc, #28]	@ (800804c <vApplicationGetTimerTaskMemory+0x2c>)
 8008030:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4a06      	ldr	r2, [pc, #24]	@ (8008050 <vApplicationGetTimerTaskMemory+0x30>)
 8008036:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800803e:	601a      	str	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000600 	.word	0x20000600
 8008050:	200006a8 	.word	0x200006a8

08008054 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800807a:	2320      	movs	r3, #32
 800807c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b20      	cmp	r3, #32
 8008082:	d00b      	beq.n	800809c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fbaf 	bl	8008814 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80080bc:	697b      	ldr	r3, [r7, #20]
	}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80080cc:	2020      	movs	r0, #32
 80080ce:	f000 f9b5 	bl	800843c <pvPortMalloc>
 80080d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fb95 	bl	8008814 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80080f0:	687b      	ldr	r3, [r7, #4]
	}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b090      	sub	sp, #64	@ 0x40
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008112:	2300      	movs	r3, #0
 8008114:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10b      	bne.n	8008134 <xEventGroupWaitBits+0x38>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	623b      	str	r3, [r7, #32]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800813a:	d30b      	bcc.n	8008154 <xEventGroupWaitBits+0x58>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	61fb      	str	r3, [r7, #28]
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10b      	bne.n	8008172 <xEventGroupWaitBits+0x76>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	61bb      	str	r3, [r7, #24]
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008172:	f002 fadf 	bl	800a734 <xTaskGetSchedulerState>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <xEventGroupWaitBits+0x86>
 800817c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <xEventGroupWaitBits+0x8a>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xEventGroupWaitBits+0x8c>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	617b      	str	r3, [r7, #20]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80081a4:	f001 fe34 	bl	8009e10 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80081a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081b4:	f000 f90d 	bl	80083d2 <prvTestWaitCondition>
 80081b8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d028      	beq.n	8008220 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	43db      	mvns	r3, r3
 80081d6:	401a      	ands	r2, r3
 80081d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e020      	b.n	8008220 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80081de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ec:	e018      	b.n	8008220 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008208:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800820a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820c:	1d18      	adds	r0, r3, #4
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	4313      	orrs	r3, r2
 8008214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008216:	4619      	mov	r1, r3
 8008218:	f001 fff8 	bl	800a20c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008220:	f001 fe04 	bl	8009e2c <xTaskResumeAll>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008228:	2b00      	cmp	r3, #0
 800822a:	d031      	beq.n	8008290 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	2b00      	cmp	r3, #0
 8008230:	d107      	bne.n	8008242 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8008232:	4b1a      	ldr	r3, [pc, #104]	@ (800829c <xEventGroupWaitBits+0x1a0>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008242:	f002 fb05 	bl	800a850 <uxTaskResetEventItemValue>
 8008246:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800824a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d11a      	bne.n	8008288 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8008252:	f000 fc83 	bl	8008b5c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008262:	f000 f8b6 	bl	80083d2 <prvTestWaitCondition>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	43db      	mvns	r3, r3
 800827a:	401a      	ands	r2, r3
 800827c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8008284:	f000 fc9a 	bl	8008bbc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008292:	4618      	mov	r0, r3
 8008294:	3740      	adds	r7, #64	@ 0x40
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08e      	sub	sp, #56	@ 0x38
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80082aa:	2300      	movs	r3, #0
 80082ac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <xEventGroupSetBits+0x34>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	613b      	str	r3, [r7, #16]
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082da:	d30b      	bcc.n	80082f4 <xEventGroupSetBits+0x54>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	60fb      	str	r3, [r7, #12]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	3304      	adds	r3, #4
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	3308      	adds	r3, #8
 80082fe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008300:	f001 fd86 	bl	8009e10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	431a      	orrs	r2, r3
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008316:	e03c      	b.n	8008392 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800831e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800832e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008336:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d108      	bne.n	8008354 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008352:	e008      	b.n	8008366 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	4013      	ands	r3, r2
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	429a      	cmp	r2, r3
 8008360:	d101      	bne.n	8008366 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008362:	2301      	movs	r3, #1
 8008364:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	4313      	orrs	r3, r2
 800837c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008386:	4619      	mov	r1, r3
 8008388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800838a:	f002 f80d 	bl	800a3a8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8008392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	429a      	cmp	r2, r3
 8008398:	d1be      	bne.n	8008318 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	43db      	mvns	r3, r3
 80083a2:	401a      	ands	r2, r3
 80083a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80083a8:	f001 fd40 	bl	8009e2c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	681b      	ldr	r3, [r3, #0]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3738      	adds	r7, #56	@ 0x38
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff ff6b 	bl	80082a0 <xEventGroupSetBits>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e007      	b.n	8008408 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4013      	ands	r3, r2
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	429a      	cmp	r2, r3
 8008402:	d101      	bne.n	8008408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008408:	697b      	ldr	r3, [r7, #20]
}
 800840a:	4618      	mov	r0, r3
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	68f9      	ldr	r1, [r7, #12]
 8008426:	4804      	ldr	r0, [pc, #16]	@ (8008438 <xEventGroupSetBitsFromISR+0x24>)
 8008428:	f002 fdd6 	bl	800afd8 <xTimerPendFunctionCallFromISR>
 800842c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800842e:	697b      	ldr	r3, [r7, #20]
	}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	080083b9 	.word	0x080083b9

0800843c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008448:	f001 fce2 	bl	8009e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800844c:	4b5c      	ldr	r3, [pc, #368]	@ (80085c0 <pvPortMalloc+0x184>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008454:	f000 f924 	bl	80086a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008458:	4b5a      	ldr	r3, [pc, #360]	@ (80085c4 <pvPortMalloc+0x188>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 8095 	bne.w	8008590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01e      	beq.n	80084aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800846c:	2208      	movs	r2, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d015      	beq.n	80084aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <pvPortMalloc+0x6e>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	617b      	str	r3, [r7, #20]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d06f      	beq.n	8008590 <pvPortMalloc+0x154>
 80084b0:	4b45      	ldr	r3, [pc, #276]	@ (80085c8 <pvPortMalloc+0x18c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d86a      	bhi.n	8008590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084ba:	4b44      	ldr	r3, [pc, #272]	@ (80085cc <pvPortMalloc+0x190>)
 80084bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084be:	4b43      	ldr	r3, [pc, #268]	@ (80085cc <pvPortMalloc+0x190>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084c4:	e004      	b.n	80084d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d903      	bls.n	80084e2 <pvPortMalloc+0xa6>
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f1      	bne.n	80084c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084e2:	4b37      	ldr	r3, [pc, #220]	@ (80085c0 <pvPortMalloc+0x184>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d051      	beq.n	8008590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2208      	movs	r2, #8
 80084f2:	4413      	add	r3, r2
 80084f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	1ad2      	subs	r2, r2, r3
 8008506:	2308      	movs	r3, #8
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	429a      	cmp	r2, r3
 800850c:	d920      	bls.n	8008550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800850e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <pvPortMalloc+0xfc>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	613b      	str	r3, [r7, #16]
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800854a:	69b8      	ldr	r0, [r7, #24]
 800854c:	f000 f90a 	bl	8008764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008550:	4b1d      	ldr	r3, [pc, #116]	@ (80085c8 <pvPortMalloc+0x18c>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	4a1b      	ldr	r2, [pc, #108]	@ (80085c8 <pvPortMalloc+0x18c>)
 800855c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800855e:	4b1a      	ldr	r3, [pc, #104]	@ (80085c8 <pvPortMalloc+0x18c>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b1b      	ldr	r3, [pc, #108]	@ (80085d0 <pvPortMalloc+0x194>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d203      	bcs.n	8008572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800856a:	4b17      	ldr	r3, [pc, #92]	@ (80085c8 <pvPortMalloc+0x18c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <pvPortMalloc+0x194>)
 8008570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	4b13      	ldr	r3, [pc, #76]	@ (80085c4 <pvPortMalloc+0x188>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	431a      	orrs	r2, r3
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008586:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <pvPortMalloc+0x198>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	4a11      	ldr	r2, [pc, #68]	@ (80085d4 <pvPortMalloc+0x198>)
 800858e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008590:	f001 fc4c 	bl	8009e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <pvPortMalloc+0x17a>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <pvPortMalloc+0x176>
	return pvReturn;
 80085b6:	69fb      	ldr	r3, [r7, #28]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3728      	adds	r7, #40	@ 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20002ab0 	.word	0x20002ab0
 80085c4:	20002ac4 	.word	0x20002ac4
 80085c8:	20002ab4 	.word	0x20002ab4
 80085cc:	20002aa8 	.word	0x20002aa8
 80085d0:	20002ab8 	.word	0x20002ab8
 80085d4:	20002abc 	.word	0x20002abc

080085d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04f      	beq.n	800868a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ea:	2308      	movs	r3, #8
 80085ec:	425b      	negs	r3, r3
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4b25      	ldr	r3, [pc, #148]	@ (8008694 <vPortFree+0xbc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <vPortFree+0x46>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <vPortFree+0x66>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60bb      	str	r3, [r7, #8]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	4b14      	ldr	r3, [pc, #80]	@ (8008694 <vPortFree+0xbc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01e      	beq.n	800868a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d11a      	bne.n	800868a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <vPortFree+0xbc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	43db      	mvns	r3, r3
 800865e:	401a      	ands	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008664:	f001 fbd4 	bl	8009e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <vPortFree+0xc0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4413      	add	r3, r2
 8008672:	4a09      	ldr	r2, [pc, #36]	@ (8008698 <vPortFree+0xc0>)
 8008674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008676:	6938      	ldr	r0, [r7, #16]
 8008678:	f000 f874 	bl	8008764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800867c:	4b07      	ldr	r3, [pc, #28]	@ (800869c <vPortFree+0xc4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a06      	ldr	r2, [pc, #24]	@ (800869c <vPortFree+0xc4>)
 8008684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008686:	f001 fbd1 	bl	8009e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800868a:	bf00      	nop
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20002ac4 	.word	0x20002ac4
 8008698:	20002ab4 	.word	0x20002ab4
 800869c:	20002ac0 	.word	0x20002ac0

080086a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80086aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086ac:	4b27      	ldr	r3, [pc, #156]	@ (800874c <prvHeapInit+0xac>)
 80086ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3307      	adds	r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	4a1f      	ldr	r2, [pc, #124]	@ (800874c <prvHeapInit+0xac>)
 80086d0:	4413      	add	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008750 <prvHeapInit+0xb0>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086de:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <prvHeapInit+0xb0>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086ec:	2208      	movs	r2, #8
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <prvHeapInit+0xb4>)
 8008700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <prvHeapInit+0xb4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800870a:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <prvHeapInit+0xb4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	1ad2      	subs	r2, r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <prvHeapInit+0xb4>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a0a      	ldr	r2, [pc, #40]	@ (8008758 <prvHeapInit+0xb8>)
 800872e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4a09      	ldr	r2, [pc, #36]	@ (800875c <prvHeapInit+0xbc>)
 8008736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008738:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <prvHeapInit+0xc0>)
 800873a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000aa8 	.word	0x20000aa8
 8008750:	20002aa8 	.word	0x20002aa8
 8008754:	20002ab0 	.word	0x20002ab0
 8008758:	20002ab8 	.word	0x20002ab8
 800875c:	20002ab4 	.word	0x20002ab4
 8008760:	20002ac4 	.word	0x20002ac4

08008764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800876c:	4b27      	ldr	r3, [pc, #156]	@ (800880c <prvInsertBlockIntoFreeList+0xa8>)
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e002      	b.n	8008778 <prvInsertBlockIntoFreeList+0x14>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	429a      	cmp	r2, r3
 8008780:	d8f7      	bhi.n	8008772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4413      	add	r3, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d108      	bne.n	80087a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	441a      	add	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d118      	bne.n	80087ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <prvInsertBlockIntoFreeList+0xac>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d00d      	beq.n	80087e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	441a      	add	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e008      	b.n	80087f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <prvInsertBlockIntoFreeList+0xac>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e003      	b.n	80087f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d002      	beq.n	8008802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	20002aa8 	.word	0x20002aa8
 8008810:	20002ab0 	.word	0x20002ab0

08008814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 0208 	add.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f103 0208 	add.w	r2, r3, #8
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f103 0208 	add.w	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bc80      	pop	{r7}
 8008868:	4770      	bx	lr

0800886a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d103      	bne.n	80088d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	e00c      	b.n	80088ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3308      	adds	r3, #8
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e002      	b.n	80088de <vListInsert+0x2e>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d2f6      	bcs.n	80088d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	601a      	str	r2, [r3, #0]
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6892      	ldr	r2, [r2, #8]
 8008936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6852      	ldr	r2, [r2, #4]
 8008940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d103      	bne.n	8008954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	1e5a      	subs	r2, r3, #1
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr
	...

08008974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3b04      	subs	r3, #4
 8008984:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800898c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3b04      	subs	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f023 0201 	bic.w	r2, r3, #1
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089a4:	4a08      	ldr	r2, [pc, #32]	@ (80089c8 <pxPortInitialiseStack+0x54>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3b14      	subs	r3, #20
 80089ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b20      	subs	r3, #32
 80089ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr
 80089c8:	080089cd 	.word	0x080089cd

080089cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089d6:	4b12      	ldr	r3, [pc, #72]	@ (8008a20 <prvTaskExitError+0x54>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d00b      	beq.n	80089f8 <prvTaskExitError+0x2c>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <prvTaskExitError+0x28>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	60bb      	str	r3, [r7, #8]
}
 8008a0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a0c:	bf00      	nop
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0fc      	beq.n	8008a0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr
 8008a20:	2000000c 	.word	0x2000000c
	...

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a4e:	4770      	bx	lr

08008a50 <pxCurrentTCBConst2>:
 8008a50:	20002b10 	.word	0x20002b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a58:	4806      	ldr	r0, [pc, #24]	@ (8008a74 <prvPortStartFirstTask+0x1c>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	b662      	cpsie	i
 8008a64:	b661      	cpsie	f
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	df00      	svc	0
 8008a70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a72:	bf00      	nop
 8008a74:	e000ed08 	.word	0xe000ed08

08008a78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a7e:	4b32      	ldr	r3, [pc, #200]	@ (8008b48 <xPortStartScheduler+0xd0>)
 8008a80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	22ff      	movs	r2, #255	@ 0xff
 8008a8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b4c <xPortStartScheduler+0xd4>)
 8008aa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aac:	e009      	b.n	8008ac2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008aae:	4b28      	ldr	r3, [pc, #160]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	4a26      	ldr	r2, [pc, #152]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008ab6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b80      	cmp	r3, #128	@ 0x80
 8008acc:	d0ef      	beq.n	8008aae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ace:	4b20      	ldr	r3, [pc, #128]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1c3 0307 	rsb	r3, r3, #7
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d00b      	beq.n	8008af2 <xPortStartScheduler+0x7a>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60bb      	str	r3, [r7, #8]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008af2:	4b17      	ldr	r3, [pc, #92]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	4a15      	ldr	r2, [pc, #84]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008afa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008afc:	4b14      	ldr	r3, [pc, #80]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b04:	4a12      	ldr	r2, [pc, #72]	@ (8008b50 <xPortStartScheduler+0xd8>)
 8008b06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b10:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <xPortStartScheduler+0xdc>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a0f      	ldr	r2, [pc, #60]	@ (8008b54 <xPortStartScheduler+0xdc>)
 8008b16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b54 <xPortStartScheduler+0xdc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a0c      	ldr	r2, [pc, #48]	@ (8008b54 <xPortStartScheduler+0xdc>)
 8008b22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b28:	f000 f8b8 	bl	8008c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b58 <xPortStartScheduler+0xe0>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b32:	f7ff ff91 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b36:	f001 fadf 	bl	800a0f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b3a:	f7ff ff47 	bl	80089cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000e400 	.word	0xe000e400
 8008b4c:	20002ac8 	.word	0x20002ac8
 8008b50:	20002acc 	.word	0x20002acc
 8008b54:	e000ed20 	.word	0xe000ed20
 8008b58:	2000000c 	.word	0x2000000c

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	607b      	str	r3, [r7, #4]
}
 8008b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b76:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb4 <vPortEnterCritical+0x58>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008bb4 <vPortEnterCritical+0x58>)
 8008b7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b80:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb4 <vPortEnterCritical+0x58>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d110      	bne.n	8008baa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b88:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb8 <vPortEnterCritical+0x5c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <vPortEnterCritical+0x4e>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	603b      	str	r3, [r7, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	e7fd      	b.n	8008ba6 <vPortEnterCritical+0x4a>
	}
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr
 8008bb4:	2000000c 	.word	0x2000000c
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <vPortExitCritical+0x26>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008be2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <vPortExitCritical+0x50>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	4a08      	ldr	r2, [pc, #32]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bec:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <vPortExitCritical+0x44>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	2000000c 	.word	0x2000000c

08008c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c10:	f3ef 8009 	mrs	r0, PSP
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <pxCurrentTCBConst>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c20:	6010      	str	r0, [r2, #0]
 8008c22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c2a:	f380 8811 	msr	BASEPRI, r0
 8008c2e:	f001 fa63 	bl	800a0f8 <vTaskSwitchContext>
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f380 8811 	msr	BASEPRI, r0
 8008c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	6808      	ldr	r0, [r1, #0]
 8008c42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c46:	f380 8809 	msr	PSP, r0
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	4770      	bx	lr

08008c50 <pxCurrentTCBConst>:
 8008c50:	20002b10 	.word	0x20002b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop

08008c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c72:	f001 f987 	bl	8009f84 <xTaskIncrementTick>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c7c:	4b06      	ldr	r3, [pc, #24]	@ (8008c98 <xPortSysTickHandler+0x40>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	2300      	movs	r3, #0
 8008c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
}
 8008c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <vPortSetupTimerInterrupt+0x30>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd0 <vPortSetupTimerInterrupt+0x34>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cac:	4b09      	ldr	r3, [pc, #36]	@ (8008cd4 <vPortSetupTimerInterrupt+0x38>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a09      	ldr	r2, [pc, #36]	@ (8008cd8 <vPortSetupTimerInterrupt+0x3c>)
 8008cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb6:	099b      	lsrs	r3, r3, #6
 8008cb8:	4a08      	ldr	r2, [pc, #32]	@ (8008cdc <vPortSetupTimerInterrupt+0x40>)
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cbe:	4b03      	ldr	r3, [pc, #12]	@ (8008ccc <vPortSetupTimerInterrupt+0x30>)
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	601a      	str	r2, [r3, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	e000e010 	.word	0xe000e010
 8008cd0:	e000e018 	.word	0xe000e018
 8008cd4:	20000000 	.word	0x20000000
 8008cd8:	10624dd3 	.word	0x10624dd3
 8008cdc:	e000e014 	.word	0xe000e014

08008ce0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ce6:	f3ef 8305 	mrs	r3, IPSR
 8008cea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b0f      	cmp	r3, #15
 8008cf0:	d915      	bls.n	8008d1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cf2:	4a17      	ldr	r2, [pc, #92]	@ (8008d50 <vPortValidateInterruptPriority+0x70>)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cfc:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <vPortValidateInterruptPriority+0x74>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	7afa      	ldrb	r2, [r7, #11]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d20b      	bcs.n	8008d1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	607b      	str	r3, [r7, #4]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d58 <vPortValidateInterruptPriority+0x78>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <vPortValidateInterruptPriority+0x7c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d90b      	bls.n	8008d46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	603b      	str	r3, [r7, #0]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <vPortValidateInterruptPriority+0x62>
	}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr
 8008d50:	e000e3f0 	.word	0xe000e3f0
 8008d54:	20002ac8 	.word	0x20002ac8
 8008d58:	e000ed0c 	.word	0xe000ed0c
 8008d5c:	20002acc 	.word	0x20002acc

08008d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <xQueueGenericReset+0x2c>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	60bb      	str	r3, [r7, #8]
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d8c:	f7ff fee6 	bl	8008b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d98:	68f9      	ldr	r1, [r7, #12]
 8008d9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008dc2:	fb01 f303 	mul.w	r3, r1, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	22ff      	movs	r2, #255	@ 0xff
 8008dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	22ff      	movs	r2, #255	@ 0xff
 8008dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d114      	bne.n	8008e0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01a      	beq.n	8008e20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fa76 	bl	800a2e0 <xTaskRemoveFromEventList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d012      	beq.n	8008e20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008e30 <xQueueGenericReset+0xd0>)
 8008dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	e009      	b.n	8008e20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fcff 	bl	8008814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3324      	adds	r3, #36	@ 0x24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fcfa 	bl	8008814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e20:	f7ff fecc 	bl	8008bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e24:	2301      	movs	r3, #1
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08e      	sub	sp, #56	@ 0x38
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	e7fd      	b.n	8008e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <xQueueGenericCreateStatic+0x56>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <xQueueGenericCreateStatic+0x5a>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <xQueueGenericCreateStatic+0x5c>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	623b      	str	r3, [r7, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <xQueueGenericCreateStatic+0x84>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <xQueueGenericCreateStatic+0x88>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <xQueueGenericCreateStatic+0x8a>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	61fb      	str	r3, [r7, #28]
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	e7fd      	b.n	8008ed6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eda:	2350      	movs	r3, #80	@ 0x50
 8008edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b50      	cmp	r3, #80	@ 0x50
 8008ee2:	d00b      	beq.n	8008efc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	61bb      	str	r3, [r7, #24]
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008efc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00d      	beq.n	8008f24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f840 	bl	8008fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3730      	adds	r7, #48	@ 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b08a      	sub	sp, #40	@ 0x28
 8008f32:	af02      	add	r7, sp, #8
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	613b      	str	r3, [r7, #16]
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	e7fd      	b.n	8008f56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	3350      	adds	r3, #80	@ 0x50
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fa67 	bl	800843c <pvPortMalloc>
 8008f6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d011      	beq.n	8008f9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	3350      	adds	r3, #80	@ 0x50
 8008f7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f88:	79fa      	ldrb	r2, [r7, #7]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f805 	bl	8008fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	e002      	b.n	8008fc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f7ff fec3 	bl	8008d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	@ 0x38
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <xQueueGenericSend+0x34>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800901a:	bf00      	nop
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d103      	bne.n	800902e <xQueueGenericSend+0x42>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <xQueueGenericSend+0x46>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericSend+0x48>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10b      	bne.n	8009050 <xQueueGenericSend+0x64>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	e7fd      	b.n	800904c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d103      	bne.n	800905e <xQueueGenericSend+0x72>
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <xQueueGenericSend+0x76>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <xQueueGenericSend+0x78>
 8009062:	2300      	movs	r3, #0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10b      	bne.n	8009080 <xQueueGenericSend+0x94>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	623b      	str	r3, [r7, #32]
}
 800907a:	bf00      	nop
 800907c:	bf00      	nop
 800907e:	e7fd      	b.n	800907c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009080:	f001 fb58 	bl	800a734 <xTaskGetSchedulerState>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <xQueueGenericSend+0xa4>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <xQueueGenericSend+0xa8>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <xQueueGenericSend+0xaa>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	61fb      	str	r3, [r7, #28]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090b2:	f7ff fd53 	bl	8008b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	429a      	cmp	r2, r3
 80090c0:	d302      	bcc.n	80090c8 <xQueueGenericSend+0xdc>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d129      	bne.n	800911c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ce:	f000 face 	bl	800966e <prvCopyDataToQueue>
 80090d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	3324      	adds	r3, #36	@ 0x24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 f8fd 	bl	800a2e0 <xTaskRemoveFromEventList>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d013      	beq.n	8009114 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090ec:	4b3f      	ldr	r3, [pc, #252]	@ (80091ec <xQueueGenericSend+0x200>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	e00a      	b.n	8009114 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009104:	4b39      	ldr	r3, [pc, #228]	@ (80091ec <xQueueGenericSend+0x200>)
 8009106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009114:	f7ff fd52 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 8009118:	2301      	movs	r3, #1
 800911a:	e063      	b.n	80091e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d103      	bne.n	800912a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009122:	f7ff fd4b 	bl	8008bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009126:	2300      	movs	r3, #0
 8009128:	e05c      	b.n	80091e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009130:	f107 0314 	add.w	r3, r7, #20
 8009134:	4618      	mov	r0, r3
 8009136:	f001 f99b 	bl	800a470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800913a:	2301      	movs	r3, #1
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800913e:	f7ff fd3d 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009142:	f000 fe65 	bl	8009e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009146:	f7ff fd09 	bl	8008b5c <vPortEnterCritical>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d103      	bne.n	8009160 <xQueueGenericSend+0x174>
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009166:	b25b      	sxtb	r3, r3
 8009168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916c:	d103      	bne.n	8009176 <xQueueGenericSend+0x18a>
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009176:	f7ff fd21 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800917a:	1d3a      	adds	r2, r7, #4
 800917c:	f107 0314 	add.w	r3, r7, #20
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f98a 	bl	800a49c <xTaskCheckForTimeOut>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d124      	bne.n	80091d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800918e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009190:	f000 fb65 	bl	800985e <prvIsQueueFull>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d018      	beq.n	80091cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	3310      	adds	r3, #16
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f80c 	bl	800a1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091aa:	f000 faf0 	bl	800978e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091ae:	f000 fe3d 	bl	8009e2c <xTaskResumeAll>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f47f af7c 	bne.w	80090b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091ba:	4b0c      	ldr	r3, [pc, #48]	@ (80091ec <xQueueGenericSend+0x200>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e772      	b.n	80090b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ce:	f000 fade 	bl	800978e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091d2:	f000 fe2b 	bl	8009e2c <xTaskResumeAll>
 80091d6:	e76c      	b.n	80090b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091da:	f000 fad8 	bl	800978e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091de:	f000 fe25 	bl	8009e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3738      	adds	r7, #56	@ 0x38
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b090      	sub	sp, #64	@ 0x40
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d103      	bne.n	800922e <xQueueGenericSendFromISR+0x3e>
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <xQueueGenericSendFromISR+0x42>
 800922e:	2301      	movs	r3, #1
 8009230:	e000      	b.n	8009234 <xQueueGenericSendFromISR+0x44>
 8009232:	2300      	movs	r3, #0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d103      	bne.n	800925e <xQueueGenericSendFromISR+0x6e>
 8009256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925a:	2b01      	cmp	r3, #1
 800925c:	d101      	bne.n	8009262 <xQueueGenericSendFromISR+0x72>
 800925e:	2301      	movs	r3, #1
 8009260:	e000      	b.n	8009264 <xQueueGenericSendFromISR+0x74>
 8009262:	2300      	movs	r3, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	623b      	str	r3, [r7, #32]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009280:	f7ff fd2e 	bl	8008ce0 <vPortValidateInterruptPriority>
	__asm volatile
 8009284:	f3ef 8211 	mrs	r2, BASEPRI
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fa      	str	r2, [r7, #28]
 800929a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800929c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <xQueueGenericSendFromISR+0xc2>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d12f      	bne.n	8009312 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092c8:	f000 f9d1 	bl	800966e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d112      	bne.n	80092fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d016      	beq.n	800930c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	3324      	adds	r3, #36	@ 0x24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fffc 	bl	800a2e0 <xTaskRemoveFromEventList>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00e      	beq.n	800930c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00b      	beq.n	800930c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e007      	b.n	800930c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009300:	3301      	adds	r3, #1
 8009302:	b2db      	uxtb	r3, r3
 8009304:	b25a      	sxtb	r2, r3
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800930c:	2301      	movs	r3, #1
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009310:	e001      	b.n	8009316 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009312:	2300      	movs	r3, #0
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009318:	617b      	str	r3, [r7, #20]
	__asm volatile
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f383 8811 	msr	BASEPRI, r3
}
 8009320:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009324:	4618      	mov	r0, r3
 8009326:	3740      	adds	r7, #64	@ 0x40
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	@ 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009338:	2300      	movs	r3, #0
 800933a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <xQueueReceive+0x32>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	623b      	str	r3, [r7, #32]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <xQueueReceive+0x40>
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <xQueueReceive+0x44>
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <xQueueReceive+0x46>
 8009370:	2300      	movs	r3, #0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10b      	bne.n	800938e <xQueueReceive+0x62>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	61fb      	str	r3, [r7, #28]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800938e:	f001 f9d1 	bl	800a734 <xTaskGetSchedulerState>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <xQueueReceive+0x72>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <xQueueReceive+0x76>
 800939e:	2301      	movs	r3, #1
 80093a0:	e000      	b.n	80093a4 <xQueueReceive+0x78>
 80093a2:	2300      	movs	r3, #0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10b      	bne.n	80093c0 <xQueueReceive+0x94>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	61bb      	str	r3, [r7, #24]
}
 80093ba:	bf00      	nop
 80093bc:	bf00      	nop
 80093be:	e7fd      	b.n	80093bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093c0:	f7ff fbcc 	bl	8008b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01f      	beq.n	8009410 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d4:	f000 f9b5 	bl	8009742 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	1e5a      	subs	r2, r3, #1
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00f      	beq.n	8009408 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	3310      	adds	r3, #16
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 ff77 	bl	800a2e0 <xTaskRemoveFromEventList>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093f8:	4b3c      	ldr	r3, [pc, #240]	@ (80094ec <xQueueReceive+0x1c0>)
 80093fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009408:	f7ff fbd8 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 800940c:	2301      	movs	r3, #1
 800940e:	e069      	b.n	80094e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009416:	f7ff fbd1 	bl	8008bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800941a:	2300      	movs	r3, #0
 800941c:	e062      	b.n	80094e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	4618      	mov	r0, r3
 800942a:	f001 f821 	bl	800a470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800942e:	2301      	movs	r3, #1
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009432:	f7ff fbc3 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009436:	f000 fceb 	bl	8009e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800943a:	f7ff fb8f 	bl	8008b5c <vPortEnterCritical>
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009444:	b25b      	sxtb	r3, r3
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d103      	bne.n	8009454 <xQueueReceive+0x128>
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800945a:	b25b      	sxtb	r3, r3
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d103      	bne.n	800946a <xQueueReceive+0x13e>
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800946a:	f7ff fba7 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800946e:	1d3a      	adds	r2, r7, #4
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f001 f810 	bl	800a49c <xTaskCheckForTimeOut>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d123      	bne.n	80094ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 f9d5 	bl	8009832 <prvIsQueueEmpty>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d017      	beq.n	80094be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800948e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009490:	3324      	adds	r3, #36	@ 0x24
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fe92 	bl	800a1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800949c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800949e:	f000 f976 	bl	800978e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094a2:	f000 fcc3 	bl	8009e2c <xTaskResumeAll>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d189      	bne.n	80093c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80094ac:	4b0f      	ldr	r3, [pc, #60]	@ (80094ec <xQueueReceive+0x1c0>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	e780      	b.n	80093c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c0:	f000 f965 	bl	800978e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094c4:	f000 fcb2 	bl	8009e2c <xTaskResumeAll>
 80094c8:	e77a      	b.n	80093c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094cc:	f000 f95f 	bl	800978e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094d0:	f000 fcac 	bl	8009e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094d6:	f000 f9ac 	bl	8009832 <prvIsQueueEmpty>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f43f af6f 	beq.w	80093c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3730      	adds	r7, #48	@ 0x30
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08e      	sub	sp, #56	@ 0x38
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10b      	bne.n	800951e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	623b      	str	r3, [r7, #32]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d103      	bne.n	800952c <xQueueReceiveFromISR+0x3c>
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <xQueueReceiveFromISR+0x40>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <xQueueReceiveFromISR+0x42>
 8009530:	2300      	movs	r3, #0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61fb      	str	r3, [r7, #28]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800954e:	f7ff fbc7 	bl	8008ce0 <vPortValidateInterruptPriority>
	__asm volatile
 8009552:	f3ef 8211 	mrs	r2, BASEPRI
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	61ba      	str	r2, [r7, #24]
 8009568:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800956a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800956c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009572:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d02f      	beq.n	80095da <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009588:	f000 f8db 	bl	8009742 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	1e5a      	subs	r2, r3, #1
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009594:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959c:	d112      	bne.n	80095c4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d016      	beq.n	80095d4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	3310      	adds	r3, #16
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fe98 	bl	800a2e0 <xTaskRemoveFromEventList>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00e      	beq.n	80095d4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	e007      	b.n	80095d4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095c8:	3301      	adds	r3, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	b25a      	sxtb	r2, r3
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80095d4:	2301      	movs	r3, #1
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d8:	e001      	b.n	80095de <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f383 8811 	msr	BASEPRI, r3
}
 80095e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3738      	adds	r7, #56	@ 0x38
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10b      	bne.n	800961a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	60bb      	str	r3, [r7, #8]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800961a:	f7ff fa9f 	bl	8008b5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009624:	f7ff faca 	bl	8008bbc <vPortExitCritical>

	return uxReturn;
 8009628:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009632:	b480      	push	{r7}
 8009634:	b087      	sub	sp, #28
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10b      	bne.n	800965c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	60fb      	str	r3, [r7, #12]
}
 8009656:	bf00      	nop
 8009658:	bf00      	nop
 800965a:	e7fd      	b.n	8009658 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009660:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009662:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b086      	sub	sp, #24
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10d      	bne.n	80096a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d14d      	bne.n	8009730 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4618      	mov	r0, r3
 800969a:	f001 f869 	bl	800a770 <xTaskPriorityDisinherit>
 800969e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	609a      	str	r2, [r3, #8]
 80096a6:	e043      	b.n	8009730 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d119      	bne.n	80096e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6858      	ldr	r0, [r3, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b6:	461a      	mov	r2, r3
 80096b8:	68b9      	ldr	r1, [r7, #8]
 80096ba:	f004 f819 	bl	800d6f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c6:	441a      	add	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d32b      	bcc.n	8009730 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	605a      	str	r2, [r3, #4]
 80096e0:	e026      	b.n	8009730 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68d8      	ldr	r0, [r3, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	461a      	mov	r2, r3
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	f003 ffff 	bl	800d6f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fa:	425b      	negs	r3, r3
 80096fc:	441a      	add	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d207      	bcs.n	800971e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009716:	425b      	negs	r3, r3
 8009718:	441a      	add	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d105      	bne.n	8009730 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3b01      	subs	r3, #1
 800972e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d018      	beq.n	8009786 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68da      	ldr	r2, [r3, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975c:	441a      	add	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	429a      	cmp	r2, r3
 800976c:	d303      	bcc.n	8009776 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68d9      	ldr	r1, [r3, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977e:	461a      	mov	r2, r3
 8009780:	6838      	ldr	r0, [r7, #0]
 8009782:	f003 ffb5 	bl	800d6f0 <memcpy>
	}
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009796:	f7ff f9e1 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097a2:	e011      	b.n	80097c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d012      	beq.n	80097d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3324      	adds	r3, #36	@ 0x24
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fd95 	bl	800a2e0 <xTaskRemoveFromEventList>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097bc:	f000 fed2 	bl	800a564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dce9      	bgt.n	80097a4 <prvUnlockQueue+0x16>
 80097d0:	e000      	b.n	80097d4 <prvUnlockQueue+0x46>
					break;
 80097d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	22ff      	movs	r2, #255	@ 0xff
 80097d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80097dc:	f7ff f9ee 	bl	8008bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097e0:	f7ff f9bc 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097ec:	e011      	b.n	8009812 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d012      	beq.n	800981c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3310      	adds	r3, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fd70 	bl	800a2e0 <xTaskRemoveFromEventList>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009806:	f000 fead 	bl	800a564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	3b01      	subs	r3, #1
 800980e:	b2db      	uxtb	r3, r3
 8009810:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009816:	2b00      	cmp	r3, #0
 8009818:	dce9      	bgt.n	80097ee <prvUnlockQueue+0x60>
 800981a:	e000      	b.n	800981e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800981c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	22ff      	movs	r2, #255	@ 0xff
 8009822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009826:	f7ff f9c9 	bl	8008bbc <vPortExitCritical>
}
 800982a:	bf00      	nop
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800983a:	f7ff f98f 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e001      	b.n	8009850 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009850:	f7ff f9b4 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009866:	f7ff f979 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009872:	429a      	cmp	r2, r3
 8009874:	d102      	bne.n	800987c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
 800987a:	e001      	b.n	8009880 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009880:	f7ff f99c 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	e014      	b.n	80098ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098a0:	4a0e      	ldr	r2, [pc, #56]	@ (80098dc <vQueueAddToRegistry+0x4c>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10b      	bne.n	80098c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098ac:	490b      	ldr	r1, [pc, #44]	@ (80098dc <vQueueAddToRegistry+0x4c>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098b6:	4a09      	ldr	r2, [pc, #36]	@ (80098dc <vQueueAddToRegistry+0x4c>)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	4413      	add	r3, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098c2:	e006      	b.n	80098d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b07      	cmp	r3, #7
 80098ce:	d9e7      	bls.n	80098a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	20002ad0 	.word	0x20002ad0

080098e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098f0:	f7ff f934 	bl	8008b5c <vPortEnterCritical>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d103      	bne.n	800990a <vQueueWaitForMessageRestricted+0x2a>
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009910:	b25b      	sxtb	r3, r3
 8009912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009916:	d103      	bne.n	8009920 <vQueueWaitForMessageRestricted+0x40>
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009920:	f7ff f94c 	bl	8008bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	3324      	adds	r3, #36	@ 0x24
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fca7 	bl	800a288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800993a:	6978      	ldr	r0, [r7, #20]
 800993c:	f7ff ff27 	bl	800978e <prvUnlockQueue>
	}
 8009940:	bf00      	nop
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08e      	sub	sp, #56	@ 0x38
 800994c:	af04      	add	r7, sp, #16
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <xTaskCreateStatic+0x2c>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	623b      	str	r3, [r7, #32]
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <xTaskCreateStatic+0x4a>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61fb      	str	r3, [r7, #28]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009992:	23a8      	movs	r3, #168	@ 0xa8
 8009994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2ba8      	cmp	r3, #168	@ 0xa8
 800999a:	d00b      	beq.n	80099b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	61bb      	str	r3, [r7, #24]
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	e7fd      	b.n	80099b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01e      	beq.n	80099fa <xTaskCreateStatic+0xb2>
 80099bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01b      	beq.n	80099fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099d4:	2300      	movs	r3, #0
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	f107 0314 	add.w	r3, r7, #20
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 f851 	bl	8009a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099f4:	f000 f8f6 	bl	8009be4 <prvAddNewTaskToReadyList>
 80099f8:	e001      	b.n	80099fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099fe:	697b      	ldr	r3, [r7, #20]
	}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3728      	adds	r7, #40	@ 0x28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08c      	sub	sp, #48	@ 0x30
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	4613      	mov	r3, r2
 8009a16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fd0d 	bl	800843c <pvPortMalloc>
 8009a22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00e      	beq.n	8009a48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a2a:	20a8      	movs	r0, #168	@ 0xa8
 8009a2c:	f7fe fd06 	bl	800843c <pvPortMalloc>
 8009a30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a3e:	e005      	b.n	8009a4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a40:	6978      	ldr	r0, [r7, #20]
 8009a42:	f7fe fdc9 	bl	80085d8 <vPortFree>
 8009a46:	e001      	b.n	8009a4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d017      	beq.n	8009a82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a5a:	88fa      	ldrh	r2, [r7, #6]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9303      	str	r3, [sp, #12]
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f80f 	bl	8009a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a76:	69f8      	ldr	r0, [r7, #28]
 8009a78:	f000 f8b4 	bl	8009be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	e002      	b.n	8009a88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a82:	f04f 33ff 	mov.w	r3, #4294967295
 8009a86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a88:	69bb      	ldr	r3, [r7, #24]
	}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	461a      	mov	r2, r3
 8009aac:	21a5      	movs	r1, #165	@ 0xa5
 8009aae:	f003 fd95 	bl	800d5dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009abc:	3b01      	subs	r3, #1
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	617b      	str	r3, [r7, #20]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01f      	beq.n	8009b34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009af4:	2300      	movs	r3, #0
 8009af6:	61fb      	str	r3, [r7, #28]
 8009af8:	e012      	b.n	8009b20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	4413      	add	r3, r2
 8009b00:	7819      	ldrb	r1, [r3, #0]
 8009b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	3334      	adds	r3, #52	@ 0x34
 8009b0a:	460a      	mov	r2, r1
 8009b0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	4413      	add	r3, r2
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d006      	beq.n	8009b28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d9e9      	bls.n	8009afa <prvInitialiseNewTask+0x66>
 8009b26:	e000      	b.n	8009b2a <prvInitialiseNewTask+0x96>
			{
				break;
 8009b28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b32:	e003      	b.n	8009b3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	2b37      	cmp	r3, #55	@ 0x37
 8009b40:	d901      	bls.n	8009b46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b42:	2337      	movs	r3, #55	@ 0x37
 8009b44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	2200      	movs	r2, #0
 8009b56:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe fe78 	bl	8008852 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	3318      	adds	r3, #24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fe73 	bl	8008852 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b94:	3354      	adds	r3, #84	@ 0x54
 8009b96:	224c      	movs	r2, #76	@ 0x4c
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f003 fd1e 	bl	800d5dc <memset>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd8 <prvInitialiseNewTask+0x144>)
 8009ba4:	659a      	str	r2, [r3, #88]	@ 0x58
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8009bdc <prvInitialiseNewTask+0x148>)
 8009baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	4a0c      	ldr	r2, [pc, #48]	@ (8009be0 <prvInitialiseNewTask+0x14c>)
 8009bb0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	68f9      	ldr	r1, [r7, #12]
 8009bb6:	69b8      	ldr	r0, [r7, #24]
 8009bb8:	f7fe fedc 	bl	8008974 <pxPortInitialiseStack>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bce:	bf00      	nop
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20004358 	.word	0x20004358
 8009bdc:	200043c0 	.word	0x200043c0
 8009be0:	20004428 	.word	0x20004428

08009be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bec:	f7fe ffb6 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8009ca8 <prvAddNewTaskToReadyList+0xc4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8009ca8 <prvAddNewTaskToReadyList+0xc4>)
 8009bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8009cac <prvAddNewTaskToReadyList+0xc8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c02:	4a2a      	ldr	r2, [pc, #168]	@ (8009cac <prvAddNewTaskToReadyList+0xc8>)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c08:	4b27      	ldr	r3, [pc, #156]	@ (8009ca8 <prvAddNewTaskToReadyList+0xc4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d110      	bne.n	8009c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c10:	f000 fccc 	bl	800a5ac <prvInitialiseTaskLists>
 8009c14:	e00d      	b.n	8009c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c16:	4b26      	ldr	r3, [pc, #152]	@ (8009cb0 <prvAddNewTaskToReadyList+0xcc>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c1e:	4b23      	ldr	r3, [pc, #140]	@ (8009cac <prvAddNewTaskToReadyList+0xc8>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d802      	bhi.n	8009c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009cac <prvAddNewTaskToReadyList+0xc8>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c32:	4b20      	ldr	r3, [pc, #128]	@ (8009cb4 <prvAddNewTaskToReadyList+0xd0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3301      	adds	r3, #1
 8009c38:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb4 <prvAddNewTaskToReadyList+0xd0>)
 8009c3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb4 <prvAddNewTaskToReadyList+0xd0>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c48:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb8 <prvAddNewTaskToReadyList+0xd4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d903      	bls.n	8009c58 <prvAddNewTaskToReadyList+0x74>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c54:	4a18      	ldr	r2, [pc, #96]	@ (8009cb8 <prvAddNewTaskToReadyList+0xd4>)
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4a15      	ldr	r2, [pc, #84]	@ (8009cbc <prvAddNewTaskToReadyList+0xd8>)
 8009c66:	441a      	add	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7fe fdfb 	bl	800886a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c74:	f7fe ffa2 	bl	8008bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c78:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <prvAddNewTaskToReadyList+0xcc>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00e      	beq.n	8009c9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c80:	4b0a      	ldr	r3, [pc, #40]	@ (8009cac <prvAddNewTaskToReadyList+0xc8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d207      	bcs.n	8009c9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <prvAddNewTaskToReadyList+0xdc>)
 8009c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20002fe4 	.word	0x20002fe4
 8009cac:	20002b10 	.word	0x20002b10
 8009cb0:	20002ff0 	.word	0x20002ff0
 8009cb4:	20003000 	.word	0x20003000
 8009cb8:	20002fec 	.word	0x20002fec
 8009cbc:	20002b14 	.word	0x20002b14
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d018      	beq.n	8009d08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cd6:	4b14      	ldr	r3, [pc, #80]	@ (8009d28 <vTaskDelay+0x64>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <vTaskDelay+0x32>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	60bb      	str	r3, [r7, #8]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cf6:	f000 f88b 	bl	8009e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fdbf 	bl	800a880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d02:	f000 f893 	bl	8009e2c <xTaskResumeAll>
 8009d06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d107      	bne.n	8009d1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009d0e:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <vTaskDelay+0x68>)
 8009d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2000300c 	.word	0x2000300c
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d3e:	463a      	mov	r2, r7
 8009d40:	1d39      	adds	r1, r7, #4
 8009d42:	f107 0308 	add.w	r3, r7, #8
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe f952 	bl	8007ff0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	9202      	str	r2, [sp, #8]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	460a      	mov	r2, r1
 8009d5e:	4924      	ldr	r1, [pc, #144]	@ (8009df0 <vTaskStartScheduler+0xc0>)
 8009d60:	4824      	ldr	r0, [pc, #144]	@ (8009df4 <vTaskStartScheduler+0xc4>)
 8009d62:	f7ff fdf1 	bl	8009948 <xTaskCreateStatic>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4a23      	ldr	r2, [pc, #140]	@ (8009df8 <vTaskStartScheduler+0xc8>)
 8009d6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d6c:	4b22      	ldr	r3, [pc, #136]	@ (8009df8 <vTaskStartScheduler+0xc8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d74:	2301      	movs	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e001      	b.n	8009d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d102      	bne.n	8009d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d84:	f000 fdd0 	bl	800a928 <xTimerCreateTimerTask>
 8009d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d11b      	bne.n	8009dc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	613b      	str	r3, [r7, #16]
}
 8009da2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009da4:	4b15      	ldr	r3, [pc, #84]	@ (8009dfc <vTaskStartScheduler+0xcc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3354      	adds	r3, #84	@ 0x54
 8009daa:	4a15      	ldr	r2, [pc, #84]	@ (8009e00 <vTaskStartScheduler+0xd0>)
 8009dac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009dae:	4b15      	ldr	r3, [pc, #84]	@ (8009e04 <vTaskStartScheduler+0xd4>)
 8009db0:	f04f 32ff 	mov.w	r2, #4294967295
 8009db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009db6:	4b14      	ldr	r3, [pc, #80]	@ (8009e08 <vTaskStartScheduler+0xd8>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dbc:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <vTaskStartScheduler+0xdc>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dc2:	f7fe fe59 	bl	8008a78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dc6:	e00f      	b.n	8009de8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d10b      	bne.n	8009de8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <vTaskStartScheduler+0xb4>
}
 8009de8:	bf00      	nop
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	0800dfe8 	.word	0x0800dfe8
 8009df4:	0800a57d 	.word	0x0800a57d
 8009df8:	20003008 	.word	0x20003008
 8009dfc:	20002b10 	.word	0x20002b10
 8009e00:	20000180 	.word	0x20000180
 8009e04:	20003004 	.word	0x20003004
 8009e08:	20002ff0 	.word	0x20002ff0
 8009e0c:	20002fe8 	.word	0x20002fe8

08009e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e14:	4b04      	ldr	r3, [pc, #16]	@ (8009e28 <vTaskSuspendAll+0x18>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	4a03      	ldr	r2, [pc, #12]	@ (8009e28 <vTaskSuspendAll+0x18>)
 8009e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e1e:	bf00      	nop
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	2000300c 	.word	0x2000300c

08009e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e3a:	4b42      	ldr	r3, [pc, #264]	@ (8009f44 <xTaskResumeAll+0x118>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <xTaskResumeAll+0x2e>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	603b      	str	r3, [r7, #0]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e5a:	f7fe fe7f 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e5e:	4b39      	ldr	r3, [pc, #228]	@ (8009f44 <xTaskResumeAll+0x118>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	4a37      	ldr	r2, [pc, #220]	@ (8009f44 <xTaskResumeAll+0x118>)
 8009e66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e68:	4b36      	ldr	r3, [pc, #216]	@ (8009f44 <xTaskResumeAll+0x118>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d162      	bne.n	8009f36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e70:	4b35      	ldr	r3, [pc, #212]	@ (8009f48 <xTaskResumeAll+0x11c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d05e      	beq.n	8009f36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e78:	e02f      	b.n	8009eda <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e7a:	4b34      	ldr	r3, [pc, #208]	@ (8009f4c <xTaskResumeAll+0x120>)
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3318      	adds	r3, #24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fd4a 	bl	8008920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe fd45 	bl	8008920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f50 <xTaskResumeAll+0x124>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d903      	bls.n	8009eaa <xTaskResumeAll+0x7e>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8009f50 <xTaskResumeAll+0x124>)
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4a27      	ldr	r2, [pc, #156]	@ (8009f54 <xTaskResumeAll+0x128>)
 8009eb8:	441a      	add	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f7fe fcd2 	bl	800886a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eca:	4b23      	ldr	r3, [pc, #140]	@ (8009f58 <xTaskResumeAll+0x12c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d302      	bcc.n	8009eda <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009ed4:	4b21      	ldr	r3, [pc, #132]	@ (8009f5c <xTaskResumeAll+0x130>)
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eda:	4b1c      	ldr	r3, [pc, #112]	@ (8009f4c <xTaskResumeAll+0x120>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1cb      	bne.n	8009e7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ee8:	f000 fc04 	bl	800a6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009eec:	4b1c      	ldr	r3, [pc, #112]	@ (8009f60 <xTaskResumeAll+0x134>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d010      	beq.n	8009f1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ef8:	f000 f844 	bl	8009f84 <xTaskIncrementTick>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009f02:	4b16      	ldr	r3, [pc, #88]	@ (8009f5c <xTaskResumeAll+0x130>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f1      	bne.n	8009ef8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009f14:	4b12      	ldr	r3, [pc, #72]	@ (8009f60 <xTaskResumeAll+0x134>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f1a:	4b10      	ldr	r3, [pc, #64]	@ (8009f5c <xTaskResumeAll+0x130>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f26:	4b0f      	ldr	r3, [pc, #60]	@ (8009f64 <xTaskResumeAll+0x138>)
 8009f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f36:	f7fe fe41 	bl	8008bbc <vPortExitCritical>

	return xAlreadyYielded;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	2000300c 	.word	0x2000300c
 8009f48:	20002fe4 	.word	0x20002fe4
 8009f4c:	20002fa4 	.word	0x20002fa4
 8009f50:	20002fec 	.word	0x20002fec
 8009f54:	20002b14 	.word	0x20002b14
 8009f58:	20002b10 	.word	0x20002b10
 8009f5c:	20002ff8 	.word	0x20002ff8
 8009f60:	20002ff4 	.word	0x20002ff4
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f6e:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <xTaskGetTickCount+0x18>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f74:	687b      	ldr	r3, [r7, #4]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bc80      	pop	{r7}
 8009f7e:	4770      	bx	lr
 8009f80:	20002fe8 	.word	0x20002fe8

08009f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8e:	4b4f      	ldr	r3, [pc, #316]	@ (800a0cc <xTaskIncrementTick+0x148>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 8090 	bne.w	800a0b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f98:	4b4d      	ldr	r3, [pc, #308]	@ (800a0d0 <xTaskIncrementTick+0x14c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fa0:	4a4b      	ldr	r2, [pc, #300]	@ (800a0d0 <xTaskIncrementTick+0x14c>)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d121      	bne.n	8009ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fac:	4b49      	ldr	r3, [pc, #292]	@ (800a0d4 <xTaskIncrementTick+0x150>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	603b      	str	r3, [r7, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <xTaskIncrementTick+0x46>
 8009fce:	4b41      	ldr	r3, [pc, #260]	@ (800a0d4 <xTaskIncrementTick+0x150>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	4b40      	ldr	r3, [pc, #256]	@ (800a0d8 <xTaskIncrementTick+0x154>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a3e      	ldr	r2, [pc, #248]	@ (800a0d4 <xTaskIncrementTick+0x150>)
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	4a3e      	ldr	r2, [pc, #248]	@ (800a0d8 <xTaskIncrementTick+0x154>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	4b3e      	ldr	r3, [pc, #248]	@ (800a0dc <xTaskIncrementTick+0x158>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a3c      	ldr	r2, [pc, #240]	@ (800a0dc <xTaskIncrementTick+0x158>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	f000 fb82 	bl	800a6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ff0:	4b3b      	ldr	r3, [pc, #236]	@ (800a0e0 <xTaskIncrementTick+0x15c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d349      	bcc.n	800a08e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ffa:	4b36      	ldr	r3, [pc, #216]	@ (800a0d4 <xTaskIncrementTick+0x150>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d104      	bne.n	800a00e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a004:	4b36      	ldr	r3, [pc, #216]	@ (800a0e0 <xTaskIncrementTick+0x15c>)
 800a006:	f04f 32ff 	mov.w	r2, #4294967295
 800a00a:	601a      	str	r2, [r3, #0]
					break;
 800a00c:	e03f      	b.n	800a08e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00e:	4b31      	ldr	r3, [pc, #196]	@ (800a0d4 <xTaskIncrementTick+0x150>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	429a      	cmp	r2, r3
 800a024:	d203      	bcs.n	800a02e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a026:	4a2e      	ldr	r2, [pc, #184]	@ (800a0e0 <xTaskIncrementTick+0x15c>)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a02c:	e02f      	b.n	800a08e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3304      	adds	r3, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fc74 	bl	8008920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	3318      	adds	r3, #24
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fc6b 	bl	8008920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04e:	4b25      	ldr	r3, [pc, #148]	@ (800a0e4 <xTaskIncrementTick+0x160>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d903      	bls.n	800a05e <xTaskIncrementTick+0xda>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05a:	4a22      	ldr	r2, [pc, #136]	@ (800a0e4 <xTaskIncrementTick+0x160>)
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4a1f      	ldr	r2, [pc, #124]	@ (800a0e8 <xTaskIncrementTick+0x164>)
 800a06c:	441a      	add	r2, r3
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	3304      	adds	r3, #4
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f7fe fbf8 	bl	800886a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0ec <xTaskIncrementTick+0x168>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a084:	429a      	cmp	r2, r3
 800a086:	d3b8      	bcc.n	8009ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a088:	2301      	movs	r3, #1
 800a08a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a08c:	e7b5      	b.n	8009ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a08e:	4b17      	ldr	r3, [pc, #92]	@ (800a0ec <xTaskIncrementTick+0x168>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a094:	4914      	ldr	r1, [pc, #80]	@ (800a0e8 <xTaskIncrementTick+0x164>)
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d901      	bls.n	800a0aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0aa:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <xTaskIncrementTick+0x16c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	617b      	str	r3, [r7, #20]
 800a0b6:	e004      	b.n	800a0c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f4 <xTaskIncrementTick+0x170>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f4 <xTaskIncrementTick+0x170>)
 800a0c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0c2:	697b      	ldr	r3, [r7, #20]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	2000300c 	.word	0x2000300c
 800a0d0:	20002fe8 	.word	0x20002fe8
 800a0d4:	20002f9c 	.word	0x20002f9c
 800a0d8:	20002fa0 	.word	0x20002fa0
 800a0dc:	20002ffc 	.word	0x20002ffc
 800a0e0:	20003004 	.word	0x20003004
 800a0e4:	20002fec 	.word	0x20002fec
 800a0e8:	20002b14 	.word	0x20002b14
 800a0ec:	20002b10 	.word	0x20002b10
 800a0f0:	20002ff8 	.word	0x20002ff8
 800a0f4:	20002ff4 	.word	0x20002ff4

0800a0f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a8 <vTaskSwitchContext+0xb0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a106:	4b29      	ldr	r3, [pc, #164]	@ (800a1ac <vTaskSwitchContext+0xb4>)
 800a108:	2201      	movs	r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a10c:	e047      	b.n	800a19e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a10e:	4b27      	ldr	r3, [pc, #156]	@ (800a1ac <vTaskSwitchContext+0xb4>)
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	4b26      	ldr	r3, [pc, #152]	@ (800a1b0 <vTaskSwitchContext+0xb8>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e011      	b.n	800a140 <vTaskSwitchContext+0x48>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <vTaskSwitchContext+0x42>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	607b      	str	r3, [r7, #4]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <vTaskSwitchContext+0x3e>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	491c      	ldr	r1, [pc, #112]	@ (800a1b4 <vTaskSwitchContext+0xbc>)
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0e3      	beq.n	800a11c <vTaskSwitchContext+0x24>
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4a15      	ldr	r2, [pc, #84]	@ (800a1b4 <vTaskSwitchContext+0xbc>)
 800a160:	4413      	add	r3, r2
 800a162:	60bb      	str	r3, [r7, #8]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	605a      	str	r2, [r3, #4]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	3308      	adds	r3, #8
 800a176:	429a      	cmp	r2, r3
 800a178:	d104      	bne.n	800a184 <vTaskSwitchContext+0x8c>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	605a      	str	r2, [r3, #4]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	4a0b      	ldr	r2, [pc, #44]	@ (800a1b8 <vTaskSwitchContext+0xc0>)
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4a08      	ldr	r2, [pc, #32]	@ (800a1b0 <vTaskSwitchContext+0xb8>)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a194:	4b08      	ldr	r3, [pc, #32]	@ (800a1b8 <vTaskSwitchContext+0xc0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3354      	adds	r3, #84	@ 0x54
 800a19a:	4a08      	ldr	r2, [pc, #32]	@ (800a1bc <vTaskSwitchContext+0xc4>)
 800a19c:	6013      	str	r3, [r2, #0]
}
 800a19e:	bf00      	nop
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bc80      	pop	{r7}
 800a1a6:	4770      	bx	lr
 800a1a8:	2000300c 	.word	0x2000300c
 800a1ac:	20002ff8 	.word	0x20002ff8
 800a1b0:	20002fec 	.word	0x20002fec
 800a1b4:	20002b14 	.word	0x20002b14
 800a1b8:	20002b10 	.word	0x20002b10
 800a1bc:	20000180 	.word	0x20000180

0800a1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10b      	bne.n	800a1e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	60fb      	str	r3, [r7, #12]
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1e8:	4b07      	ldr	r3, [pc, #28]	@ (800a208 <vTaskPlaceOnEventList+0x48>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3318      	adds	r3, #24
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7fe fb5d 	bl	80088b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	6838      	ldr	r0, [r7, #0]
 800a1fa:	f000 fb41 	bl	800a880 <prvAddCurrentTaskToDelayedList>
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20002b10 	.word	0x20002b10

0800a20c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10b      	bne.n	800a236 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	617b      	str	r3, [r7, #20]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a236:	4b12      	ldr	r3, [pc, #72]	@ (800a280 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10b      	bne.n	800a256 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	613b      	str	r3, [r7, #16]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a256:	4b0b      	ldr	r3, [pc, #44]	@ (800a284 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a260:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a262:	4b08      	ldr	r3, [pc, #32]	@ (800a284 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3318      	adds	r3, #24
 800a268:	4619      	mov	r1, r3
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7fe fafd 	bl	800886a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fb04 	bl	800a880 <prvAddCurrentTaskToDelayedList>
}
 800a278:	bf00      	nop
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000300c 	.word	0x2000300c
 800a284:	20002b10 	.word	0x20002b10

0800a288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	617b      	str	r3, [r7, #20]
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	e7fd      	b.n	800a2ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2dc <vTaskPlaceOnEventListRestricted+0x54>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3318      	adds	r3, #24
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7fe fad5 	bl	800886a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	68b8      	ldr	r0, [r7, #8]
 800a2d0:	f000 fad6 	bl	800a880 <prvAddCurrentTaskToDelayedList>
	}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20002b10 	.word	0x20002b10

0800a2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60fb      	str	r3, [r7, #12]
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3318      	adds	r3, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fb04 	bl	8008920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a318:	4b1d      	ldr	r3, [pc, #116]	@ (800a390 <xTaskRemoveFromEventList+0xb0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d11d      	bne.n	800a35c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3304      	adds	r3, #4
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fafb 	bl	8008920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32e:	4b19      	ldr	r3, [pc, #100]	@ (800a394 <xTaskRemoveFromEventList+0xb4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d903      	bls.n	800a33e <xTaskRemoveFromEventList+0x5e>
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33a:	4a16      	ldr	r2, [pc, #88]	@ (800a394 <xTaskRemoveFromEventList+0xb4>)
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a342:	4613      	mov	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4a13      	ldr	r2, [pc, #76]	@ (800a398 <xTaskRemoveFromEventList+0xb8>)
 800a34c:	441a      	add	r2, r3
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	3304      	adds	r3, #4
 800a352:	4619      	mov	r1, r3
 800a354:	4610      	mov	r0, r2
 800a356:	f7fe fa88 	bl	800886a <vListInsertEnd>
 800a35a:	e005      	b.n	800a368 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	3318      	adds	r3, #24
 800a360:	4619      	mov	r1, r3
 800a362:	480e      	ldr	r0, [pc, #56]	@ (800a39c <xTaskRemoveFromEventList+0xbc>)
 800a364:	f7fe fa81 	bl	800886a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a0 <xTaskRemoveFromEventList+0xc0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a372:	429a      	cmp	r2, r3
 800a374:	d905      	bls.n	800a382 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a376:	2301      	movs	r3, #1
 800a378:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a37a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <xTaskRemoveFromEventList+0xc4>)
 800a37c:	2201      	movs	r2, #1
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	e001      	b.n	800a386 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a382:	2300      	movs	r3, #0
 800a384:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a386:	697b      	ldr	r3, [r7, #20]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	2000300c 	.word	0x2000300c
 800a394:	20002fec 	.word	0x20002fec
 800a398:	20002b14 	.word	0x20002b14
 800a39c:	20002fa4 	.word	0x20002fa4
 800a3a0:	20002b10 	.word	0x20002b10
 800a3a4:	20002ff8 	.word	0x20002ff8

0800a3a8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a3b2:	4b2a      	ldr	r3, [pc, #168]	@ (800a45c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	613b      	str	r3, [r7, #16]
}
 800a3cc:	bf00      	nop
 800a3ce:	bf00      	nop
 800a3d0:	e7fd      	b.n	800a3ce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10b      	bne.n	800a400 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	60fb      	str	r3, [r7, #12]
}
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7fe fa8d 	bl	8008920 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	3304      	adds	r3, #4
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fa88 	bl	8008920 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a414:	4b12      	ldr	r3, [pc, #72]	@ (800a460 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d903      	bls.n	800a424 <vTaskRemoveFromUnorderedEventList+0x7c>
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	4a0f      	ldr	r2, [pc, #60]	@ (800a460 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4a0c      	ldr	r2, [pc, #48]	@ (800a464 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a432:	441a      	add	r2, r3
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	3304      	adds	r3, #4
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	f7fe fa15 	bl	800886a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a444:	4b08      	ldr	r3, [pc, #32]	@ (800a468 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d902      	bls.n	800a454 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a44e:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a450:	2201      	movs	r2, #1
 800a452:	601a      	str	r2, [r3, #0]
	}
}
 800a454:	bf00      	nop
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	2000300c 	.word	0x2000300c
 800a460:	20002fec 	.word	0x20002fec
 800a464:	20002b14 	.word	0x20002b14
 800a468:	20002b10 	.word	0x20002b10
 800a46c:	20002ff8 	.word	0x20002ff8

0800a470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a478:	4b06      	ldr	r3, [pc, #24]	@ (800a494 <vTaskInternalSetTimeOutState+0x24>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a480:	4b05      	ldr	r3, [pc, #20]	@ (800a498 <vTaskInternalSetTimeOutState+0x28>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	605a      	str	r2, [r3, #4]
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20002ffc 	.word	0x20002ffc
 800a498:	20002fe8 	.word	0x20002fe8

0800a49c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10b      	bne.n	800a4c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	613b      	str	r3, [r7, #16]
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10b      	bne.n	800a4e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	60fb      	str	r3, [r7, #12]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a4e2:	f7fe fb3b 	bl	8008b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a55c <xTaskCheckForTimeOut+0xc0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d102      	bne.n	800a506 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a500:	2300      	movs	r3, #0
 800a502:	61fb      	str	r3, [r7, #28]
 800a504:	e023      	b.n	800a54e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <xTaskCheckForTimeOut+0xc4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d007      	beq.n	800a522 <xTaskCheckForTimeOut+0x86>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d302      	bcc.n	800a522 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	e015      	b.n	800a54e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d20b      	bcs.n	800a544 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ff99 	bl	800a470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	e004      	b.n	800a54e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a54a:	2301      	movs	r3, #1
 800a54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a54e:	f7fe fb35 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 800a552:	69fb      	ldr	r3, [r7, #28]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20002fe8 	.word	0x20002fe8
 800a560:	20002ffc 	.word	0x20002ffc

0800a564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a568:	4b03      	ldr	r3, [pc, #12]	@ (800a578 <vTaskMissedYield+0x14>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20002ff8 	.word	0x20002ff8

0800a57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a584:	f000 f852 	bl	800a62c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a588:	4b06      	ldr	r3, [pc, #24]	@ (800a5a4 <prvIdleTask+0x28>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d9f9      	bls.n	800a584 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a590:	4b05      	ldr	r3, [pc, #20]	@ (800a5a8 <prvIdleTask+0x2c>)
 800a592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5a0:	e7f0      	b.n	800a584 <prvIdleTask+0x8>
 800a5a2:	bf00      	nop
 800a5a4:	20002b14 	.word	0x20002b14
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e00c      	b.n	800a5d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4a12      	ldr	r2, [pc, #72]	@ (800a60c <prvInitialiseTaskLists+0x60>)
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe f924 	bl	8008814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b37      	cmp	r3, #55	@ 0x37
 800a5d6:	d9ef      	bls.n	800a5b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5d8:	480d      	ldr	r0, [pc, #52]	@ (800a610 <prvInitialiseTaskLists+0x64>)
 800a5da:	f7fe f91b 	bl	8008814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5de:	480d      	ldr	r0, [pc, #52]	@ (800a614 <prvInitialiseTaskLists+0x68>)
 800a5e0:	f7fe f918 	bl	8008814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5e4:	480c      	ldr	r0, [pc, #48]	@ (800a618 <prvInitialiseTaskLists+0x6c>)
 800a5e6:	f7fe f915 	bl	8008814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ea:	480c      	ldr	r0, [pc, #48]	@ (800a61c <prvInitialiseTaskLists+0x70>)
 800a5ec:	f7fe f912 	bl	8008814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5f0:	480b      	ldr	r0, [pc, #44]	@ (800a620 <prvInitialiseTaskLists+0x74>)
 800a5f2:	f7fe f90f 	bl	8008814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a624 <prvInitialiseTaskLists+0x78>)
 800a5f8:	4a05      	ldr	r2, [pc, #20]	@ (800a610 <prvInitialiseTaskLists+0x64>)
 800a5fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <prvInitialiseTaskLists+0x7c>)
 800a5fe:	4a05      	ldr	r2, [pc, #20]	@ (800a614 <prvInitialiseTaskLists+0x68>)
 800a600:	601a      	str	r2, [r3, #0]
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20002b14 	.word	0x20002b14
 800a610:	20002f74 	.word	0x20002f74
 800a614:	20002f88 	.word	0x20002f88
 800a618:	20002fa4 	.word	0x20002fa4
 800a61c:	20002fb8 	.word	0x20002fb8
 800a620:	20002fd0 	.word	0x20002fd0
 800a624:	20002f9c 	.word	0x20002f9c
 800a628:	20002fa0 	.word	0x20002fa0

0800a62c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a632:	e019      	b.n	800a668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a634:	f7fe fa92 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a638:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <prvCheckTasksWaitingTermination+0x50>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3304      	adds	r3, #4
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe f96b 	bl	8008920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a64a:	4b0d      	ldr	r3, [pc, #52]	@ (800a680 <prvCheckTasksWaitingTermination+0x54>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	4a0b      	ldr	r2, [pc, #44]	@ (800a680 <prvCheckTasksWaitingTermination+0x54>)
 800a652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a654:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3b01      	subs	r3, #1
 800a65a:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a65c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a65e:	f7fe faad 	bl	8008bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f810 	bl	800a688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <prvCheckTasksWaitingTermination+0x58>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e1      	bne.n	800a634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20002fb8 	.word	0x20002fb8
 800a680:	20002fe4 	.word	0x20002fe4
 800a684:	20002fcc 	.word	0x20002fcc

0800a688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3354      	adds	r3, #84	@ 0x54
 800a694:	4618      	mov	r0, r3
 800a696:	f002 ffa9 	bl	800d5ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fd ff95 	bl	80085d8 <vPortFree>
				vPortFree( pxTCB );
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fd ff92 	bl	80085d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6b4:	e019      	b.n	800a6ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d103      	bne.n	800a6c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7fd ff89 	bl	80085d8 <vPortFree>
	}
 800a6c6:	e010      	b.n	800a6ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d00b      	beq.n	800a6ea <prvDeleteTCB+0x62>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	60fb      	str	r3, [r7, #12]
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	e7fd      	b.n	800a6e6 <prvDeleteTCB+0x5e>
	}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a72c <prvResetNextTaskUnblockTime+0x38>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a704:	4b0a      	ldr	r3, [pc, #40]	@ (800a730 <prvResetNextTaskUnblockTime+0x3c>)
 800a706:	f04f 32ff 	mov.w	r2, #4294967295
 800a70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a70c:	e008      	b.n	800a720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70e:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <prvResetNextTaskUnblockTime+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	4a04      	ldr	r2, [pc, #16]	@ (800a730 <prvResetNextTaskUnblockTime+0x3c>)
 800a71e:	6013      	str	r3, [r2, #0]
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20002f9c 	.word	0x20002f9c
 800a730:	20003004 	.word	0x20003004

0800a734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a73a:	4b0b      	ldr	r3, [pc, #44]	@ (800a768 <xTaskGetSchedulerState+0x34>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a742:	2301      	movs	r3, #1
 800a744:	607b      	str	r3, [r7, #4]
 800a746:	e008      	b.n	800a75a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a748:	4b08      	ldr	r3, [pc, #32]	@ (800a76c <xTaskGetSchedulerState+0x38>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a750:	2302      	movs	r3, #2
 800a752:	607b      	str	r3, [r7, #4]
 800a754:	e001      	b.n	800a75a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a756:	2300      	movs	r3, #0
 800a758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a75a:	687b      	ldr	r3, [r7, #4]
	}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	20002ff0 	.word	0x20002ff0
 800a76c:	2000300c 	.word	0x2000300c

0800a770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d058      	beq.n	800a838 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a786:	4b2f      	ldr	r3, [pc, #188]	@ (800a844 <xTaskPriorityDisinherit+0xd4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d00b      	beq.n	800a7a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60bb      	str	r3, [r7, #8]
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7cc:	1e5a      	subs	r2, r3, #1
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d02c      	beq.n	800a838 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d128      	bne.n	800a838 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe f898 	bl	8008920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a808:	4b0f      	ldr	r3, [pc, #60]	@ (800a848 <xTaskPriorityDisinherit+0xd8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d903      	bls.n	800a818 <xTaskPriorityDisinherit+0xa8>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a814:	4a0c      	ldr	r2, [pc, #48]	@ (800a848 <xTaskPriorityDisinherit+0xd8>)
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4a09      	ldr	r2, [pc, #36]	@ (800a84c <xTaskPriorityDisinherit+0xdc>)
 800a826:	441a      	add	r2, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fe f81b 	bl	800886a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a838:	697b      	ldr	r3, [r7, #20]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20002b10 	.word	0x20002b10
 800a848:	20002fec 	.word	0x20002fec
 800a84c:	20002b14 	.word	0x20002b14

0800a850 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a856:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <uxTaskResetEventItemValue+0x2c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85e:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <uxTaskResetEventItemValue+0x2c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	4b05      	ldr	r3, [pc, #20]	@ (800a87c <uxTaskResetEventItemValue+0x2c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a86c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a86e:	687b      	ldr	r3, [r7, #4]
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20002b10 	.word	0x20002b10

0800a880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a88a:	4b21      	ldr	r3, [pc, #132]	@ (800a910 <prvAddCurrentTaskToDelayedList+0x90>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a890:	4b20      	ldr	r3, [pc, #128]	@ (800a914 <prvAddCurrentTaskToDelayedList+0x94>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3304      	adds	r3, #4
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe f842 	bl	8008920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a2:	d10a      	bne.n	800a8ba <prvAddCurrentTaskToDelayedList+0x3a>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d007      	beq.n	800a8ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a914 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4819      	ldr	r0, [pc, #100]	@ (800a918 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8b4:	f7fd ffd9 	bl	800886a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8b8:	e026      	b.n	800a908 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4413      	add	r3, r2
 800a8c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8c2:	4b14      	ldr	r3, [pc, #80]	@ (800a914 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d209      	bcs.n	800a8e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d2:	4b12      	ldr	r3, [pc, #72]	@ (800a91c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7fd ffe6 	bl	80088b0 <vListInsert>
}
 800a8e4:	e010      	b.n	800a908 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	@ (800a920 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a914 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f7fd ffdc 	bl	80088b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a924 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d202      	bcs.n	800a908 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a902:	4a08      	ldr	r2, [pc, #32]	@ (800a924 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	6013      	str	r3, [r2, #0]
}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	20002fe8 	.word	0x20002fe8
 800a914:	20002b10 	.word	0x20002b10
 800a918:	20002fd0 	.word	0x20002fd0
 800a91c:	20002fa0 	.word	0x20002fa0
 800a920:	20002f9c 	.word	0x20002f9c
 800a924:	20003004 	.word	0x20003004

0800a928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	@ 0x28
 800a92c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a932:	f000 fb11 	bl	800af58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a936:	4b1d      	ldr	r3, [pc, #116]	@ (800a9ac <xTimerCreateTimerTask+0x84>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d021      	beq.n	800a982 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a942:	2300      	movs	r3, #0
 800a944:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a946:	1d3a      	adds	r2, r7, #4
 800a948:	f107 0108 	add.w	r1, r7, #8
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	4618      	mov	r0, r3
 800a952:	f7fd fb65 	bl	8008020 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	9202      	str	r2, [sp, #8]
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	2302      	movs	r3, #2
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	2300      	movs	r3, #0
 800a966:	460a      	mov	r2, r1
 800a968:	4911      	ldr	r1, [pc, #68]	@ (800a9b0 <xTimerCreateTimerTask+0x88>)
 800a96a:	4812      	ldr	r0, [pc, #72]	@ (800a9b4 <xTimerCreateTimerTask+0x8c>)
 800a96c:	f7fe ffec 	bl	8009948 <xTaskCreateStatic>
 800a970:	4603      	mov	r3, r0
 800a972:	4a11      	ldr	r2, [pc, #68]	@ (800a9b8 <xTimerCreateTimerTask+0x90>)
 800a974:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a976:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <xTimerCreateTimerTask+0x90>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a97e:	2301      	movs	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10b      	bne.n	800a9a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	613b      	str	r3, [r7, #16]
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	e7fd      	b.n	800a99c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a9a0:	697b      	ldr	r3, [r7, #20]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20003040 	.word	0x20003040
 800a9b0:	0800dff0 	.word	0x0800dff0
 800a9b4:	0800aaf5 	.word	0x0800aaf5
 800a9b8:	20003044 	.word	0x20003044

0800a9bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	@ 0x28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <xTimerGenericCommand+0x30>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	623b      	str	r3, [r7, #32]
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	e7fd      	b.n	800a9e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9ec:	4b19      	ldr	r3, [pc, #100]	@ (800aa54 <xTimerGenericCommand+0x98>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d02a      	beq.n	800aa4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b05      	cmp	r3, #5
 800aa04:	dc18      	bgt.n	800aa38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa06:	f7ff fe95 	bl	800a734 <xTaskGetSchedulerState>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d109      	bne.n	800aa24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa10:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <xTimerGenericCommand+0x98>)
 800aa12:	6818      	ldr	r0, [r3, #0]
 800aa14:	f107 0110 	add.w	r1, r7, #16
 800aa18:	2300      	movs	r3, #0
 800aa1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa1c:	f7fe fae6 	bl	8008fec <xQueueGenericSend>
 800aa20:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa22:	e012      	b.n	800aa4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa24:	4b0b      	ldr	r3, [pc, #44]	@ (800aa54 <xTimerGenericCommand+0x98>)
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	f107 0110 	add.w	r1, r7, #16
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f7fe fadc 	bl	8008fec <xQueueGenericSend>
 800aa34:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa36:	e008      	b.n	800aa4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa38:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <xTimerGenericCommand+0x98>)
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	f107 0110 	add.w	r1, r7, #16
 800aa40:	2300      	movs	r3, #0
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	f7fe fbd4 	bl	80091f0 <xQueueGenericSendFromISR>
 800aa48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3728      	adds	r7, #40	@ 0x28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	20003040 	.word	0x20003040

0800aa58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa62:	4b23      	ldr	r3, [pc, #140]	@ (800aaf0 <prvProcessExpiredTimer+0x98>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fd ff55 	bl	8008920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d023      	beq.n	800aacc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	18d1      	adds	r1, r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f000 f8d3 	bl	800ac3c <prvInsertTimerInActiveList>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d020      	beq.n	800aade <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	6978      	ldr	r0, [r7, #20]
 800aaa8:	f7ff ff88 	bl	800a9bc <xTimerGenericCommand>
 800aaac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d114      	bne.n	800aade <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	60fb      	str	r3, [r7, #12]
}
 800aac6:	bf00      	nop
 800aac8:	bf00      	nop
 800aaca:	e7fd      	b.n	800aac8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aad2:	f023 0301 	bic.w	r3, r3, #1
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	4798      	blx	r3
}
 800aae6:	bf00      	nop
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20003038 	.word	0x20003038

0800aaf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aafc:	f107 0308 	add.w	r3, r7, #8
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 f859 	bl	800abb8 <prvGetNextExpireTime>
 800ab06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 f805 	bl	800ab1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab12:	f000 f8d5 	bl	800acc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab16:	bf00      	nop
 800ab18:	e7f0      	b.n	800aafc <prvTimerTask+0x8>
	...

0800ab1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab26:	f7ff f973 	bl	8009e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f864 	bl	800abfc <prvSampleTimeNow>
 800ab34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d130      	bne.n	800ab9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10a      	bne.n	800ab58 <prvProcessTimerOrBlockTask+0x3c>
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d806      	bhi.n	800ab58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab4a:	f7ff f96f 	bl	8009e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ff81 	bl	800aa58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab56:	e024      	b.n	800aba2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d008      	beq.n	800ab70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab5e:	4b13      	ldr	r3, [pc, #76]	@ (800abac <prvProcessTimerOrBlockTask+0x90>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <prvProcessTimerOrBlockTask+0x50>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <prvProcessTimerOrBlockTask+0x52>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab70:	4b0f      	ldr	r3, [pc, #60]	@ (800abb0 <prvProcessTimerOrBlockTask+0x94>)
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f7fe feaf 	bl	80098e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab82:	f7ff f953 	bl	8009e2c <xTaskResumeAll>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab8c:	4b09      	ldr	r3, [pc, #36]	@ (800abb4 <prvProcessTimerOrBlockTask+0x98>)
 800ab8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	f3bf 8f6f 	isb	sy
}
 800ab9c:	e001      	b.n	800aba2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab9e:	f7ff f945 	bl	8009e2c <xTaskResumeAll>
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	2000303c 	.word	0x2000303c
 800abb0:	20003040 	.word	0x20003040
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abc0:	4b0d      	ldr	r3, [pc, #52]	@ (800abf8 <prvGetNextExpireTime+0x40>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <prvGetNextExpireTime+0x16>
 800abca:	2201      	movs	r2, #1
 800abcc:	e000      	b.n	800abd0 <prvGetNextExpireTime+0x18>
 800abce:	2200      	movs	r2, #0
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d105      	bne.n	800abe8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abdc:	4b06      	ldr	r3, [pc, #24]	@ (800abf8 <prvGetNextExpireTime+0x40>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	e001      	b.n	800abec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abec:	68fb      	ldr	r3, [r7, #12]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	20003038 	.word	0x20003038

0800abfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac04:	f7ff f9b0 	bl	8009f68 <xTaskGetTickCount>
 800ac08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac38 <prvSampleTimeNow+0x3c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d205      	bcs.n	800ac20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac14:	f000 f93a 	bl	800ae8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac26:	4a04      	ldr	r2, [pc, #16]	@ (800ac38 <prvSampleTimeNow+0x3c>)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20003048 	.word	0x20003048

0800ac3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d812      	bhi.n	800ac88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	e01b      	b.n	800acae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac76:	4b10      	ldr	r3, [pc, #64]	@ (800acb8 <prvInsertTimerInActiveList+0x7c>)
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7fd fe15 	bl	80088b0 <vListInsert>
 800ac86:	e012      	b.n	800acae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d206      	bcs.n	800ac9e <prvInsertTimerInActiveList+0x62>
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d302      	bcc.n	800ac9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e007      	b.n	800acae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac9e:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <prvInsertTimerInActiveList+0x80>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7fd fe01 	bl	80088b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acae:	697b      	ldr	r3, [r7, #20]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	2000303c 	.word	0x2000303c
 800acbc:	20003038 	.word	0x20003038

0800acc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08e      	sub	sp, #56	@ 0x38
 800acc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acc6:	e0ce      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	da19      	bge.n	800ad02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acce:	1d3b      	adds	r3, r7, #4
 800acd0:	3304      	adds	r3, #4
 800acd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61fb      	str	r3, [r7, #28]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf8:	6850      	ldr	r0, [r2, #4]
 800acfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acfc:	6892      	ldr	r2, [r2, #8]
 800acfe:	4611      	mov	r1, r2
 800ad00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f2c0 80ae 	blt.w	800ae66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad18:	3304      	adds	r3, #4
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fd fe00 	bl	8008920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad20:	463b      	mov	r3, r7
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff ff6a 	bl	800abfc <prvSampleTimeNow>
 800ad28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	f200 8097 	bhi.w	800ae60 <prvProcessReceivedCommands+0x1a0>
 800ad32:	a201      	add	r2, pc, #4	@ (adr r2, 800ad38 <prvProcessReceivedCommands+0x78>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ad61 	.word	0x0800ad61
 800ad3c:	0800ad61 	.word	0x0800ad61
 800ad40:	0800ad61 	.word	0x0800ad61
 800ad44:	0800add7 	.word	0x0800add7
 800ad48:	0800adeb 	.word	0x0800adeb
 800ad4c:	0800ae37 	.word	0x0800ae37
 800ad50:	0800ad61 	.word	0x0800ad61
 800ad54:	0800ad61 	.word	0x0800ad61
 800ad58:	0800add7 	.word	0x0800add7
 800ad5c:	0800adeb 	.word	0x0800adeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	18d1      	adds	r1, r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad80:	f7ff ff5c 	bl	800ac3c <prvInsertTimerInActiveList>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d06c      	beq.n	800ae64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d061      	beq.n	800ae64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	441a      	add	r2, r3
 800ada8:	2300      	movs	r3, #0
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	2300      	movs	r3, #0
 800adae:	2100      	movs	r1, #0
 800adb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adb2:	f7ff fe03 	bl	800a9bc <xTimerGenericCommand>
 800adb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d152      	bne.n	800ae64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	61bb      	str	r3, [r7, #24]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800addc:	f023 0301 	bic.w	r3, r3, #1
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ade8:	e03d      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf0:	f043 0301 	orr.w	r3, r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10b      	bne.n	800ae22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	617b      	str	r3, [r7, #20]
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	e7fd      	b.n	800ae1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	18d1      	adds	r1, r2, r3
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae30:	f7ff ff04 	bl	800ac3c <prvInsertTimerInActiveList>
					break;
 800ae34:	e017      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae3c:	f003 0302 	and.w	r3, r3, #2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae46:	f7fd fbc7 	bl	80085d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae4a:	e00c      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae52:	f023 0301 	bic.w	r3, r3, #1
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae5e:	e002      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae60:	bf00      	nop
 800ae62:	e000      	b.n	800ae66 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae66:	4b08      	ldr	r3, [pc, #32]	@ (800ae88 <prvProcessReceivedCommands+0x1c8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	1d39      	adds	r1, r7, #4
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fa5c 	bl	800932c <xQueueReceive>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f47f af26 	bne.w	800acc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	3730      	adds	r7, #48	@ 0x30
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20003040 	.word	0x20003040

0800ae8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae92:	e049      	b.n	800af28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae94:	4b2e      	ldr	r3, [pc, #184]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9e:	4b2c      	ldr	r3, [pc, #176]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fd fd37 	bl	8008920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d02f      	beq.n	800af28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4413      	add	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d90e      	bls.n	800aef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aee6:	4b1a      	ldr	r3, [pc, #104]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3304      	adds	r3, #4
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7fd fcdd 	bl	80088b0 <vListInsert>
 800aef6:	e017      	b.n	800af28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aef8:	2300      	movs	r3, #0
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	2300      	movs	r3, #0
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	2100      	movs	r1, #0
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff fd5a 	bl	800a9bc <xTimerGenericCommand>
 800af08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10b      	bne.n	800af28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	603b      	str	r3, [r7, #0]
}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	e7fd      	b.n	800af24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af28:	4b09      	ldr	r3, [pc, #36]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1b0      	bne.n	800ae94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af32:	4b07      	ldr	r3, [pc, #28]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af38:	4b06      	ldr	r3, [pc, #24]	@ (800af54 <prvSwitchTimerLists+0xc8>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a04      	ldr	r2, [pc, #16]	@ (800af50 <prvSwitchTimerLists+0xc4>)
 800af3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af40:	4a04      	ldr	r2, [pc, #16]	@ (800af54 <prvSwitchTimerLists+0xc8>)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	6013      	str	r3, [r2, #0]
}
 800af46:	bf00      	nop
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20003038 	.word	0x20003038
 800af54:	2000303c 	.word	0x2000303c

0800af58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af5e:	f7fd fdfd 	bl	8008b5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af62:	4b15      	ldr	r3, [pc, #84]	@ (800afb8 <prvCheckForValidListAndQueue+0x60>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d120      	bne.n	800afac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af6a:	4814      	ldr	r0, [pc, #80]	@ (800afbc <prvCheckForValidListAndQueue+0x64>)
 800af6c:	f7fd fc52 	bl	8008814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af70:	4813      	ldr	r0, [pc, #76]	@ (800afc0 <prvCheckForValidListAndQueue+0x68>)
 800af72:	f7fd fc4f 	bl	8008814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af76:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <prvCheckForValidListAndQueue+0x6c>)
 800af78:	4a10      	ldr	r2, [pc, #64]	@ (800afbc <prvCheckForValidListAndQueue+0x64>)
 800af7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af7c:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <prvCheckForValidListAndQueue+0x70>)
 800af7e:	4a10      	ldr	r2, [pc, #64]	@ (800afc0 <prvCheckForValidListAndQueue+0x68>)
 800af80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af82:	2300      	movs	r3, #0
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	4b11      	ldr	r3, [pc, #68]	@ (800afcc <prvCheckForValidListAndQueue+0x74>)
 800af88:	4a11      	ldr	r2, [pc, #68]	@ (800afd0 <prvCheckForValidListAndQueue+0x78>)
 800af8a:	2110      	movs	r1, #16
 800af8c:	200a      	movs	r0, #10
 800af8e:	f7fd ff51 	bl	8008e34 <xQueueGenericCreateStatic>
 800af92:	4603      	mov	r3, r0
 800af94:	4a08      	ldr	r2, [pc, #32]	@ (800afb8 <prvCheckForValidListAndQueue+0x60>)
 800af96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af98:	4b07      	ldr	r3, [pc, #28]	@ (800afb8 <prvCheckForValidListAndQueue+0x60>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afa0:	4b05      	ldr	r3, [pc, #20]	@ (800afb8 <prvCheckForValidListAndQueue+0x60>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	490b      	ldr	r1, [pc, #44]	@ (800afd4 <prvCheckForValidListAndQueue+0x7c>)
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe fc72 	bl	8009890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afac:	f7fd fe06 	bl	8008bbc <vPortExitCritical>
}
 800afb0:	bf00      	nop
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20003040 	.word	0x20003040
 800afbc:	20003010 	.word	0x20003010
 800afc0:	20003024 	.word	0x20003024
 800afc4:	20003038 	.word	0x20003038
 800afc8:	2000303c 	.word	0x2000303c
 800afcc:	200030ec 	.word	0x200030ec
 800afd0:	2000304c 	.word	0x2000304c
 800afd4:	0800dff8 	.word	0x0800dff8

0800afd8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	@ 0x28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800afe6:	f06f 0301 	mvn.w	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aff8:	4b06      	ldr	r3, [pc, #24]	@ (800b014 <xTimerPendFunctionCallFromISR+0x3c>)
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	f107 0114 	add.w	r1, r7, #20
 800b000:	2300      	movs	r3, #0
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	f7fe f8f4 	bl	80091f0 <xQueueGenericSendFromISR>
 800b008:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3728      	adds	r7, #40	@ 0x28
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20003040 	.word	0x20003040

0800b018 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7c1b      	ldrb	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d115      	bne.n	800b05c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b034:	2202      	movs	r2, #2
 800b036:	2181      	movs	r1, #129	@ 0x81
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 fe2c 	bl	800cc96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b048:	2202      	movs	r2, #2
 800b04a:	2101      	movs	r1, #1
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fe22 	bl	800cc96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b05a:	e012      	b.n	800b082 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b05c:	2340      	movs	r3, #64	@ 0x40
 800b05e:	2202      	movs	r2, #2
 800b060:	2181      	movs	r1, #129	@ 0x81
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 fe17 	bl	800cc96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b06e:	2340      	movs	r3, #64	@ 0x40
 800b070:	2202      	movs	r2, #2
 800b072:	2101      	movs	r1, #1
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fe0e 	bl	800cc96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b082:	2308      	movs	r3, #8
 800b084:	2203      	movs	r2, #3
 800b086:	2182      	movs	r1, #130	@ 0x82
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 fe04 	bl	800cc96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b094:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b098:	f001 ff24 	bl	800cee4 <USBD_static_malloc>
 800b09c:	4602      	mov	r2, r0
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	73fb      	strb	r3, [r7, #15]
 800b0b2:	e026      	b.n	800b102 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ba:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7c1b      	ldrb	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f001 fec3 	bl	800ce76 <USBD_LL_PrepareReceive>
 800b0f0:	e007      	b.n	800b102 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0f8:	2340      	movs	r3, #64	@ 0x40
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 feba 	bl	800ce76 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b102:	7bfb      	ldrb	r3, [r7, #15]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b11c:	2181      	movs	r1, #129	@ 0x81
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 fddf 	bl	800cce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b12a:	2101      	movs	r1, #1
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 fdd8 	bl	800cce2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b13a:	2182      	movs	r1, #130	@ 0x82
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f001 fdd0 	bl	800cce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00e      	beq.n	800b170 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b162:	4618      	mov	r0, r3
 800b164:	f001 feca 	bl	800cefc <USBD_static_free>
    pdev->pClassData = NULL;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b086      	sub	sp, #24
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b18a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d039      	beq.n	800b218 <USBD_CDC_Setup+0x9e>
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d17f      	bne.n	800b2a8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	88db      	ldrh	r3, [r3, #6]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d029      	beq.n	800b204 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	b25b      	sxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da11      	bge.n	800b1de <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b1c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	88d2      	ldrh	r2, [r2, #6]
 800b1cc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1ce:	6939      	ldr	r1, [r7, #16]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	88db      	ldrh	r3, [r3, #6]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 f9d6 	bl	800c588 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b1dc:	e06b      	b.n	800b2b6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	785a      	ldrb	r2, [r3, #1]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	88db      	ldrh	r3, [r3, #6]
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1f4:	6939      	ldr	r1, [r7, #16]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	88db      	ldrh	r3, [r3, #6]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f9f1 	bl	800c5e4 <USBD_CtlPrepareRx>
      break;
 800b202:	e058      	b.n	800b2b6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	7850      	ldrb	r0, [r2, #1]
 800b210:	2200      	movs	r2, #0
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	4798      	blx	r3
      break;
 800b216:	e04e      	b.n	800b2b6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	2b0b      	cmp	r3, #11
 800b21e:	d02e      	beq.n	800b27e <USBD_CDC_Setup+0x104>
 800b220:	2b0b      	cmp	r3, #11
 800b222:	dc38      	bgt.n	800b296 <USBD_CDC_Setup+0x11c>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <USBD_CDC_Setup+0xb4>
 800b228:	2b0a      	cmp	r3, #10
 800b22a:	d014      	beq.n	800b256 <USBD_CDC_Setup+0xdc>
 800b22c:	e033      	b.n	800b296 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b234:	2b03      	cmp	r3, #3
 800b236:	d107      	bne.n	800b248 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b238:	f107 030c 	add.w	r3, r7, #12
 800b23c:	2202      	movs	r2, #2
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 f9a1 	bl	800c588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b246:	e02e      	b.n	800b2a6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 f932 	bl	800c4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b250:	2302      	movs	r3, #2
 800b252:	75fb      	strb	r3, [r7, #23]
          break;
 800b254:	e027      	b.n	800b2a6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d107      	bne.n	800b270 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b260:	f107 030f 	add.w	r3, r7, #15
 800b264:	2201      	movs	r2, #1
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 f98d 	bl	800c588 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b26e:	e01a      	b.n	800b2a6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 f91e 	bl	800c4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b278:	2302      	movs	r3, #2
 800b27a:	75fb      	strb	r3, [r7, #23]
          break;
 800b27c:	e013      	b.n	800b2a6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b284:	2b03      	cmp	r3, #3
 800b286:	d00d      	beq.n	800b2a4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 f912 	bl	800c4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b290:	2302      	movs	r3, #2
 800b292:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b294:	e006      	b.n	800b2a4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 f90b 	bl	800c4b4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b29e:	2302      	movs	r3, #2
 800b2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a2:	e000      	b.n	800b2a6 <USBD_CDC_Setup+0x12c>
          break;
 800b2a4:	bf00      	nop
      }
      break;
 800b2a6:	e006      	b.n	800b2b6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f001 f902 	bl	800c4b4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b4:	bf00      	nop
  }

  return ret;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2da:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d03a      	beq.n	800b35c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b2e6:	78fa      	ldrb	r2, [r7, #3]
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	331c      	adds	r3, #28
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d029      	beq.n	800b350 <USBD_CDC_DataIn+0x90>
 800b2fc:	78fa      	ldrb	r2, [r7, #3]
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	331c      	adds	r3, #28
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	78f9      	ldrb	r1, [r7, #3]
 800b310:	68b8      	ldr	r0, [r7, #8]
 800b312:	460b      	mov	r3, r1
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	440b      	add	r3, r1
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	4403      	add	r3, r0
 800b31c:	3320      	adds	r3, #32
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	fbb2 f1f3 	udiv	r1, r2, r3
 800b324:	fb01 f303 	mul.w	r3, r1, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d110      	bne.n	800b350 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b32e:	78fa      	ldrb	r2, [r7, #3]
 800b330:	6879      	ldr	r1, [r7, #4]
 800b332:	4613      	mov	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	440b      	add	r3, r1
 800b33c:	331c      	adds	r3, #28
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b342:	78f9      	ldrb	r1, [r7, #3]
 800b344:	2300      	movs	r3, #0
 800b346:	2200      	movs	r2, #0
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 fd71 	bl	800ce30 <USBD_LL_Transmit>
 800b34e:	e003      	b.n	800b358 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	e000      	b.n	800b35e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b35c:	2302      	movs	r3, #2
  }
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b378:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fd9c 	bl	800cebc <USBD_LL_GetRxDataSize>
 800b384:	4602      	mov	r2, r0
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00d      	beq.n	800b3b2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4798      	blx	r3

    return USBD_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e000      	b.n	800b3b4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b3b2:	2302      	movs	r3, #2
  }
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d014      	beq.n	800b400 <USBD_CDC_EP0_RxReady+0x44>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b3dc:	2bff      	cmp	r3, #255	@ 0xff
 800b3de:	d00f      	beq.n	800b400 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b3ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	22ff      	movs	r2, #255	@ 0xff
 800b3fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
	...

0800b40c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2243      	movs	r2, #67	@ 0x43
 800b418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b41a:	4b03      	ldr	r3, [pc, #12]	@ (800b428 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	bc80      	pop	{r7}
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20000098 	.word	0x20000098

0800b42c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2243      	movs	r2, #67	@ 0x43
 800b438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b43a:	4b03      	ldr	r3, [pc, #12]	@ (800b448 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	20000054 	.word	0x20000054

0800b44c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2243      	movs	r2, #67	@ 0x43
 800b458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b45a:	4b03      	ldr	r3, [pc, #12]	@ (800b468 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	200000dc 	.word	0x200000dc

0800b46c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	220a      	movs	r2, #10
 800b478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b47a:	4b03      	ldr	r3, [pc, #12]	@ (800b488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000010 	.word	0x20000010

0800b48c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b496:	2302      	movs	r3, #2
 800b498:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bc80      	pop	{r7}
 800b4b6:	4770      	bx	lr

0800b4b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b4d6:	88fa      	ldrh	r2, [r7, #6]
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	371c      	adds	r7, #28
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr

0800b4ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d017      	beq.n	800b55a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7c1b      	ldrb	r3, [r3, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d109      	bne.n	800b546 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b53c:	2101      	movs	r1, #1
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 fc99 	bl	800ce76 <USBD_LL_PrepareReceive>
 800b544:	e007      	b.n	800b556 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b54c:	2340      	movs	r3, #64	@ 0x40
 800b54e:	2101      	movs	r1, #1
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 fc90 	bl	800ce76 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b55a:	2302      	movs	r3, #2
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b578:	2302      	movs	r3, #2
 800b57a:	e01a      	b.n	800b5b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	79fa      	ldrb	r2, [r7, #7]
 800b5a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f001 fafe 	bl	800cbac <USBD_LL_Init>

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d006      	beq.n	800b5dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	73fb      	strb	r3, [r7, #15]
 800b5da:	e001      	b.n	800b5e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bc80      	pop	{r7}
 800b5ea:	4770      	bx	lr

0800b5ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 fb33 	bl	800cc60 <USBD_LL_Start>

  return USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	bc80      	pop	{r7}
 800b616:	4770      	bx	lr

0800b618 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b624:	2302      	movs	r3, #2
 800b626:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00c      	beq.n	800b64c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	78fa      	ldrb	r2, [r7, #3]
 800b63c:	4611      	mov	r1, r2
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	460b      	mov	r3, r1
 800b660:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	78fa      	ldrb	r2, [r7, #3]
 800b66c:	4611      	mov	r1, r2
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3

  return USBD_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fed7 	bl	800c442 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b6b0:	f003 031f 	and.w	r3, r3, #31
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d016      	beq.n	800b6e6 <USBD_LL_SetupStage+0x6a>
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d81c      	bhi.n	800b6f6 <USBD_LL_SetupStage+0x7a>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <USBD_LL_SetupStage+0x4a>
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d008      	beq.n	800b6d6 <USBD_LL_SetupStage+0x5a>
 800b6c4:	e017      	b.n	800b6f6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f9ca 	bl	800ba68 <USBD_StdDevReq>
      break;
 800b6d4:	e01a      	b.n	800b70c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fa2c 	bl	800bb3c <USBD_StdItfReq>
      break;
 800b6e4:	e012      	b.n	800b70c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa6c 	bl	800bbcc <USBD_StdEPReq>
      break;
 800b6f4:	e00a      	b.n	800b70c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b6fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b700:	b2db      	uxtb	r3, r3
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 fb0b 	bl	800cd20 <USBD_LL_StallEP>
      break;
 800b70a:	bf00      	nop
  }

  return USBD_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b086      	sub	sp, #24
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	460b      	mov	r3, r1
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b724:	7afb      	ldrb	r3, [r7, #11]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d14b      	bne.n	800b7c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b730:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d134      	bne.n	800b7a6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	429a      	cmp	r2, r3
 800b746:	d919      	bls.n	800b77c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	1ad2      	subs	r2, r2, r3
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b75e:	429a      	cmp	r2, r3
 800b760:	d203      	bcs.n	800b76a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b766:	b29b      	uxth	r3, r3
 800b768:	e002      	b.n	800b770 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b76e:	b29b      	uxth	r3, r3
 800b770:	461a      	mov	r2, r3
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 ff53 	bl	800c620 <USBD_CtlContinueRx>
 800b77a:	e038      	b.n	800b7ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00a      	beq.n	800b79e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d105      	bne.n	800b79e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 ff50 	bl	800c644 <USBD_CtlSendStatus>
 800b7a4:	e023      	b.n	800b7ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7ac:	2b05      	cmp	r3, #5
 800b7ae:	d11e      	bne.n	800b7ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f001 fab0 	bl	800cd20 <USBD_LL_StallEP>
 800b7c0:	e015      	b.n	800b7ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00d      	beq.n	800b7ea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d108      	bne.n	800b7ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	7afa      	ldrb	r2, [r7, #11]
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	4798      	blx	r3
 800b7e8:	e001      	b.n	800b7ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e000      	b.n	800b7f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	460b      	mov	r3, r1
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b806:	7afb      	ldrb	r3, [r7, #11]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d17f      	bne.n	800b90c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3314      	adds	r3, #20
 800b810:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d15c      	bne.n	800b8d6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	429a      	cmp	r2, r3
 800b826:	d915      	bls.n	800b854 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	68da      	ldr	r2, [r3, #12]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	461a      	mov	r2, r3
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 febd 	bl	800c5c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b846:	2300      	movs	r3, #0
 800b848:	2200      	movs	r2, #0
 800b84a:	2100      	movs	r1, #0
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f001 fb12 	bl	800ce76 <USBD_LL_PrepareReceive>
 800b852:	e04e      	b.n	800b8f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	6912      	ldr	r2, [r2, #16]
 800b85c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b860:	fb01 f202 	mul.w	r2, r1, r2
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d11c      	bne.n	800b8a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	689a      	ldr	r2, [r3, #8]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b872:	429a      	cmp	r2, r3
 800b874:	d316      	bcc.n	800b8a4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b880:	429a      	cmp	r2, r3
 800b882:	d20f      	bcs.n	800b8a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b884:	2200      	movs	r2, #0
 800b886:	2100      	movs	r1, #0
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 fe99 	bl	800c5c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b896:	2300      	movs	r3, #0
 800b898:	2200      	movs	r2, #0
 800b89a:	2100      	movs	r1, #0
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f001 faea 	bl	800ce76 <USBD_LL_PrepareReceive>
 800b8a2:	e026      	b.n	800b8f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00a      	beq.n	800b8c6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d105      	bne.n	800b8c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b8c6:	2180      	movs	r1, #128	@ 0x80
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f001 fa29 	bl	800cd20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fecb 	bl	800c66a <USBD_CtlReceiveStatus>
 800b8d4:	e00d      	b.n	800b8f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d004      	beq.n	800b8ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d103      	bne.n	800b8f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b8ea:	2180      	movs	r1, #128	@ 0x80
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f001 fa17 	bl	800cd20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d11d      	bne.n	800b938 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fe81 	bl	800b604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b90a:	e015      	b.n	800b938 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00d      	beq.n	800b934 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d108      	bne.n	800b934 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	7afa      	ldrb	r2, [r7, #11]
 800b92c:	4611      	mov	r1, r2
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3
 800b932:	e001      	b.n	800b938 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b934:	2302      	movs	r3, #2
 800b936:	e000      	b.n	800b93a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b082      	sub	sp, #8
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b94a:	2340      	movs	r3, #64	@ 0x40
 800b94c:	2200      	movs	r2, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 f9a0 	bl	800cc96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2240      	movs	r2, #64	@ 0x40
 800b962:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b966:	2340      	movs	r3, #64	@ 0x40
 800b968:	2200      	movs	r2, #0
 800b96a:	2180      	movs	r1, #128	@ 0x80
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f992 	bl	800cc96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2240      	movs	r2, #64	@ 0x40
 800b97c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d009      	beq.n	800b9ba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6852      	ldr	r2, [r2, #4]
 800b9b2:	b2d2      	uxtb	r2, r2
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
  }

  return USBD_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bc80      	pop	{r7}
 800b9e0:	4770      	bx	lr

0800b9e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bc80      	pop	{r7}
 800ba08:	4770      	bx	lr

0800ba0a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d105      	bne.n	800ba28 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bc80      	pop	{r7}
 800ba32:	4770      	bx	lr

0800ba34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	d10b      	bne.n	800ba5e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba7e:	2b40      	cmp	r3, #64	@ 0x40
 800ba80:	d005      	beq.n	800ba8e <USBD_StdDevReq+0x26>
 800ba82:	2b40      	cmp	r3, #64	@ 0x40
 800ba84:	d84f      	bhi.n	800bb26 <USBD_StdDevReq+0xbe>
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d009      	beq.n	800ba9e <USBD_StdDevReq+0x36>
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d14b      	bne.n	800bb26 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
      break;
 800ba9c:	e048      	b.n	800bb30 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	d839      	bhi.n	800bb1a <USBD_StdDevReq+0xb2>
 800baa6:	a201      	add	r2, pc, #4	@ (adr r2, 800baac <USBD_StdDevReq+0x44>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bafd 	.word	0x0800bafd
 800bab0:	0800bb11 	.word	0x0800bb11
 800bab4:	0800bb1b 	.word	0x0800bb1b
 800bab8:	0800bb07 	.word	0x0800bb07
 800babc:	0800bb1b 	.word	0x0800bb1b
 800bac0:	0800badf 	.word	0x0800badf
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800bb1b 	.word	0x0800bb1b
 800bacc:	0800baf3 	.word	0x0800baf3
 800bad0:	0800bae9 	.word	0x0800bae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f9dc 	bl	800be94 <USBD_GetDescriptor>
          break;
 800badc:	e022      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fb3f 	bl	800c164 <USBD_SetAddress>
          break;
 800bae6:	e01d      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fb7e 	bl	800c1ec <USBD_SetConfig>
          break;
 800baf0:	e018      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fc07 	bl	800c308 <USBD_GetConfig>
          break;
 800bafa:	e013      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fc37 	bl	800c372 <USBD_GetStatus>
          break;
 800bb04:	e00e      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fc65 	bl	800c3d8 <USBD_SetFeature>
          break;
 800bb0e:	e009      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fc74 	bl	800c400 <USBD_ClrFeature>
          break;
 800bb18:	e004      	b.n	800bb24 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fcc9 	bl	800c4b4 <USBD_CtlError>
          break;
 800bb22:	bf00      	nop
      }
      break;
 800bb24:	e004      	b.n	800bb30 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fcc3 	bl	800c4b4 <USBD_CtlError>
      break;
 800bb2e:	bf00      	nop
  }

  return ret;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop

0800bb3c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb52:	2b40      	cmp	r3, #64	@ 0x40
 800bb54:	d005      	beq.n	800bb62 <USBD_StdItfReq+0x26>
 800bb56:	2b40      	cmp	r3, #64	@ 0x40
 800bb58:	d82e      	bhi.n	800bbb8 <USBD_StdItfReq+0x7c>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <USBD_StdItfReq+0x26>
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	d12a      	bne.n	800bbb8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d81d      	bhi.n	800bbaa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	889b      	ldrh	r3, [r3, #4]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d813      	bhi.n	800bba0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	88db      	ldrh	r3, [r3, #6]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d110      	bne.n	800bbb4 <USBD_StdItfReq+0x78>
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10d      	bne.n	800bbb4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fd53 	bl	800c644 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb9e:	e009      	b.n	800bbb4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fc86 	bl	800c4b4 <USBD_CtlError>
          break;
 800bba8:	e004      	b.n	800bbb4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fc81 	bl	800c4b4 <USBD_CtlError>
          break;
 800bbb2:	e000      	b.n	800bbb6 <USBD_StdItfReq+0x7a>
          break;
 800bbb4:	bf00      	nop
      }
      break;
 800bbb6:	e004      	b.n	800bbc2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fc7a 	bl	800c4b4 <USBD_CtlError>
      break;
 800bbc0:	bf00      	nop
  }

  return USBD_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	889b      	ldrh	r3, [r3, #4]
 800bbde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbe8:	2b40      	cmp	r3, #64	@ 0x40
 800bbea:	d007      	beq.n	800bbfc <USBD_StdEPReq+0x30>
 800bbec:	2b40      	cmp	r3, #64	@ 0x40
 800bbee:	f200 8146 	bhi.w	800be7e <USBD_StdEPReq+0x2b2>
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <USBD_StdEPReq+0x40>
 800bbf6:	2b20      	cmp	r3, #32
 800bbf8:	f040 8141 	bne.w	800be7e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	4798      	blx	r3
      break;
 800bc0a:	e13d      	b.n	800be88 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d10a      	bne.n	800bc2e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
 800bc2c:	e12d      	b.n	800be8a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d007      	beq.n	800bc46 <USBD_StdEPReq+0x7a>
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	f300 811b 	bgt.w	800be72 <USBD_StdEPReq+0x2a6>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d072      	beq.n	800bd26 <USBD_StdEPReq+0x15a>
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d03a      	beq.n	800bcba <USBD_StdEPReq+0xee>
 800bc44:	e115      	b.n	800be72 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d002      	beq.n	800bc56 <USBD_StdEPReq+0x8a>
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d015      	beq.n	800bc80 <USBD_StdEPReq+0xb4>
 800bc54:	e02b      	b.n	800bcae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00c      	beq.n	800bc76 <USBD_StdEPReq+0xaa>
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	2b80      	cmp	r3, #128	@ 0x80
 800bc60:	d009      	beq.n	800bc76 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 f85a 	bl	800cd20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bc6c:	2180      	movs	r1, #128	@ 0x80
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 f856 	bl	800cd20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc74:	e020      	b.n	800bcb8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fc1b 	bl	800c4b4 <USBD_CtlError>
              break;
 800bc7e:	e01b      	b.n	800bcb8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	885b      	ldrh	r3, [r3, #2]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10e      	bne.n	800bca6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00b      	beq.n	800bca6 <USBD_StdEPReq+0xda>
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	2b80      	cmp	r3, #128	@ 0x80
 800bc92:	d008      	beq.n	800bca6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	88db      	ldrh	r3, [r3, #6]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d104      	bne.n	800bca6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bc9c:	7bbb      	ldrb	r3, [r7, #14]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 f83d 	bl	800cd20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fccc 	bl	800c644 <USBD_CtlSendStatus>

              break;
 800bcac:	e004      	b.n	800bcb8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fbff 	bl	800c4b4 <USBD_CtlError>
              break;
 800bcb6:	bf00      	nop
          }
          break;
 800bcb8:	e0e0      	b.n	800be7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d002      	beq.n	800bcca <USBD_StdEPReq+0xfe>
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d015      	beq.n	800bcf4 <USBD_StdEPReq+0x128>
 800bcc8:	e026      	b.n	800bd18 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <USBD_StdEPReq+0x11e>
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b80      	cmp	r3, #128	@ 0x80
 800bcd4:	d009      	beq.n	800bcea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f001 f820 	bl	800cd20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bce0:	2180      	movs	r1, #128	@ 0x80
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 f81c 	bl	800cd20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bce8:	e01c      	b.n	800bd24 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fbe1 	bl	800c4b4 <USBD_CtlError>
              break;
 800bcf2:	e017      	b.n	800bd24 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d112      	bne.n	800bd22 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d004      	beq.n	800bd10 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f001 f827 	bl	800cd5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fc97 	bl	800c644 <USBD_CtlSendStatus>
              }
              break;
 800bd16:	e004      	b.n	800bd22 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fbca 	bl	800c4b4 <USBD_CtlError>
              break;
 800bd20:	e000      	b.n	800bd24 <USBD_StdEPReq+0x158>
              break;
 800bd22:	bf00      	nop
          }
          break;
 800bd24:	e0aa      	b.n	800be7c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d002      	beq.n	800bd36 <USBD_StdEPReq+0x16a>
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d032      	beq.n	800bd9a <USBD_StdEPReq+0x1ce>
 800bd34:	e097      	b.n	800be66 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <USBD_StdEPReq+0x180>
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	2b80      	cmp	r3, #128	@ 0x80
 800bd40:	d004      	beq.n	800bd4c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fbb5 	bl	800c4b4 <USBD_CtlError>
                break;
 800bd4a:	e091      	b.n	800be70 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	da0b      	bge.n	800bd6c <USBD_StdEPReq+0x1a0>
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	3310      	adds	r3, #16
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	4413      	add	r3, r2
 800bd68:	3304      	adds	r3, #4
 800bd6a:	e00b      	b.n	800bd84 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
 800bd6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	3304      	adds	r3, #4
 800bd84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	4619      	mov	r1, r3
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fbf8 	bl	800c588 <USBD_CtlSendData>
              break;
 800bd98:	e06a      	b.n	800be70 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da11      	bge.n	800bdc6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	f003 020f 	and.w	r2, r3, #15
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	440b      	add	r3, r1
 800bdb4:	3318      	adds	r3, #24
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d117      	bne.n	800bdec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fb78 	bl	800c4b4 <USBD_CtlError>
                  break;
 800bdc4:	e054      	b.n	800be70 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	f003 020f 	and.w	r2, r3, #15
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	440b      	add	r3, r1
 800bdd8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d104      	bne.n	800bdec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fb65 	bl	800c4b4 <USBD_CtlError>
                  break;
 800bdea:	e041      	b.n	800be70 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	da0b      	bge.n	800be0c <USBD_StdEPReq+0x240>
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
 800bdf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	3310      	adds	r3, #16
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4413      	add	r3, r2
 800be08:	3304      	adds	r3, #4
 800be0a:	e00b      	b.n	800be24 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	3304      	adds	r3, #4
 800be24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <USBD_StdEPReq+0x266>
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b80      	cmp	r3, #128	@ 0x80
 800be30:	d103      	bne.n	800be3a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	e00e      	b.n	800be58 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800be3a:	7bbb      	ldrb	r3, [r7, #14]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 ffac 	bl	800cd9c <USBD_LL_IsStallEP>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2201      	movs	r2, #1
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e002      	b.n	800be58 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2202      	movs	r2, #2
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fb92 	bl	800c588 <USBD_CtlSendData>
              break;
 800be64:	e004      	b.n	800be70 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fb23 	bl	800c4b4 <USBD_CtlError>
              break;
 800be6e:	bf00      	nop
          }
          break;
 800be70:	e004      	b.n	800be7c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fb1d 	bl	800c4b4 <USBD_CtlError>
          break;
 800be7a:	bf00      	nop
      }
      break;
 800be7c:	e004      	b.n	800be88 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fb17 	bl	800c4b4 <USBD_CtlError>
      break;
 800be86:	bf00      	nop
  }

  return ret;
 800be88:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	885b      	ldrh	r3, [r3, #2]
 800beae:	0a1b      	lsrs	r3, r3, #8
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	3b01      	subs	r3, #1
 800beb4:	2b06      	cmp	r3, #6
 800beb6:	f200 8128 	bhi.w	800c10a <USBD_GetDescriptor+0x276>
 800beba:	a201      	add	r2, pc, #4	@ (adr r2, 800bec0 <USBD_GetDescriptor+0x2c>)
 800bebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec0:	0800bedd 	.word	0x0800bedd
 800bec4:	0800bef5 	.word	0x0800bef5
 800bec8:	0800bf35 	.word	0x0800bf35
 800becc:	0800c10b 	.word	0x0800c10b
 800bed0:	0800c10b 	.word	0x0800c10b
 800bed4:	0800c0ab 	.word	0x0800c0ab
 800bed8:	0800c0d7 	.word	0x0800c0d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	7c12      	ldrb	r2, [r2, #16]
 800bee8:	f107 0108 	add.w	r1, r7, #8
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	60f8      	str	r0, [r7, #12]
      break;
 800bef2:	e112      	b.n	800c11a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7c1b      	ldrb	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10d      	bne.n	800bf18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf04:	f107 0208 	add.w	r2, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	2202      	movs	r2, #2
 800bf14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf16:	e100      	b.n	800c11a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf20:	f107 0208 	add.w	r2, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	2202      	movs	r2, #2
 800bf30:	701a      	strb	r2, [r3, #0]
      break;
 800bf32:	e0f2      	b.n	800c11a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	885b      	ldrh	r3, [r3, #2]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b05      	cmp	r3, #5
 800bf3c:	f200 80ac 	bhi.w	800c098 <USBD_GetDescriptor+0x204>
 800bf40:	a201      	add	r2, pc, #4	@ (adr r2, 800bf48 <USBD_GetDescriptor+0xb4>)
 800bf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf46:	bf00      	nop
 800bf48:	0800bf61 	.word	0x0800bf61
 800bf4c:	0800bf95 	.word	0x0800bf95
 800bf50:	0800bfc9 	.word	0x0800bfc9
 800bf54:	0800bffd 	.word	0x0800bffd
 800bf58:	0800c031 	.word	0x0800c031
 800bf5c:	0800c065 	.word	0x0800c065
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00b      	beq.n	800bf84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	7c12      	ldrb	r2, [r2, #16]
 800bf78:	f107 0108 	add.w	r1, r7, #8
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4798      	blx	r3
 800bf80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf82:	e091      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fa94 	bl	800c4b4 <USBD_CtlError>
            err++;
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	72fb      	strb	r3, [r7, #11]
          break;
 800bf92:	e089      	b.n	800c0a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00b      	beq.n	800bfb8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	7c12      	ldrb	r2, [r2, #16]
 800bfac:	f107 0108 	add.w	r1, r7, #8
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	4798      	blx	r3
 800bfb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfb6:	e077      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fa7a 	bl	800c4b4 <USBD_CtlError>
            err++;
 800bfc0:	7afb      	ldrb	r3, [r7, #11]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfc6:	e06f      	b.n	800c0a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00b      	beq.n	800bfec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	7c12      	ldrb	r2, [r2, #16]
 800bfe0:	f107 0108 	add.w	r1, r7, #8
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4798      	blx	r3
 800bfe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfea:	e05d      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fa60 	bl	800c4b4 <USBD_CtlError>
            err++;
 800bff4:	7afb      	ldrb	r3, [r7, #11]
 800bff6:	3301      	adds	r3, #1
 800bff8:	72fb      	strb	r3, [r7, #11]
          break;
 800bffa:	e055      	b.n	800c0a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00b      	beq.n	800c020 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	7c12      	ldrb	r2, [r2, #16]
 800c014:	f107 0108 	add.w	r1, r7, #8
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c01e:	e043      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fa46 	bl	800c4b4 <USBD_CtlError>
            err++;
 800c028:	7afb      	ldrb	r3, [r7, #11]
 800c02a:	3301      	adds	r3, #1
 800c02c:	72fb      	strb	r3, [r7, #11]
          break;
 800c02e:	e03b      	b.n	800c0a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	7c12      	ldrb	r2, [r2, #16]
 800c048:	f107 0108 	add.w	r1, r7, #8
 800c04c:	4610      	mov	r0, r2
 800c04e:	4798      	blx	r3
 800c050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c052:	e029      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fa2c 	bl	800c4b4 <USBD_CtlError>
            err++;
 800c05c:	7afb      	ldrb	r3, [r7, #11]
 800c05e:	3301      	adds	r3, #1
 800c060:	72fb      	strb	r3, [r7, #11]
          break;
 800c062:	e021      	b.n	800c0a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	7c12      	ldrb	r2, [r2, #16]
 800c07c:	f107 0108 	add.w	r1, r7, #8
 800c080:	4610      	mov	r0, r2
 800c082:	4798      	blx	r3
 800c084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c086:	e00f      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fa12 	bl	800c4b4 <USBD_CtlError>
            err++;
 800c090:	7afb      	ldrb	r3, [r7, #11]
 800c092:	3301      	adds	r3, #1
 800c094:	72fb      	strb	r3, [r7, #11]
          break;
 800c096:	e007      	b.n	800c0a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fa0a 	bl	800c4b4 <USBD_CtlError>
          err++;
 800c0a0:	7afb      	ldrb	r3, [r7, #11]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c0a6:	e038      	b.n	800c11a <USBD_GetDescriptor+0x286>
 800c0a8:	e037      	b.n	800c11a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7c1b      	ldrb	r3, [r3, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d109      	bne.n	800c0c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ba:	f107 0208 	add.w	r2, r7, #8
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4798      	blx	r3
 800c0c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0c4:	e029      	b.n	800c11a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f9f3 	bl	800c4b4 <USBD_CtlError>
        err++;
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0d4:	e021      	b.n	800c11a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	7c1b      	ldrb	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10d      	bne.n	800c0fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e6:	f107 0208 	add.w	r2, r7, #8
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	4798      	blx	r3
 800c0ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	2207      	movs	r2, #7
 800c0f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0f8:	e00f      	b.n	800c11a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f9d9 	bl	800c4b4 <USBD_CtlError>
        err++;
 800c102:	7afb      	ldrb	r3, [r7, #11]
 800c104:	3301      	adds	r3, #1
 800c106:	72fb      	strb	r3, [r7, #11]
      break;
 800c108:	e007      	b.n	800c11a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f9d1 	bl	800c4b4 <USBD_CtlError>
      err++;
 800c112:	7afb      	ldrb	r3, [r7, #11]
 800c114:	3301      	adds	r3, #1
 800c116:	72fb      	strb	r3, [r7, #11]
      break;
 800c118:	bf00      	nop
  }

  if (err != 0U)
 800c11a:	7afb      	ldrb	r3, [r7, #11]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d11c      	bne.n	800c15a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c120:	893b      	ldrh	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d011      	beq.n	800c14a <USBD_GetDescriptor+0x2b6>
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	88db      	ldrh	r3, [r3, #6]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00d      	beq.n	800c14a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	88da      	ldrh	r2, [r3, #6]
 800c132:	893b      	ldrh	r3, [r7, #8]
 800c134:	4293      	cmp	r3, r2
 800c136:	bf28      	it	cs
 800c138:	4613      	movcs	r3, r2
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c13e:	893b      	ldrh	r3, [r7, #8]
 800c140:	461a      	mov	r2, r3
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fa1f 	bl	800c588 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d104      	bne.n	800c15c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fa76 	bl	800c644 <USBD_CtlSendStatus>
 800c158:	e000      	b.n	800c15c <USBD_GetDescriptor+0x2c8>
    return;
 800c15a:	bf00      	nop
    }
  }
}
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop

0800c164 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	889b      	ldrh	r3, [r3, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d130      	bne.n	800c1d8 <USBD_SetAddress+0x74>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	88db      	ldrh	r3, [r3, #6]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d12c      	bne.n	800c1d8 <USBD_SetAddress+0x74>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	885b      	ldrh	r3, [r3, #2]
 800c182:	2b7f      	cmp	r3, #127	@ 0x7f
 800c184:	d828      	bhi.n	800c1d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	885b      	ldrh	r3, [r3, #2]
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c190:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d104      	bne.n	800c1a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f988 	bl	800c4b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a4:	e01d      	b.n	800c1e2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7bfa      	ldrb	r2, [r7, #15]
 800c1aa:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fe1d 	bl	800cdf2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fa43 	bl	800c644 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1cc:	e009      	b.n	800c1e2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d6:	e004      	b.n	800c1e2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f96a 	bl	800c4b4 <USBD_CtlError>
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	4b41      	ldr	r3, [pc, #260]	@ (800c304 <USBD_SetConfig+0x118>)
 800c1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c200:	4b40      	ldr	r3, [pc, #256]	@ (800c304 <USBD_SetConfig+0x118>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d904      	bls.n	800c212 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f952 	bl	800c4b4 <USBD_CtlError>
 800c210:	e075      	b.n	800c2fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d002      	beq.n	800c222 <USBD_SetConfig+0x36>
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d023      	beq.n	800c268 <USBD_SetConfig+0x7c>
 800c220:	e062      	b.n	800c2e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c222:	4b38      	ldr	r3, [pc, #224]	@ (800c304 <USBD_SetConfig+0x118>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d01a      	beq.n	800c260 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c22a:	4b36      	ldr	r3, [pc, #216]	@ (800c304 <USBD_SetConfig+0x118>)
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2203      	movs	r2, #3
 800c238:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c23c:	4b31      	ldr	r3, [pc, #196]	@ (800c304 <USBD_SetConfig+0x118>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	4619      	mov	r1, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff f9e8 	bl	800b618 <USBD_SetClassConfig>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d104      	bne.n	800c258 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f92f 	bl	800c4b4 <USBD_CtlError>
            return;
 800c256:	e052      	b.n	800c2fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f9f3 	bl	800c644 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c25e:	e04e      	b.n	800c2fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f9ef 	bl	800c644 <USBD_CtlSendStatus>
        break;
 800c266:	e04a      	b.n	800c2fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c268:	4b26      	ldr	r3, [pc, #152]	@ (800c304 <USBD_SetConfig+0x118>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d112      	bne.n	800c296 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c278:	4b22      	ldr	r3, [pc, #136]	@ (800c304 <USBD_SetConfig+0x118>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c282:	4b20      	ldr	r3, [pc, #128]	@ (800c304 <USBD_SetConfig+0x118>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff f9e4 	bl	800b656 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f9d8 	bl	800c644 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c294:	e033      	b.n	800c2fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c296:	4b1b      	ldr	r3, [pc, #108]	@ (800c304 <USBD_SetConfig+0x118>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d01d      	beq.n	800c2e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff f9d2 	bl	800b656 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c2b2:	4b14      	ldr	r3, [pc, #80]	@ (800c304 <USBD_SetConfig+0x118>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c2bc:	4b11      	ldr	r3, [pc, #68]	@ (800c304 <USBD_SetConfig+0x118>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff f9a8 	bl	800b618 <USBD_SetClassConfig>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d104      	bne.n	800c2d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f8ef 	bl	800c4b4 <USBD_CtlError>
            return;
 800c2d6:	e012      	b.n	800c2fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f9b3 	bl	800c644 <USBD_CtlSendStatus>
        break;
 800c2de:	e00e      	b.n	800c2fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f9af 	bl	800c644 <USBD_CtlSendStatus>
        break;
 800c2e6:	e00a      	b.n	800c2fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f8e2 	bl	800c4b4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c2f0:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <USBD_SetConfig+0x118>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff f9ad 	bl	800b656 <USBD_ClrClassConfig>
        break;
 800c2fc:	bf00      	nop
    }
  }
}
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	2000313c 	.word	0x2000313c

0800c308 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	88db      	ldrh	r3, [r3, #6]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d004      	beq.n	800c324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f8c9 	bl	800c4b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c322:	e022      	b.n	800c36a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	dc02      	bgt.n	800c334 <USBD_GetConfig+0x2c>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dc03      	bgt.n	800c33a <USBD_GetConfig+0x32>
 800c332:	e015      	b.n	800c360 <USBD_GetConfig+0x58>
 800c334:	2b03      	cmp	r3, #3
 800c336:	d00b      	beq.n	800c350 <USBD_GetConfig+0x48>
 800c338:	e012      	b.n	800c360 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3308      	adds	r3, #8
 800c344:	2201      	movs	r2, #1
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f91d 	bl	800c588 <USBD_CtlSendData>
        break;
 800c34e:	e00c      	b.n	800c36a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3304      	adds	r3, #4
 800c354:	2201      	movs	r2, #1
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f915 	bl	800c588 <USBD_CtlSendData>
        break;
 800c35e:	e004      	b.n	800c36a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f8a6 	bl	800c4b4 <USBD_CtlError>
        break;
 800c368:	bf00      	nop
}
 800c36a:	bf00      	nop
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c382:	3b01      	subs	r3, #1
 800c384:	2b02      	cmp	r3, #2
 800c386:	d81e      	bhi.n	800c3c6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	88db      	ldrh	r3, [r3, #6]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d004      	beq.n	800c39a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f88e 	bl	800c4b4 <USBD_CtlError>
        break;
 800c398:	e01a      	b.n	800c3d0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2201      	movs	r2, #1
 800c39e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f043 0202 	orr.w	r2, r3, #2
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	330c      	adds	r3, #12
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f8e2 	bl	800c588 <USBD_CtlSendData>
      break;
 800c3c4:	e004      	b.n	800c3d0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f873 	bl	800c4b4 <USBD_CtlError>
      break;
 800c3ce:	bf00      	nop
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	885b      	ldrh	r3, [r3, #2]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d106      	bne.n	800c3f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f926 	bl	800c644 <USBD_CtlSendStatus>
  }
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c410:	3b01      	subs	r3, #1
 800c412:	2b02      	cmp	r3, #2
 800c414:	d80b      	bhi.n	800c42e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	885b      	ldrh	r3, [r3, #2]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d10c      	bne.n	800c438 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f90c 	bl	800c644 <USBD_CtlSendStatus>
      }
      break;
 800c42c:	e004      	b.n	800c438 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f83f 	bl	800c4b4 <USBD_CtlError>
      break;
 800c436:	e000      	b.n	800c43a <USBD_ClrFeature+0x3a>
      break;
 800c438:	bf00      	nop
  }
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781a      	ldrb	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	785a      	ldrb	r2, [r3, #1]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	3302      	adds	r3, #2
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	3303      	adds	r3, #3
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	4413      	add	r3, r2
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	3304      	adds	r3, #4
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	3305      	adds	r3, #5
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	021b      	lsls	r3, r3, #8
 800c486:	b29b      	uxth	r3, r3
 800c488:	4413      	add	r3, r2
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	3306      	adds	r3, #6
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	3307      	adds	r3, #7
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	021b      	lsls	r3, r3, #8
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	80da      	strh	r2, [r3, #6]

}
 800c4aa:	bf00      	nop
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bc80      	pop	{r7}
 800c4b2:	4770      	bx	lr

0800c4b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c4be:	2180      	movs	r1, #128	@ 0x80
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fc2d 	bl	800cd20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fc29 	bl	800cd20 <USBD_LL_StallEP>
}
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b086      	sub	sp, #24
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d032      	beq.n	800c552 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 f834 	bl	800c55a <USBD_GetLen>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	75fa      	strb	r2, [r7, #23]
 800c506:	461a      	mov	r2, r3
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4413      	add	r3, r2
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	7812      	ldrb	r2, [r2, #0]
 800c510:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	75fa      	strb	r2, [r7, #23]
 800c518:	461a      	mov	r2, r3
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	4413      	add	r3, r2
 800c51e:	2203      	movs	r2, #3
 800c520:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c522:	e012      	b.n	800c54a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	60fa      	str	r2, [r7, #12]
 800c52a:	7dfa      	ldrb	r2, [r7, #23]
 800c52c:	1c51      	adds	r1, r2, #1
 800c52e:	75f9      	strb	r1, [r7, #23]
 800c530:	4611      	mov	r1, r2
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	440a      	add	r2, r1
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	75fa      	strb	r2, [r7, #23]
 800c540:	461a      	mov	r2, r3
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	4413      	add	r3, r2
 800c546:	2200      	movs	r2, #0
 800c548:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1e8      	bne.n	800c524 <USBD_GetString+0x4e>
    }
  }
}
 800c552:	bf00      	nop
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c566:	e005      	b.n	800c574 <USBD_GetLen+0x1a>
  {
    len++;
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	3301      	adds	r3, #1
 800c56c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3301      	adds	r3, #1
 800c572:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1f5      	bne.n	800c568 <USBD_GetLen+0xe>
  }

  return len;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	bc80      	pop	{r7}
 800c586:	4770      	bx	lr

0800c588 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4613      	mov	r3, r2
 800c594:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2202      	movs	r2, #2
 800c59a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c59e:	88fa      	ldrh	r2, [r7, #6]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c5a4:	88fa      	ldrh	r2, [r7, #6]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 fc3d 	bl	800ce30 <USBD_LL_Transmit>

  return USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5ce:	88fb      	ldrh	r3, [r7, #6]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 fc2b 	bl	800ce30 <USBD_LL_Transmit>

  return USBD_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2203      	movs	r2, #3
 800c5f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c602:	88fa      	ldrh	r2, [r7, #6]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c60a:	88fb      	ldrh	r3, [r7, #6]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	2100      	movs	r1, #0
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 fc30 	bl	800ce76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c62e:	88fb      	ldrh	r3, [r7, #6]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 fc1e 	bl	800ce76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2204      	movs	r2, #4
 800c650:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c654:	2300      	movs	r3, #0
 800c656:	2200      	movs	r2, #0
 800c658:	2100      	movs	r1, #0
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fbe8 	bl	800ce30 <USBD_LL_Transmit>

  return USBD_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b082      	sub	sp, #8
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2205      	movs	r2, #5
 800c676:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c67a:	2300      	movs	r3, #0
 800c67c:	2200      	movs	r2, #0
 800c67e:	2100      	movs	r1, #0
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fbf8 	bl	800ce76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c694:	2200      	movs	r2, #0
 800c696:	4912      	ldr	r1, [pc, #72]	@ (800c6e0 <MX_USB_DEVICE_Init+0x50>)
 800c698:	4812      	ldr	r0, [pc, #72]	@ (800c6e4 <MX_USB_DEVICE_Init+0x54>)
 800c69a:	f7fe ff63 	bl	800b564 <USBD_Init>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6a4:	f7f4 f936 	bl	8000914 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6a8:	490f      	ldr	r1, [pc, #60]	@ (800c6e8 <MX_USB_DEVICE_Init+0x58>)
 800c6aa:	480e      	ldr	r0, [pc, #56]	@ (800c6e4 <MX_USB_DEVICE_Init+0x54>)
 800c6ac:	f7fe ff85 	bl	800b5ba <USBD_RegisterClass>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6b6:	f7f4 f92d 	bl	8000914 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6ba:	490c      	ldr	r1, [pc, #48]	@ (800c6ec <MX_USB_DEVICE_Init+0x5c>)
 800c6bc:	4809      	ldr	r0, [pc, #36]	@ (800c6e4 <MX_USB_DEVICE_Init+0x54>)
 800c6be:	f7fe fee5 	bl	800b48c <USBD_CDC_RegisterInterface>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6c8:	f7f4 f924 	bl	8000914 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6cc:	4805      	ldr	r0, [pc, #20]	@ (800c6e4 <MX_USB_DEVICE_Init+0x54>)
 800c6ce:	f7fe ff8d 	bl	800b5ec <USBD_Start>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6d8:	f7f4 f91c 	bl	8000914 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6dc:	bf00      	nop
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20000130 	.word	0x20000130
 800c6e4:	20003140 	.word	0x20003140
 800c6e8:	2000001c 	.word	0x2000001c
 800c6ec:	20000120 	.word	0x20000120

0800c6f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4905      	ldr	r1, [pc, #20]	@ (800c70c <CDC_Init_FS+0x1c>)
 800c6f8:	4805      	ldr	r0, [pc, #20]	@ (800c710 <CDC_Init_FS+0x20>)
 800c6fa:	f7fe fedd 	bl	800b4b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6fe:	4905      	ldr	r1, [pc, #20]	@ (800c714 <CDC_Init_FS+0x24>)
 800c700:	4803      	ldr	r0, [pc, #12]	@ (800c710 <CDC_Init_FS+0x20>)
 800c702:	f7fe fef2 	bl	800b4ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c706:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c708:	4618      	mov	r0, r3
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20003804 	.word	0x20003804
 800c710:	20003140 	.word	0x20003140
 800c714:	20003404 	.word	0x20003404

0800c718 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c718:	b480      	push	{r7}
 800c71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c71c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c71e:	4618      	mov	r0, r3
 800c720:	46bd      	mov	sp, r7
 800c722:	bc80      	pop	{r7}
 800c724:	4770      	bx	lr
	...

0800c728 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	6039      	str	r1, [r7, #0]
 800c732:	71fb      	strb	r3, [r7, #7]
 800c734:	4613      	mov	r3, r2
 800c736:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	2b23      	cmp	r3, #35	@ 0x23
 800c73c:	d84a      	bhi.n	800c7d4 <CDC_Control_FS+0xac>
 800c73e:	a201      	add	r2, pc, #4	@ (adr r2, 800c744 <CDC_Control_FS+0x1c>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c7d5 	.word	0x0800c7d5
 800c748:	0800c7d5 	.word	0x0800c7d5
 800c74c:	0800c7d5 	.word	0x0800c7d5
 800c750:	0800c7d5 	.word	0x0800c7d5
 800c754:	0800c7d5 	.word	0x0800c7d5
 800c758:	0800c7d5 	.word	0x0800c7d5
 800c75c:	0800c7d5 	.word	0x0800c7d5
 800c760:	0800c7d5 	.word	0x0800c7d5
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c7d5 	.word	0x0800c7d5
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c7d5 	.word	0x0800c7d5
 800c778:	0800c7d5 	.word	0x0800c7d5
 800c77c:	0800c7d5 	.word	0x0800c7d5
 800c780:	0800c7d5 	.word	0x0800c7d5
 800c784:	0800c7d5 	.word	0x0800c7d5
 800c788:	0800c7d5 	.word	0x0800c7d5
 800c78c:	0800c7d5 	.word	0x0800c7d5
 800c790:	0800c7d5 	.word	0x0800c7d5
 800c794:	0800c7d5 	.word	0x0800c7d5
 800c798:	0800c7d5 	.word	0x0800c7d5
 800c79c:	0800c7d5 	.word	0x0800c7d5
 800c7a0:	0800c7d5 	.word	0x0800c7d5
 800c7a4:	0800c7d5 	.word	0x0800c7d5
 800c7a8:	0800c7d5 	.word	0x0800c7d5
 800c7ac:	0800c7d5 	.word	0x0800c7d5
 800c7b0:	0800c7d5 	.word	0x0800c7d5
 800c7b4:	0800c7d5 	.word	0x0800c7d5
 800c7b8:	0800c7d5 	.word	0x0800c7d5
 800c7bc:	0800c7d5 	.word	0x0800c7d5
 800c7c0:	0800c7d5 	.word	0x0800c7d5
 800c7c4:	0800c7d5 	.word	0x0800c7d5
 800c7c8:	0800c7d5 	.word	0x0800c7d5
 800c7cc:	0800c7d5 	.word	0x0800c7d5
 800c7d0:	0800c7d5 	.word	0x0800c7d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7d4:	bf00      	nop
  }

  return (USBD_OK);
 800c7d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop

0800c7e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	4805      	ldr	r0, [pc, #20]	@ (800c808 <CDC_Receive_FS+0x24>)
 800c7f2:	f7fe fe7a 	bl	800b4ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7f6:	4804      	ldr	r0, [pc, #16]	@ (800c808 <CDC_Receive_FS+0x24>)
 800c7f8:	f7fe fe8a 	bl	800b510 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20003140 	.word	0x20003140

0800c80c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	2212      	movs	r2, #18
 800c81c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c81e:	4b03      	ldr	r3, [pc, #12]	@ (800c82c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	bc80      	pop	{r7}
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	2000014c 	.word	0x2000014c

0800c830 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2204      	movs	r2, #4
 800c840:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c842:	4b03      	ldr	r3, [pc, #12]	@ (800c850 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c844:	4618      	mov	r0, r3
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	bc80      	pop	{r7}
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20000160 	.word	0x20000160

0800c854 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d105      	bne.n	800c872 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	4907      	ldr	r1, [pc, #28]	@ (800c888 <USBD_FS_ProductStrDescriptor+0x34>)
 800c86a:	4808      	ldr	r0, [pc, #32]	@ (800c88c <USBD_FS_ProductStrDescriptor+0x38>)
 800c86c:	f7ff fe33 	bl	800c4d6 <USBD_GetString>
 800c870:	e004      	b.n	800c87c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	4904      	ldr	r1, [pc, #16]	@ (800c888 <USBD_FS_ProductStrDescriptor+0x34>)
 800c876:	4805      	ldr	r0, [pc, #20]	@ (800c88c <USBD_FS_ProductStrDescriptor+0x38>)
 800c878:	f7ff fe2d 	bl	800c4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c87c:	4b02      	ldr	r3, [pc, #8]	@ (800c888 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20003c04 	.word	0x20003c04
 800c88c:	0800e000 	.word	0x0800e000

0800c890 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	4904      	ldr	r1, [pc, #16]	@ (800c8b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c8a0:	4804      	ldr	r0, [pc, #16]	@ (800c8b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8a2:	f7ff fe18 	bl	800c4d6 <USBD_GetString>
  return USBD_StrDesc;
 800c8a6:	4b02      	ldr	r3, [pc, #8]	@ (800c8b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20003c04 	.word	0x20003c04
 800c8b4:	0800e018 	.word	0x0800e018

0800c8b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	221a      	movs	r2, #26
 800c8c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8ca:	f000 f843 	bl	800c954 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8ce:	4b02      	ldr	r3, [pc, #8]	@ (800c8d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20000164 	.word	0x20000164

0800c8dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	4907      	ldr	r1, [pc, #28]	@ (800c910 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8f2:	4808      	ldr	r0, [pc, #32]	@ (800c914 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8f4:	f7ff fdef 	bl	800c4d6 <USBD_GetString>
 800c8f8:	e004      	b.n	800c904 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	4904      	ldr	r1, [pc, #16]	@ (800c910 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8fe:	4805      	ldr	r0, [pc, #20]	@ (800c914 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c900:	f7ff fde9 	bl	800c4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c904:	4b02      	ldr	r3, [pc, #8]	@ (800c910 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20003c04 	.word	0x20003c04
 800c914:	0800e02c 	.word	0x0800e02c

0800c918 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d105      	bne.n	800c936 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	4907      	ldr	r1, [pc, #28]	@ (800c94c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c92e:	4808      	ldr	r0, [pc, #32]	@ (800c950 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c930:	f7ff fdd1 	bl	800c4d6 <USBD_GetString>
 800c934:	e004      	b.n	800c940 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	4904      	ldr	r1, [pc, #16]	@ (800c94c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c93a:	4805      	ldr	r0, [pc, #20]	@ (800c950 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c93c:	f7ff fdcb 	bl	800c4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c940:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20003c04 	.word	0x20003c04
 800c950:	0800e038 	.word	0x0800e038

0800c954 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c95a:	4b0f      	ldr	r3, [pc, #60]	@ (800c998 <Get_SerialNum+0x44>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c960:	4b0e      	ldr	r3, [pc, #56]	@ (800c99c <Get_SerialNum+0x48>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c966:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a0 <Get_SerialNum+0x4c>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4413      	add	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d009      	beq.n	800c98e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c97a:	2208      	movs	r2, #8
 800c97c:	4909      	ldr	r1, [pc, #36]	@ (800c9a4 <Get_SerialNum+0x50>)
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 f814 	bl	800c9ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c984:	2204      	movs	r2, #4
 800c986:	4908      	ldr	r1, [pc, #32]	@ (800c9a8 <Get_SerialNum+0x54>)
 800c988:	68b8      	ldr	r0, [r7, #8]
 800c98a:	f000 f80f 	bl	800c9ac <IntToUnicode>
  }
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	1ffff7e8 	.word	0x1ffff7e8
 800c99c:	1ffff7ec 	.word	0x1ffff7ec
 800c9a0:	1ffff7f0 	.word	0x1ffff7f0
 800c9a4:	20000166 	.word	0x20000166
 800c9a8:	20000176 	.word	0x20000176

0800c9ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9be:	2300      	movs	r3, #0
 800c9c0:	75fb      	strb	r3, [r7, #23]
 800c9c2:	e027      	b.n	800ca14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	0f1b      	lsrs	r3, r3, #28
 800c9c8:	2b09      	cmp	r3, #9
 800c9ca:	d80b      	bhi.n	800c9e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	0f1b      	lsrs	r3, r3, #28
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	440b      	add	r3, r1
 800c9dc:	3230      	adds	r2, #48	@ 0x30
 800c9de:	b2d2      	uxtb	r2, r2
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	e00a      	b.n	800c9fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	0f1b      	lsrs	r3, r3, #28
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3237      	adds	r2, #55	@ 0x37
 800c9f6:	b2d2      	uxtb	r2, r2
 800c9f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	3301      	adds	r3, #1
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	4413      	add	r3, r2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	3301      	adds	r3, #1
 800ca12:	75fb      	strb	r3, [r7, #23]
 800ca14:	7dfa      	ldrb	r2, [r7, #23]
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d3d3      	bcc.n	800c9c4 <IntToUnicode+0x18>
  }
}
 800ca1c:	bf00      	nop
 800ca1e:	bf00      	nop
 800ca20:	371c      	adds	r7, #28
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bc80      	pop	{r7}
 800ca26:	4770      	bx	lr

0800ca28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a0d      	ldr	r2, [pc, #52]	@ (800ca6c <HAL_PCD_MspInit+0x44>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d113      	bne.n	800ca62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca70 <HAL_PCD_MspInit+0x48>)
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ca70 <HAL_PCD_MspInit+0x48>)
 800ca40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca44:	61d3      	str	r3, [r2, #28]
 800ca46:	4b0a      	ldr	r3, [pc, #40]	@ (800ca70 <HAL_PCD_MspInit+0x48>)
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ca52:	2200      	movs	r2, #0
 800ca54:	2105      	movs	r1, #5
 800ca56:	2014      	movs	r0, #20
 800ca58:	f7f4 fddb 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca5c:	2014      	movs	r0, #20
 800ca5e:	f7f4 fdf4 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	40005c00 	.word	0x40005c00
 800ca70:	40021000 	.word	0x40021000

0800ca74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f7fe fdf6 	bl	800b67c <USBD_LL_SetupStage>
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800caaa:	78fa      	ldrb	r2, [r7, #3]
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	4613      	mov	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	440b      	add	r3, r1
 800cab8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	78fb      	ldrb	r3, [r7, #3]
 800cac0:	4619      	mov	r1, r3
 800cac2:	f7fe fe28 	bl	800b716 <USBD_LL_DataOutStage>
}
 800cac6:	bf00      	nop
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	440b      	add	r3, r1
 800caee:	3324      	adds	r3, #36	@ 0x24
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	78fb      	ldrb	r3, [r7, #3]
 800caf4:	4619      	mov	r1, r3
 800caf6:	f7fe fe7f 	bl	800b7f8 <USBD_LL_DataInStage>
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe ff8f 	bl	800ba34 <USBD_LL_SOF>
}
 800cb16:	bf00      	nop
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb26:	2301      	movs	r3, #1
 800cb28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	799b      	ldrb	r3, [r3, #6]
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d001      	beq.n	800cb36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb32:	f7f3 feef 	bl	8000914 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb3c:	7bfa      	ldrb	r2, [r7, #15]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fe ff3f 	bl	800b9c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fe fef8 	bl	800b942 <USBD_LL_Reset>
}
 800cb52:	bf00      	nop
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fe ff39 	bl	800b9e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	7a9b      	ldrb	r3, [r3, #10]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb78:	4b04      	ldr	r3, [pc, #16]	@ (800cb8c <HAL_PCD_SuspendCallback+0x30>)
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	4a03      	ldr	r2, [pc, #12]	@ (800cb8c <HAL_PCD_SuspendCallback+0x30>)
 800cb7e:	f043 0306 	orr.w	r3, r3, #6
 800cb82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	e000ed00 	.word	0xe000ed00

0800cb90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe ff33 	bl	800ba0a <USBD_LL_Resume>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbb4:	4a28      	ldr	r2, [pc, #160]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a26      	ldr	r2, [pc, #152]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbc0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cbc4:	4b24      	ldr	r3, [pc, #144]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbc6:	4a25      	ldr	r2, [pc, #148]	@ (800cc5c <USBD_LL_Init+0xb0>)
 800cbc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbca:	4b23      	ldr	r3, [pc, #140]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbcc:	2208      	movs	r2, #8
 800cbce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cbd0:	4b21      	ldr	r3, [pc, #132]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cbd6:	4b20      	ldr	r3, [pc, #128]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cbdc:	4b1e      	ldr	r3, [pc, #120]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cbe8:	481b      	ldr	r0, [pc, #108]	@ (800cc58 <USBD_LL_Init+0xac>)
 800cbea:	f7f5 f8c1 	bl	8001d70 <HAL_PCD_Init>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cbf4:	f7f3 fe8e 	bl	8000914 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbfe:	2318      	movs	r3, #24
 800cc00:	2200      	movs	r2, #0
 800cc02:	2100      	movs	r1, #0
 800cc04:	f7f6 fdd2 	bl	80037ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc0e:	2358      	movs	r3, #88	@ 0x58
 800cc10:	2200      	movs	r2, #0
 800cc12:	2180      	movs	r1, #128	@ 0x80
 800cc14:	f7f6 fdca 	bl	80037ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc1e:	23c0      	movs	r3, #192	@ 0xc0
 800cc20:	2200      	movs	r2, #0
 800cc22:	2181      	movs	r1, #129	@ 0x81
 800cc24:	f7f6 fdc2 	bl	80037ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc2e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc32:	2200      	movs	r2, #0
 800cc34:	2101      	movs	r1, #1
 800cc36:	f7f6 fdb9 	bl	80037ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc44:	2200      	movs	r2, #0
 800cc46:	2182      	movs	r1, #130	@ 0x82
 800cc48:	f7f6 fdb0 	bl	80037ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	20003e04 	.word	0x20003e04
 800cc5c:	40005c00 	.word	0x40005c00

0800cc60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f5 f970 	bl	8001f5c <HAL_PCD_Start>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 f94e 	bl	800cf24 <USBD_Get_USB_Status>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	4608      	mov	r0, r1
 800cca0:	4611      	mov	r1, r2
 800cca2:	461a      	mov	r2, r3
 800cca4:	4603      	mov	r3, r0
 800cca6:	70fb      	strb	r3, [r7, #3]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70bb      	strb	r3, [r7, #2]
 800ccac:	4613      	mov	r3, r2
 800ccae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccbe:	78bb      	ldrb	r3, [r7, #2]
 800ccc0:	883a      	ldrh	r2, [r7, #0]
 800ccc2:	78f9      	ldrb	r1, [r7, #3]
 800ccc4:	f7f5 fac4 	bl	8002250 <HAL_PCD_EP_Open>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 f928 	bl	800cf24 <USBD_Get_USB_Status>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	460b      	mov	r3, r1
 800ccec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccfc:	78fa      	ldrb	r2, [r7, #3]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7f5 fb02 	bl	800230a <HAL_PCD_EP_Close>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 f909 	bl	800cf24 <USBD_Get_USB_Status>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd3a:	78fa      	ldrb	r2, [r7, #3]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f5 fbaa 	bl	8002498 <HAL_PCD_EP_SetStall>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f8ea 	bl	800cf24 <USBD_Get_USB_Status>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	460b      	mov	r3, r1
 800cd68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd78:	78fa      	ldrb	r2, [r7, #3]
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7f5 fbeb 	bl	8002558 <HAL_PCD_EP_ClrStall>
 800cd82:	4603      	mov	r3, r0
 800cd84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 f8cb 	bl	800cf24 <USBD_Get_USB_Status>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da0b      	bge.n	800cdd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	3312      	adds	r3, #18
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	e00b      	b.n	800cde8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	440b      	add	r3, r1
 800cde2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cde6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bc80      	pop	{r7}
 800cdf0:	4770      	bx	lr

0800cdf2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce0c:	78fa      	ldrb	r2, [r7, #3]
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f5 f9f9 	bl	8002208 <HAL_PCD_SetAddress>
 800ce16:	4603      	mov	r3, r0
 800ce18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 f881 	bl	800cf24 <USBD_Get_USB_Status>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	72fb      	strb	r3, [r7, #11]
 800ce40:	4613      	mov	r3, r2
 800ce42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce52:	893b      	ldrh	r3, [r7, #8]
 800ce54:	7af9      	ldrb	r1, [r7, #11]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	f7f5 fae7 	bl	800242a <HAL_PCD_EP_Transmit>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f85e 	bl	800cf24 <USBD_Get_USB_Status>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b086      	sub	sp, #24
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	461a      	mov	r2, r3
 800ce82:	460b      	mov	r3, r1
 800ce84:	72fb      	strb	r3, [r7, #11]
 800ce86:	4613      	mov	r3, r2
 800ce88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce98:	893b      	ldrh	r3, [r7, #8]
 800ce9a:	7af9      	ldrb	r1, [r7, #11]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	f7f5 fa7c 	bl	800239a <HAL_PCD_EP_Receive>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 f83b 	bl	800cf24 <USBD_Get_USB_Status>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ceb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cece:	78fa      	ldrb	r2, [r7, #3]
 800ced0:	4611      	mov	r1, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f5 fa92 	bl	80023fc <HAL_PCD_EP_GetRxCount>
 800ced8:	4603      	mov	r3, r0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ceec:	4b02      	ldr	r3, [pc, #8]	@ (800cef8 <USBD_static_malloc+0x14>)
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bc80      	pop	{r7}
 800cef6:	4770      	bx	lr
 800cef8:	200040dc 	.word	0x200040dc

0800cefc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]

}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bc80      	pop	{r7}
 800cf0c:	4770      	bx	lr

0800cf0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b083      	sub	sp, #12
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	460b      	mov	r3, r1
 800cf18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bc80      	pop	{r7}
 800cf22:	4770      	bx	lr

0800cf24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf32:	79fb      	ldrb	r3, [r7, #7]
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d817      	bhi.n	800cf68 <USBD_Get_USB_Status+0x44>
 800cf38:	a201      	add	r2, pc, #4	@ (adr r2, 800cf40 <USBD_Get_USB_Status+0x1c>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cf51 	.word	0x0800cf51
 800cf44:	0800cf57 	.word	0x0800cf57
 800cf48:	0800cf5d 	.word	0x0800cf5d
 800cf4c:	0800cf63 	.word	0x0800cf63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	73fb      	strb	r3, [r7, #15]
    break;
 800cf54:	e00b      	b.n	800cf6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf56:	2302      	movs	r3, #2
 800cf58:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5a:	e008      	b.n	800cf6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf60:	e005      	b.n	800cf6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf62:	2302      	movs	r3, #2
 800cf64:	73fb      	strb	r3, [r7, #15]
    break;
 800cf66:	e002      	b.n	800cf6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6c:	bf00      	nop
  }
  return usb_status;
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc80      	pop	{r7}
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop

0800cf7c <_send_message_to_console>:
/**
 * \brief
 *
 */
static osStatus_t _send_message_to_console(uint8_t *p_str)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]
	osMessageQueueId_t message_id = get_print_msg_queue_id();
 800cf88:	f000 fa72 	bl	800d470 <get_print_msg_queue_id>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	60bb      	str	r3, [r7, #8]

	status = osMessageQueuePut(message_id, p_str, 0U, 0U);
 800cf90:	2300      	movs	r3, #0
 800cf92:	2200      	movs	r2, #0
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	68b8      	ldr	r0, [r7, #8]
 800cf98:	f7fa ff4c 	bl	8007e34 <osMessageQueuePut>
 800cf9c:	60f8      	str	r0, [r7, #12]

	return status;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <print_to_console>:
 * \brief Print some msg to the console.
 * \detaled Print some msg to the console with the next format string - [MSG]
 *
 */
osStatus_t print_to_console(const char *const p_msg)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b0a4      	sub	sp, #144	@ 0x90
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	uint8_t print_buffer[PRINT_BUFFER_SIZE];

	/// \todo Check p_thread_name + p_msg size. We have a 64-byte buffer.

	sprintf(print_buffer, "[%s]\n\r", p_msg);
 800cfb6:	f107 030c 	add.w	r3, r7, #12
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	4908      	ldr	r1, [pc, #32]	@ (800cfe0 <print_to_console+0x38>)
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 faec 	bl	800d59c <siprintf>
	status = _send_message_to_console(print_buffer);
 800cfc4:	f107 030c 	add.w	r3, r7, #12
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff ffd7 	bl	800cf7c <_send_message_to_console>
 800cfce:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

	return status;
 800cfd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3790      	adds	r7, #144	@ 0x90
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	0800e048 	.word	0x0800e048

0800cfe4 <delay_us>:
/**
 * \brief
 *
 */
void delay_us(uint32_t us)
{
 800cfe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfe8:	b086      	sub	sp, #24
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	60f8      	str	r0, [r7, #12]
	uint32_t tick = osKernelSysTick();
 800cfee:	f7fa fcd7 	bl	80079a0 <osKernelGetSysTimerCount>
 800cff2:	6178      	str	r0, [r7, #20]

	while ((osKernelSysTick() - tick) < osKernelSysTickMicroSec(us));
 800cff4:	bf00      	nop
 800cff6:	f7fa fcd3 	bl	80079a0 <osKernelGetSysTimerCount>
 800cffa:	4602      	mov	r2, r0
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2200      	movs	r2, #0
 800d002:	603b      	str	r3, [r7, #0]
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	469a      	mov	sl, r3
 800d00c:	4693      	mov	fp, r2
 800d00e:	f7fa fd01 	bl	8007a14 <osKernelGetSysTimerFreq>
 800d012:	4603      	mov	r3, r0
 800d014:	2200      	movs	r2, #0
 800d016:	4698      	mov	r8, r3
 800d018:	4691      	mov	r9, r2
 800d01a:	fb08 f20b 	mul.w	r2, r8, fp
 800d01e:	fb0a f309 	mul.w	r3, sl, r9
 800d022:	4413      	add	r3, r2
 800d024:	fbaa 4508 	umull	r4, r5, sl, r8
 800d028:	442b      	add	r3, r5
 800d02a:	461d      	mov	r5, r3
 800d02c:	4a0a      	ldr	r2, [pc, #40]	@ (800d058 <delay_us+0x74>)
 800d02e:	f04f 0300 	mov.w	r3, #0
 800d032:	4620      	mov	r0, r4
 800d034:	4629      	mov	r1, r5
 800d036:	f7f3 f893 	bl	8000160 <__aeabi_uldivmod>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d042:	4684      	mov	ip, r0
 800d044:	4594      	cmp	ip, r2
 800d046:	eb71 0303 	sbcs.w	r3, r1, r3
 800d04a:	d3d4      	bcc.n	800cff6 <delay_us+0x12>
}
 800d04c:	bf00      	nop
 800d04e:	bf00      	nop
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d058:	000f4240 	.word	0x000f4240

0800d05c <HAL_UART_RxCpltCallback>:
#ifdef HAL_UART_MODULE_ENABLED
/**
 *
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	60fb      	str	r3, [r7, #12]

	p_hal_uart_handle = (UART_HandleTypeDef *)get_hard_uart_interface_handle(1);
 800d068:	2001      	movs	r0, #1
 800d06a:	f000 f8d9 	bl	800d220 <get_hard_uart_interface_handle>
 800d06e:	60f8      	str	r0, [r7, #12]

	if(huart == p_hal_uart_handle)
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	429a      	cmp	r2, r3
 800d076:	d105      	bne.n	800d084 <HAL_UART_RxCpltCallback+0x28>
	{
		osEventFlagsSet(_periph_event_id, UART2_MCU_IO_RX_DONE);
 800d078:	4b04      	ldr	r3, [pc, #16]	@ (800d08c <HAL_UART_RxCpltCallback+0x30>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2110      	movs	r1, #16
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fa fdbe 	bl	8007c00 <osEventFlagsSet>
	}
	else
	{
		///callback for printf uart
	}
}
 800d084:	bf00      	nop
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	200042fc 	.word	0x200042fc

0800d090 <HAL_UART_TxCpltCallback>:

/**
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]

	p_hal_uart_handle = (UART_HandleTypeDef *)get_hard_uart_interface_handle(1);
 800d09c:	2001      	movs	r0, #1
 800d09e:	f000 f8bf 	bl	800d220 <get_hard_uart_interface_handle>
 800d0a2:	60f8      	str	r0, [r7, #12]

	if(huart == p_hal_uart_handle)
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d106      	bne.n	800d0ba <HAL_UART_TxCpltCallback+0x2a>
	{
		osEventFlagsSet(_periph_event_id, UART2_MCU_IO_TX_DONE);
 800d0ac:	4b08      	ldr	r3, [pc, #32]	@ (800d0d0 <HAL_UART_TxCpltCallback+0x40>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2108      	movs	r1, #8
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fa fda4 	bl	8007c00 <osEventFlagsSet>
	}
	else
	{
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
	}
}
 800d0b8:	e005      	b.n	800d0c6 <HAL_UART_TxCpltCallback+0x36>
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
 800d0ba:	4b05      	ldr	r3, [pc, #20]	@ (800d0d0 <HAL_UART_TxCpltCallback+0x40>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2104      	movs	r1, #4
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fa fd9d 	bl	8007c00 <osEventFlagsSet>
}
 800d0c6:	bf00      	nop
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	200042fc 	.word	0x200042fc

0800d0d4 <set_cb_periph_event_id>:

/**
 *
 */
void set_cb_periph_event_id(osEventFlagsId_t event_id)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	_periph_event_id = event_id;
 800d0dc:	4a03      	ldr	r2, [pc, #12]	@ (800d0ec <set_cb_periph_event_id+0x18>)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6013      	str	r3, [r2, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bc80      	pop	{r7}
 800d0ea:	4770      	bx	lr
 800d0ec:	200042fc 	.word	0x200042fc

0800d0f0 <gpio_set>:
/**
 * \brief
 *
 */
void gpio_set(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label, gpio_value_td gpio_value)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
	if (/*(uint32_t)gpio_brd_label*/ pin_label <  MAX_GPIO_NUM)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b06      	cmp	r3, #6
 800d100:	d822      	bhi.n	800d148 <gpio_set+0x58>
	{
		switch(gpio_value)
 800d102:	78fb      	ldrb	r3, [r7, #3]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d010      	beq.n	800d12a <gpio_set+0x3a>
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d11d      	bne.n	800d148 <gpio_set+0x58>
		{
			case GPIO_TRUE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_SET);
 800d10c:	4a10      	ldr	r2, [pc, #64]	@ (800d150 <gpio_set+0x60>)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d114:	4618      	mov	r0, r3
 800d116:	4a0f      	ldr	r2, [pc, #60]	@ (800d154 <gpio_set+0x64>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11e:	b29b      	uxth	r3, r3
 800d120:	2201      	movs	r2, #1
 800d122:	4619      	mov	r1, r3
 800d124:	f7f4 fcc7 	bl	8001ab6 <HAL_GPIO_WritePin>
				break;
 800d128:	e00e      	b.n	800d148 <gpio_set+0x58>

			case GPIO_FALSE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_RESET);
 800d12a:	4a09      	ldr	r2, [pc, #36]	@ (800d150 <gpio_set+0x60>)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d132:	4618      	mov	r0, r3
 800d134:	4a07      	ldr	r2, [pc, #28]	@ (800d154 <gpio_set+0x64>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	2200      	movs	r2, #0
 800d140:	4619      	mov	r1, r3
 800d142:	f7f4 fcb8 	bl	8001ab6 <HAL_GPIO_WritePin>
				break;
 800d146:	bf00      	nop
	}
	else
	{
		/// \\todo PRINTF
	}
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	0800e114 	.word	0x0800e114
 800d154:	0800e130 	.word	0x0800e130

0800d158 <gpio_get>:
/**
 * \brief
 *
 */
gpio_value_td gpio_get(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
	gpio_value_td gpio_pin_state = GPIO_FALSE;
 800d160:	2300      	movs	r3, #0
 800d162:	73fb      	strb	r3, [r7, #15]

	if (/*(uint32_t)gpio_brd_label*/pin_label < MAX_GPIO_NUM)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b06      	cmp	r3, #6
 800d168:	d814      	bhi.n	800d194 <gpio_get+0x3c>
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label]) == (uint8_t)GPIO_PIN_SET)
 800d16a:	4a0d      	ldr	r2, [pc, #52]	@ (800d1a0 <gpio_get+0x48>)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d172:	4618      	mov	r0, r3
 800d174:	4a0b      	ldr	r2, [pc, #44]	@ (800d1a4 <gpio_get+0x4c>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	4619      	mov	r1, r3
 800d180:	f7f4 fc82 	bl	8001a88 <HAL_GPIO_ReadPin>
 800d184:	4603      	mov	r3, r0
 800d186:	2b01      	cmp	r3, #1
 800d188:	d102      	bne.n	800d190 <gpio_get+0x38>
		{
			gpio_pin_state = GPIO_TRUE;
 800d18a:	2301      	movs	r3, #1
 800d18c:	73fb      	strb	r3, [r7, #15]
 800d18e:	e001      	b.n	800d194 <gpio_get+0x3c>
		}
		else
		{
			gpio_pin_state = GPIO_FALSE;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
	else
	{
		/// \todo PRINTF
	}

	return gpio_pin_state;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	0800e114 	.word	0x0800e114
 800d1a4:	0800e130 	.word	0x0800e130

0800d1a8 <link_periph_interface>:
							interface_ic_addr_type_td ic_addr_type,
							void * const p_low_lvl_interface_handle,
							p_interface_write_ftd write_func,
							p_interface_read_ftd read_func,
							p_delay_us_ftd delay_func)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]
	p_periph_interface->console_send = NULL;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	621a      	str	r2, [r3, #32]
	p_periph_interface->delay_us = delay_func;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1c0:	61da      	str	r2, [r3, #28]
	p_periph_interface->params.interface_type = interface_type;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	7e3a      	ldrb	r2, [r7, #24]
 800d1c6:	701a      	strb	r2, [r3, #0]
	p_periph_interface->params.ic_addr_type = ic_addr_type;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	7f3a      	ldrb	r2, [r7, #28]
 800d1cc:	705a      	strb	r2, [r3, #1]
	p_periph_interface->params.p_interface_handle = p_low_lvl_interface_handle;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6a3a      	ldr	r2, [r7, #32]
 800d1d2:	605a      	str	r2, [r3, #4]
	p_periph_interface->read = read_func;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1d8:	619a      	str	r2, [r3, #24]
	p_periph_interface->write = write_func;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1de:	615a      	str	r2, [r3, #20]

	p_periph_interface->interface_events_handle.p_interface_events_handle = p_interface_events_handle;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	609a      	str	r2, [r3, #8]
	p_periph_interface->interface_events_handle.tx_done_events_flags = tx_done_event_flag;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	60da      	str	r2, [r3, #12]
	p_periph_interface->interface_events_handle.rx_done_events_flags = rx_done_event_flag;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	611a      	str	r2, [r3, #16]
}
 800d1f2:	bf00      	nop
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bc80      	pop	{r7}
 800d1fa:	4770      	bx	lr

0800d1fc <link_gpio_interface>:
/**
 * \brief
 *
 */
void link_gpio_interface(gpio_interface_td *p_gpio_interface, p_gpio_set_ftd set_func, p_gpio_get_ftd get_func)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
	p_gpio_interface->gpio_get = get_func;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	605a      	str	r2, [r3, #4]
	p_gpio_interface->gpio_set = set_func;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	601a      	str	r2, [r3, #0]
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	bc80      	pop	{r7}
 800d21c:	4770      	bx	lr
	...

0800d220 <get_hard_uart_interface_handle>:
/**
 * \brief
 *
 */
periph_interface_td *get_hard_uart_interface_handle(const uint8_t handle_number)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
	periph_interface_td *p_handle = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]

	if(!(handle_number > (HW_UART_INTERFACE_HANDLE_SIZE - 1)))
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d807      	bhi.n	800d244 <get_hard_uart_interface_handle+0x24>
	{
		p_handle = &_hw_uart_interface_handle_array[handle_number];
 800d234:	79fa      	ldrb	r2, [r7, #7]
 800d236:	4613      	mov	r3, r2
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4a04      	ldr	r2, [pc, #16]	@ (800d250 <get_hard_uart_interface_handle+0x30>)
 800d240:	4413      	add	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]
	}

	return p_handle;
 800d244:	68fb      	ldr	r3, [r7, #12]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bc80      	pop	{r7}
 800d24e:	4770      	bx	lr
 800d250:	20004300 	.word	0x20004300

0800d254 <uart_write_dma>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_write_dma(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3308      	adds	r3, #8
 800d268:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	72fb      	strb	r3, [r7, #11]

	user_uart_tx_dma(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	6819      	ldr	r1, [r3, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	2300      	movs	r3, #0
 800d27e:	6938      	ldr	r0, [r7, #16]
 800d280:	f000 f876 	bl	800d370 <user_uart_tx_dma>

	/// if we have an event for this interface
	if(p_interface_events_handle != NULL)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <uart_write_dma+0x56>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->tx_done_events_flags);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4619      	mov	r1, r3
 800d294:	4610      	mov	r0, r2
 800d296:	f000 f897 	bl	800d3c8 <user_wait_event_flags>
 800d29a:	4603      	mov	r3, r0
 800d29c:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 800d29e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <uart_write_dma+0x56>
		{
			periph_io_status = IO_ERROR;
 800d2a6:	23fe      	movs	r3, #254	@ 0xfe
 800d2a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800d2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3718      	adds	r7, #24
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <uart_read_dma>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_read_dma(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b086      	sub	sp, #24
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3308      	adds	r3, #8
 800d2ca:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	72fb      	strb	r3, [r7, #11]

	user_uart_rx_dma(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	6819      	ldr	r1, [r3, #0]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6938      	ldr	r0, [r7, #16]
 800d2e2:	f000 f85b 	bl	800d39c <user_uart_rx_dma>

	/// if we have an event for this interface
	if(p_interface_events_handle != NULL)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00f      	beq.n	800d30c <uart_read_dma+0x56>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->rx_done_events_flags);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f000 f866 	bl	800d3c8 <user_wait_event_flags>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 800d300:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <uart_read_dma+0x56>
		{
			periph_io_status = IO_ERROR;
 800d308:	23fe      	movs	r3, #254	@ 0xfe
 800d30a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800d30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <simple_led_set>:
 * \brief
 * \p_params[in] p_params ptr to simple_led parameter structure
 * \value[in] value for set
 */
uint16_t simple_led_set (simple_led_params_td *p_params, simple_led_states_td led_state)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
	simple_led_status_td status = SIMPLE_LED_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73fb      	strb	r3, [r7, #15]

	p_params->interface->gpio_set(p_params->GPIO_LED_ORANGE, led_state);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	6852      	ldr	r2, [r2, #4]
 800d332:	78f9      	ldrb	r1, [r7, #3]
 800d334:	4610      	mov	r0, r2
 800d336:	4798      	blx	r3

	return status;
 800d338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d33c:	b29b      	uxth	r3, r3
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <simple_led_init>:
 * \brief simple led driver initialization
 * \p_params[in] p_params ptr to simple led parameter structure
 *
 */
simple_led_status_td simple_led_init(simple_led_params_td *p_params, gpio_interface_td *hgpio, uint32_t led_pin_number)
{
 800d346:	b480      	push	{r7}
 800d348:	b087      	sub	sp, #28
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	60f8      	str	r0, [r7, #12]
 800d34e:	60b9      	str	r1, [r7, #8]
 800d350:	607a      	str	r2, [r7, #4]
	simple_led_status_td status = SIMPLE_LED_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	75fb      	strb	r3, [r7, #23]
	
	p_params->interface = hgpio;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	601a      	str	r2, [r3, #0]
	p_params->GPIO_LED_ORANGE = led_pin_number;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	605a      	str	r2, [r3, #4]

	return status;
 800d362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d366:	4618      	mov	r0, r3
 800d368:	371c      	adds	r7, #28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bc80      	pop	{r7}
 800d36e:	4770      	bx	lr

0800d370 <user_uart_tx_dma>:
#endif

#ifdef HAL_UART_MODULE_ENABLED

user_hw_abstr_status_td user_uart_tx_dma(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	4613      	mov	r3, r2
 800d37e:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Transmit_DMA((UART_HandleTypeDef *)p_interface_handle, p_data, data_size);
 800d384:	88fb      	ldrh	r3, [r7, #6]
 800d386:	461a      	mov	r2, r3
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7f7 fa9a 	bl	80048c4 <HAL_UART_Transmit_DMA>

	return user_status;
 800d390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3718      	adds	r7, #24
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <user_uart_rx_dma>:

user_hw_abstr_status_td user_uart_rx_dma(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Receive_DMA((UART_HandleTypeDef *)p_interface_handle, p_data, data_size);
 800d3b0:	88fb      	ldrh	r3, [r7, #6]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	68b9      	ldr	r1, [r7, #8]
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7f7 faf4 	bl	80049a4 <HAL_UART_Receive_DMA>

	return user_status;
 800d3bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <user_wait_event_flags>:

#endif

user_hw_abstr_status_td user_wait_event_flags(void *const p_interface_events_handle, const uint32_t tx_done_event_flag)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
	user_hw_abstr_status_td user_status = USER_OK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	75fb      	strb	r3, [r7, #23]
	uint32_t event_status = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	613b      	str	r3, [r7, #16]
	osEventFlagsId_t evt_id = p_interface_events_handle;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	60fb      	str	r3, [r7, #12]

	event_status = osEventFlagsWait(evt_id, tx_done_event_flag, osFlagsWaitAny, osWaitForever); // wait for complete sending data
 800d3de:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7fa fc4c 	bl	8007c84 <osEventFlagsWait>
 800d3ec:	6138      	str	r0, [r7, #16]
	if((event_status & tx_done_event_flag) == 0)
 800d3ee:	693a      	ldr	r2, [r7, #16]
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <user_wait_event_flags+0x34>
	{
		user_status = USER_ERROR;
 800d3f8:	23ff      	movs	r3, #255	@ 0xff
 800d3fa:	75fb      	strb	r3, [r7, #23]
	}

	return user_status;
 800d3fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <init_periph_events>:
/**
 * \brief
 *
 */
void init_periph_events(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	af00      	add	r7, sp, #0
	_periph_event_id = osEventFlagsNew(NULL);
 800d40c:	2000      	movs	r0, #0
 800d40e:	f7fa fbb8 	bl	8007b82 <osEventFlagsNew>
 800d412:	4603      	mov	r3, r0
 800d414:	4a06      	ldr	r2, [pc, #24]	@ (800d430 <init_periph_events+0x28>)
 800d416:	6013      	str	r3, [r2, #0]
	if (_periph_event_id == NULL)
 800d418:	4b05      	ldr	r3, [pc, #20]	@ (800d430 <init_periph_events+0x28>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d004      	beq.n	800d42a <init_periph_events+0x22>
	{
		/// \\todo printf
	}
	else
	{
		set_cb_periph_event_id(_periph_event_id);
 800d420:	4b03      	ldr	r3, [pc, #12]	@ (800d430 <init_periph_events+0x28>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fe55 	bl	800d0d4 <set_cb_periph_event_id>
	}
}
 800d42a:	bf00      	nop
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	20004348 	.word	0x20004348

0800d434 <get_periph_event_id>:
/**
 * \brief
 *
 */
osEventFlagsId_t * get_periph_event_id(void)
{
 800d434:	b480      	push	{r7}
 800d436:	af00      	add	r7, sp, #0
	return _periph_event_id;
 800d438:	4b02      	ldr	r3, [pc, #8]	@ (800d444 <get_periph_event_id+0x10>)
 800d43a:	681b      	ldr	r3, [r3, #0]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	46bd      	mov	sp, r7
 800d440:	bc80      	pop	{r7}
 800d442:	4770      	bx	lr
 800d444:	20004348 	.word	0x20004348

0800d448 <print_msg_queue_init>:
/**
 * \brief
 *
 */
void print_msg_queue_init(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
	_print_msg_queue_id = osMessageQueueNew(PRINT_MSGQUEUE_OBJECTS, PRINT_MSGQUEUE_OBJECT_SIZE, NULL);
 800d44c:	2200      	movs	r2, #0
 800d44e:	2180      	movs	r1, #128	@ 0x80
 800d450:	2010      	movs	r0, #16
 800d452:	f7fa fc7c 	bl	8007d4e <osMessageQueueNew>
 800d456:	4603      	mov	r3, r0
 800d458:	4a04      	ldr	r2, [pc, #16]	@ (800d46c <print_msg_queue_init+0x24>)
 800d45a:	6013      	str	r3, [r2, #0]

	if (_print_msg_queue_id == NULL)
 800d45c:	4b03      	ldr	r3, [pc, #12]	@ (800d46c <print_msg_queue_init+0x24>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <print_msg_queue_init+0x20>
	{
	 // Message Queue object not created, handle failure
	  /// \todo printf
		while(1){}
 800d464:	bf00      	nop
 800d466:	e7fd      	b.n	800d464 <print_msg_queue_init+0x1c>
	}
}
 800d468:	bf00      	nop
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	2000434c 	.word	0x2000434c

0800d470 <get_print_msg_queue_id>:
/**
 * \brief
 *
 */
osMessageQueueId_t get_print_msg_queue_id(void)
{
 800d470:	b480      	push	{r7}
 800d472:	af00      	add	r7, sp, #0
	return _print_msg_queue_id;
 800d474:	4b02      	ldr	r3, [pc, #8]	@ (800d480 <get_print_msg_queue_id+0x10>)
 800d476:	681b      	ldr	r3, [r3, #0]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bc80      	pop	{r7}
 800d47e:	4770      	bx	lr
 800d480:	2000434c 	.word	0x2000434c

0800d484 <button_thread_init>:
/**
 * \brief
 *
 */
void button_thread_init(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
	_button_thread_id = osThreadNew(button_thread, NULL, &_button_thread_attributes);
 800d488:	4a04      	ldr	r2, [pc, #16]	@ (800d49c <button_thread_init+0x18>)
 800d48a:	2100      	movs	r1, #0
 800d48c:	4804      	ldr	r0, [pc, #16]	@ (800d4a0 <button_thread_init+0x1c>)
 800d48e:	f7fa facb 	bl	8007a28 <osThreadNew>
 800d492:	4603      	mov	r3, r0
 800d494:	4a03      	ldr	r2, [pc, #12]	@ (800d4a4 <button_thread_init+0x20>)
 800d496:	6013      	str	r3, [r2, #0]

	if(_button_thread_id == NULL)
	{
		/// \todo pprintf
	}
}
 800d498:	bf00      	nop
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	0800e14c 	.word	0x0800e14c
 800d4a0:	0800d4a9 	.word	0x0800d4a9
 800d4a4:	20004350 	.word	0x20004350

0800d4a8 <button_thread>:
/**
 * \brief
 *
 */
void button_thread (void *argument)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	print_to_console("Buttons thread was started!");
 800d4b0:	480c      	ldr	r0, [pc, #48]	@ (800d4e4 <button_thread+0x3c>)
 800d4b2:	f7ff fd79 	bl	800cfa8 <print_to_console>

	while(1)
	{
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 800d4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d4e8 <button_thread+0x40>)
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f003 0302 	and.w	r3, r3, #2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d102      	bne.n	800d4c8 <button_thread+0x20>
		{
			print_to_console("User button 0 was pushed!");
 800d4c2:	480a      	ldr	r0, [pc, #40]	@ (800d4ec <button_thread+0x44>)
 800d4c4:	f7ff fd70 	bl	800cfa8 <print_to_console>
		}

		if(!(GPIOA->IDR & GPIO_IDR_IDR15))
 800d4c8:	4b09      	ldr	r3, [pc, #36]	@ (800d4f0 <button_thread+0x48>)
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <button_thread+0x32>
		{
			print_to_console("User button 1 was pushed!");
 800d4d4:	4807      	ldr	r0, [pc, #28]	@ (800d4f4 <button_thread+0x4c>)
 800d4d6:	f7ff fd67 	bl	800cfa8 <print_to_console>
		}

		osDelay(10);
 800d4da:	200a      	movs	r0, #10
 800d4dc:	f7fa fb36 	bl	8007b4c <osDelay>
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 800d4e0:	e7e9      	b.n	800d4b6 <button_thread+0xe>
 800d4e2:	bf00      	nop
 800d4e4:	0800e05c 	.word	0x0800e05c
 800d4e8:	40010c00 	.word	0x40010c00
 800d4ec:	0800e078 	.word	0x0800e078
 800d4f0:	40010800 	.word	0x40010800
 800d4f4:	0800e094 	.word	0x0800e094

0800d4f8 <print_msg_thread_init>:

/**
 * \brief
 */
void print_msg_thread_init(void)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
	_print_msg_thread_id = osThreadNew(print_msg_thread, NULL, &_print_msg_thread_attributes);
 800d4fc:	4a07      	ldr	r2, [pc, #28]	@ (800d51c <print_msg_thread_init+0x24>)
 800d4fe:	2100      	movs	r1, #0
 800d500:	4807      	ldr	r0, [pc, #28]	@ (800d520 <print_msg_thread_init+0x28>)
 800d502:	f7fa fa91 	bl	8007a28 <osThreadNew>
 800d506:	4603      	mov	r3, r0
 800d508:	4a06      	ldr	r2, [pc, #24]	@ (800d524 <print_msg_thread_init+0x2c>)
 800d50a:	6013      	str	r3, [r2, #0]

	if(_print_msg_thread_id == NULL)
 800d50c:	4b05      	ldr	r3, [pc, #20]	@ (800d524 <print_msg_thread_init+0x2c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <print_msg_thread_init+0x20>
	{
		/// \todo pprintf
		while(1){}
 800d514:	bf00      	nop
 800d516:	e7fd      	b.n	800d514 <print_msg_thread_init+0x1c>
	}
}
 800d518:	bf00      	nop
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	0800e170 	.word	0x0800e170
 800d520:	0800d529 	.word	0x0800d529
 800d524:	20004354 	.word	0x20004354

0800d528 <print_msg_thread>:
/**
 * \brief
 *
 */
void print_msg_thread(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b0a2      	sub	sp, #136	@ 0x88
 800d52c:	af00      	add	r7, sp, #0
	osStatus_t status = osOK;
 800d52e:	2300      	movs	r3, #0
 800d530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	osMessageQueueId_t print_msg_message_id = get_print_msg_queue_id();
 800d534:	f7ff ff9c 	bl	800d470 <get_print_msg_queue_id>
 800d538:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	uint8_t print_buffer[128] = {[0] = 0};
 800d53c:	2300      	movs	r3, #0
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	1d3b      	adds	r3, r7, #4
 800d542:	227c      	movs	r2, #124	@ 0x7c
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f000 f848 	bl	800d5dc <memset>

	while(1)
	{
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d54c:	e019      	b.n	800d582 <print_msg_thread+0x5a>
	    {
			status = osMessageQueueGet(print_msg_message_id, print_buffer, NULL, osWaitForever);   // wait for message
 800d54e:	4639      	mov	r1, r7
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	2200      	movs	r2, #0
 800d556:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d55a:	f7fa fccb 	bl	8007ef4 <osMessageQueueGet>
 800d55e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		    if (status == osOK)
 800d562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10b      	bne.n	800d582 <print_msg_thread+0x5a>
		    {
		    	//printf(&print_buffer);
		        HAL_UART_Transmit(&huart1, print_buffer, strlen(print_buffer), 0xFFFF);
 800d56a:	463b      	mov	r3, r7
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7f2 fdef 	bl	8000150 <strlen>
 800d572:	4603      	mov	r3, r0
 800d574:	b29a      	uxth	r2, r3
 800d576:	4639      	mov	r1, r7
 800d578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d57c:	4806      	ldr	r0, [pc, #24]	@ (800d598 <print_msg_thread+0x70>)
 800d57e:	f7f7 f915 	bl	80047ac <HAL_UART_Transmit>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d582:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d586:	f7fa fd13 	bl	8007fb0 <osMessageQueueGetCount>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1de      	bne.n	800d54e <print_msg_thread+0x26>
		    }
	    }

		osDelay(100);
 800d590:	2064      	movs	r0, #100	@ 0x64
 800d592:	f7fa fadb 	bl	8007b4c <osDelay>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d596:	e7f4      	b.n	800d582 <print_msg_thread+0x5a>
 800d598:	20000268 	.word	0x20000268

0800d59c <siprintf>:
 800d59c:	b40e      	push	{r1, r2, r3}
 800d59e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5a2:	b500      	push	{lr}
 800d5a4:	b09c      	sub	sp, #112	@ 0x70
 800d5a6:	ab1d      	add	r3, sp, #116	@ 0x74
 800d5a8:	9002      	str	r0, [sp, #8]
 800d5aa:	9006      	str	r0, [sp, #24]
 800d5ac:	9107      	str	r1, [sp, #28]
 800d5ae:	9104      	str	r1, [sp, #16]
 800d5b0:	4808      	ldr	r0, [pc, #32]	@ (800d5d4 <siprintf+0x38>)
 800d5b2:	4909      	ldr	r1, [pc, #36]	@ (800d5d8 <siprintf+0x3c>)
 800d5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b8:	9105      	str	r1, [sp, #20]
 800d5ba:	6800      	ldr	r0, [r0, #0]
 800d5bc:	a902      	add	r1, sp, #8
 800d5be:	9301      	str	r3, [sp, #4]
 800d5c0:	f000 f9f6 	bl	800d9b0 <_svfiprintf_r>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	b01c      	add	sp, #112	@ 0x70
 800d5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d0:	b003      	add	sp, #12
 800d5d2:	4770      	bx	lr
 800d5d4:	20000180 	.word	0x20000180
 800d5d8:	ffff0208 	.word	0xffff0208

0800d5dc <memset>:
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4402      	add	r2, r0
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d100      	bne.n	800d5e6 <memset+0xa>
 800d5e4:	4770      	bx	lr
 800d5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d5ea:	e7f9      	b.n	800d5e0 <memset+0x4>

0800d5ec <_reclaim_reent>:
 800d5ec:	4b29      	ldr	r3, [pc, #164]	@ (800d694 <_reclaim_reent+0xa8>)
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4283      	cmp	r3, r0
 800d5f6:	d04b      	beq.n	800d690 <_reclaim_reent+0xa4>
 800d5f8:	69c3      	ldr	r3, [r0, #28]
 800d5fa:	b1ab      	cbz	r3, 800d628 <_reclaim_reent+0x3c>
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	b16b      	cbz	r3, 800d61c <_reclaim_reent+0x30>
 800d600:	2500      	movs	r5, #0
 800d602:	69e3      	ldr	r3, [r4, #28]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	5959      	ldr	r1, [r3, r5]
 800d608:	2900      	cmp	r1, #0
 800d60a:	d13b      	bne.n	800d684 <_reclaim_reent+0x98>
 800d60c:	3504      	adds	r5, #4
 800d60e:	2d80      	cmp	r5, #128	@ 0x80
 800d610:	d1f7      	bne.n	800d602 <_reclaim_reent+0x16>
 800d612:	69e3      	ldr	r3, [r4, #28]
 800d614:	4620      	mov	r0, r4
 800d616:	68d9      	ldr	r1, [r3, #12]
 800d618:	f000 f878 	bl	800d70c <_free_r>
 800d61c:	69e3      	ldr	r3, [r4, #28]
 800d61e:	6819      	ldr	r1, [r3, #0]
 800d620:	b111      	cbz	r1, 800d628 <_reclaim_reent+0x3c>
 800d622:	4620      	mov	r0, r4
 800d624:	f000 f872 	bl	800d70c <_free_r>
 800d628:	6961      	ldr	r1, [r4, #20]
 800d62a:	b111      	cbz	r1, 800d632 <_reclaim_reent+0x46>
 800d62c:	4620      	mov	r0, r4
 800d62e:	f000 f86d 	bl	800d70c <_free_r>
 800d632:	69e1      	ldr	r1, [r4, #28]
 800d634:	b111      	cbz	r1, 800d63c <_reclaim_reent+0x50>
 800d636:	4620      	mov	r0, r4
 800d638:	f000 f868 	bl	800d70c <_free_r>
 800d63c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d63e:	b111      	cbz	r1, 800d646 <_reclaim_reent+0x5a>
 800d640:	4620      	mov	r0, r4
 800d642:	f000 f863 	bl	800d70c <_free_r>
 800d646:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d648:	b111      	cbz	r1, 800d650 <_reclaim_reent+0x64>
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 f85e 	bl	800d70c <_free_r>
 800d650:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d652:	b111      	cbz	r1, 800d65a <_reclaim_reent+0x6e>
 800d654:	4620      	mov	r0, r4
 800d656:	f000 f859 	bl	800d70c <_free_r>
 800d65a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d65c:	b111      	cbz	r1, 800d664 <_reclaim_reent+0x78>
 800d65e:	4620      	mov	r0, r4
 800d660:	f000 f854 	bl	800d70c <_free_r>
 800d664:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d666:	b111      	cbz	r1, 800d66e <_reclaim_reent+0x82>
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 f84f 	bl	800d70c <_free_r>
 800d66e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d670:	b111      	cbz	r1, 800d678 <_reclaim_reent+0x8c>
 800d672:	4620      	mov	r0, r4
 800d674:	f000 f84a 	bl	800d70c <_free_r>
 800d678:	6a23      	ldr	r3, [r4, #32]
 800d67a:	b14b      	cbz	r3, 800d690 <_reclaim_reent+0xa4>
 800d67c:	4620      	mov	r0, r4
 800d67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d682:	4718      	bx	r3
 800d684:	680e      	ldr	r6, [r1, #0]
 800d686:	4620      	mov	r0, r4
 800d688:	f000 f840 	bl	800d70c <_free_r>
 800d68c:	4631      	mov	r1, r6
 800d68e:	e7bb      	b.n	800d608 <_reclaim_reent+0x1c>
 800d690:	bd70      	pop	{r4, r5, r6, pc}
 800d692:	bf00      	nop
 800d694:	20000180 	.word	0x20000180

0800d698 <__errno>:
 800d698:	4b01      	ldr	r3, [pc, #4]	@ (800d6a0 <__errno+0x8>)
 800d69a:	6818      	ldr	r0, [r3, #0]
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	20000180 	.word	0x20000180

0800d6a4 <__libc_init_array>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	2600      	movs	r6, #0
 800d6a8:	4d0c      	ldr	r5, [pc, #48]	@ (800d6dc <__libc_init_array+0x38>)
 800d6aa:	4c0d      	ldr	r4, [pc, #52]	@ (800d6e0 <__libc_init_array+0x3c>)
 800d6ac:	1b64      	subs	r4, r4, r5
 800d6ae:	10a4      	asrs	r4, r4, #2
 800d6b0:	42a6      	cmp	r6, r4
 800d6b2:	d109      	bne.n	800d6c8 <__libc_init_array+0x24>
 800d6b4:	f000 fc78 	bl	800dfa8 <_init>
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	4d0a      	ldr	r5, [pc, #40]	@ (800d6e4 <__libc_init_array+0x40>)
 800d6bc:	4c0a      	ldr	r4, [pc, #40]	@ (800d6e8 <__libc_init_array+0x44>)
 800d6be:	1b64      	subs	r4, r4, r5
 800d6c0:	10a4      	asrs	r4, r4, #2
 800d6c2:	42a6      	cmp	r6, r4
 800d6c4:	d105      	bne.n	800d6d2 <__libc_init_array+0x2e>
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
 800d6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6cc:	4798      	blx	r3
 800d6ce:	3601      	adds	r6, #1
 800d6d0:	e7ee      	b.n	800d6b0 <__libc_init_array+0xc>
 800d6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6d6:	4798      	blx	r3
 800d6d8:	3601      	adds	r6, #1
 800d6da:	e7f2      	b.n	800d6c2 <__libc_init_array+0x1e>
 800d6dc:	0800e1d0 	.word	0x0800e1d0
 800d6e0:	0800e1d0 	.word	0x0800e1d0
 800d6e4:	0800e1d0 	.word	0x0800e1d0
 800d6e8:	0800e1d4 	.word	0x0800e1d4

0800d6ec <__retarget_lock_acquire_recursive>:
 800d6ec:	4770      	bx	lr

0800d6ee <__retarget_lock_release_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <memcpy>:
 800d6f0:	440a      	add	r2, r1
 800d6f2:	4291      	cmp	r1, r2
 800d6f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6f8:	d100      	bne.n	800d6fc <memcpy+0xc>
 800d6fa:	4770      	bx	lr
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d702:	4291      	cmp	r1, r2
 800d704:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d708:	d1f9      	bne.n	800d6fe <memcpy+0xe>
 800d70a:	bd10      	pop	{r4, pc}

0800d70c <_free_r>:
 800d70c:	b538      	push	{r3, r4, r5, lr}
 800d70e:	4605      	mov	r5, r0
 800d710:	2900      	cmp	r1, #0
 800d712:	d040      	beq.n	800d796 <_free_r+0x8a>
 800d714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d718:	1f0c      	subs	r4, r1, #4
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	bfb8      	it	lt
 800d71e:	18e4      	addlt	r4, r4, r3
 800d720:	f000 f8de 	bl	800d8e0 <__malloc_lock>
 800d724:	4a1c      	ldr	r2, [pc, #112]	@ (800d798 <_free_r+0x8c>)
 800d726:	6813      	ldr	r3, [r2, #0]
 800d728:	b933      	cbnz	r3, 800d738 <_free_r+0x2c>
 800d72a:	6063      	str	r3, [r4, #4]
 800d72c:	6014      	str	r4, [r2, #0]
 800d72e:	4628      	mov	r0, r5
 800d730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d734:	f000 b8da 	b.w	800d8ec <__malloc_unlock>
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d908      	bls.n	800d74e <_free_r+0x42>
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	1821      	adds	r1, r4, r0
 800d740:	428b      	cmp	r3, r1
 800d742:	bf01      	itttt	eq
 800d744:	6819      	ldreq	r1, [r3, #0]
 800d746:	685b      	ldreq	r3, [r3, #4]
 800d748:	1809      	addeq	r1, r1, r0
 800d74a:	6021      	streq	r1, [r4, #0]
 800d74c:	e7ed      	b.n	800d72a <_free_r+0x1e>
 800d74e:	461a      	mov	r2, r3
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	b10b      	cbz	r3, 800d758 <_free_r+0x4c>
 800d754:	42a3      	cmp	r3, r4
 800d756:	d9fa      	bls.n	800d74e <_free_r+0x42>
 800d758:	6811      	ldr	r1, [r2, #0]
 800d75a:	1850      	adds	r0, r2, r1
 800d75c:	42a0      	cmp	r0, r4
 800d75e:	d10b      	bne.n	800d778 <_free_r+0x6c>
 800d760:	6820      	ldr	r0, [r4, #0]
 800d762:	4401      	add	r1, r0
 800d764:	1850      	adds	r0, r2, r1
 800d766:	4283      	cmp	r3, r0
 800d768:	6011      	str	r1, [r2, #0]
 800d76a:	d1e0      	bne.n	800d72e <_free_r+0x22>
 800d76c:	6818      	ldr	r0, [r3, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	4408      	add	r0, r1
 800d772:	6010      	str	r0, [r2, #0]
 800d774:	6053      	str	r3, [r2, #4]
 800d776:	e7da      	b.n	800d72e <_free_r+0x22>
 800d778:	d902      	bls.n	800d780 <_free_r+0x74>
 800d77a:	230c      	movs	r3, #12
 800d77c:	602b      	str	r3, [r5, #0]
 800d77e:	e7d6      	b.n	800d72e <_free_r+0x22>
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	1821      	adds	r1, r4, r0
 800d784:	428b      	cmp	r3, r1
 800d786:	bf01      	itttt	eq
 800d788:	6819      	ldreq	r1, [r3, #0]
 800d78a:	685b      	ldreq	r3, [r3, #4]
 800d78c:	1809      	addeq	r1, r1, r0
 800d78e:	6021      	streq	r1, [r4, #0]
 800d790:	6063      	str	r3, [r4, #4]
 800d792:	6054      	str	r4, [r2, #4]
 800d794:	e7cb      	b.n	800d72e <_free_r+0x22>
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	2000449c 	.word	0x2000449c

0800d79c <sbrk_aligned>:
 800d79c:	b570      	push	{r4, r5, r6, lr}
 800d79e:	4e0f      	ldr	r6, [pc, #60]	@ (800d7dc <sbrk_aligned+0x40>)
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	6831      	ldr	r1, [r6, #0]
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	b911      	cbnz	r1, 800d7ae <sbrk_aligned+0x12>
 800d7a8:	f000 fbaa 	bl	800df00 <_sbrk_r>
 800d7ac:	6030      	str	r0, [r6, #0]
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f000 fba5 	bl	800df00 <_sbrk_r>
 800d7b6:	1c43      	adds	r3, r0, #1
 800d7b8:	d103      	bne.n	800d7c2 <sbrk_aligned+0x26>
 800d7ba:	f04f 34ff 	mov.w	r4, #4294967295
 800d7be:	4620      	mov	r0, r4
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	1cc4      	adds	r4, r0, #3
 800d7c4:	f024 0403 	bic.w	r4, r4, #3
 800d7c8:	42a0      	cmp	r0, r4
 800d7ca:	d0f8      	beq.n	800d7be <sbrk_aligned+0x22>
 800d7cc:	1a21      	subs	r1, r4, r0
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f000 fb96 	bl	800df00 <_sbrk_r>
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d1f2      	bne.n	800d7be <sbrk_aligned+0x22>
 800d7d8:	e7ef      	b.n	800d7ba <sbrk_aligned+0x1e>
 800d7da:	bf00      	nop
 800d7dc:	20004498 	.word	0x20004498

0800d7e0 <_malloc_r>:
 800d7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e4:	1ccd      	adds	r5, r1, #3
 800d7e6:	f025 0503 	bic.w	r5, r5, #3
 800d7ea:	3508      	adds	r5, #8
 800d7ec:	2d0c      	cmp	r5, #12
 800d7ee:	bf38      	it	cc
 800d7f0:	250c      	movcc	r5, #12
 800d7f2:	2d00      	cmp	r5, #0
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	db01      	blt.n	800d7fc <_malloc_r+0x1c>
 800d7f8:	42a9      	cmp	r1, r5
 800d7fa:	d904      	bls.n	800d806 <_malloc_r+0x26>
 800d7fc:	230c      	movs	r3, #12
 800d7fe:	6033      	str	r3, [r6, #0]
 800d800:	2000      	movs	r0, #0
 800d802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8dc <_malloc_r+0xfc>
 800d80a:	f000 f869 	bl	800d8e0 <__malloc_lock>
 800d80e:	f8d8 3000 	ldr.w	r3, [r8]
 800d812:	461c      	mov	r4, r3
 800d814:	bb44      	cbnz	r4, 800d868 <_malloc_r+0x88>
 800d816:	4629      	mov	r1, r5
 800d818:	4630      	mov	r0, r6
 800d81a:	f7ff ffbf 	bl	800d79c <sbrk_aligned>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	4604      	mov	r4, r0
 800d822:	d158      	bne.n	800d8d6 <_malloc_r+0xf6>
 800d824:	f8d8 4000 	ldr.w	r4, [r8]
 800d828:	4627      	mov	r7, r4
 800d82a:	2f00      	cmp	r7, #0
 800d82c:	d143      	bne.n	800d8b6 <_malloc_r+0xd6>
 800d82e:	2c00      	cmp	r4, #0
 800d830:	d04b      	beq.n	800d8ca <_malloc_r+0xea>
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	4639      	mov	r1, r7
 800d836:	4630      	mov	r0, r6
 800d838:	eb04 0903 	add.w	r9, r4, r3
 800d83c:	f000 fb60 	bl	800df00 <_sbrk_r>
 800d840:	4581      	cmp	r9, r0
 800d842:	d142      	bne.n	800d8ca <_malloc_r+0xea>
 800d844:	6821      	ldr	r1, [r4, #0]
 800d846:	4630      	mov	r0, r6
 800d848:	1a6d      	subs	r5, r5, r1
 800d84a:	4629      	mov	r1, r5
 800d84c:	f7ff ffa6 	bl	800d79c <sbrk_aligned>
 800d850:	3001      	adds	r0, #1
 800d852:	d03a      	beq.n	800d8ca <_malloc_r+0xea>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	442b      	add	r3, r5
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	f8d8 3000 	ldr.w	r3, [r8]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	bb62      	cbnz	r2, 800d8bc <_malloc_r+0xdc>
 800d862:	f8c8 7000 	str.w	r7, [r8]
 800d866:	e00f      	b.n	800d888 <_malloc_r+0xa8>
 800d868:	6822      	ldr	r2, [r4, #0]
 800d86a:	1b52      	subs	r2, r2, r5
 800d86c:	d420      	bmi.n	800d8b0 <_malloc_r+0xd0>
 800d86e:	2a0b      	cmp	r2, #11
 800d870:	d917      	bls.n	800d8a2 <_malloc_r+0xc2>
 800d872:	1961      	adds	r1, r4, r5
 800d874:	42a3      	cmp	r3, r4
 800d876:	6025      	str	r5, [r4, #0]
 800d878:	bf18      	it	ne
 800d87a:	6059      	strne	r1, [r3, #4]
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	bf08      	it	eq
 800d880:	f8c8 1000 	streq.w	r1, [r8]
 800d884:	5162      	str	r2, [r4, r5]
 800d886:	604b      	str	r3, [r1, #4]
 800d888:	4630      	mov	r0, r6
 800d88a:	f000 f82f 	bl	800d8ec <__malloc_unlock>
 800d88e:	f104 000b 	add.w	r0, r4, #11
 800d892:	1d23      	adds	r3, r4, #4
 800d894:	f020 0007 	bic.w	r0, r0, #7
 800d898:	1ac2      	subs	r2, r0, r3
 800d89a:	bf1c      	itt	ne
 800d89c:	1a1b      	subne	r3, r3, r0
 800d89e:	50a3      	strne	r3, [r4, r2]
 800d8a0:	e7af      	b.n	800d802 <_malloc_r+0x22>
 800d8a2:	6862      	ldr	r2, [r4, #4]
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	bf0c      	ite	eq
 800d8a8:	f8c8 2000 	streq.w	r2, [r8]
 800d8ac:	605a      	strne	r2, [r3, #4]
 800d8ae:	e7eb      	b.n	800d888 <_malloc_r+0xa8>
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	6864      	ldr	r4, [r4, #4]
 800d8b4:	e7ae      	b.n	800d814 <_malloc_r+0x34>
 800d8b6:	463c      	mov	r4, r7
 800d8b8:	687f      	ldr	r7, [r7, #4]
 800d8ba:	e7b6      	b.n	800d82a <_malloc_r+0x4a>
 800d8bc:	461a      	mov	r2, r3
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	d1fb      	bne.n	800d8bc <_malloc_r+0xdc>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	6053      	str	r3, [r2, #4]
 800d8c8:	e7de      	b.n	800d888 <_malloc_r+0xa8>
 800d8ca:	230c      	movs	r3, #12
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	6033      	str	r3, [r6, #0]
 800d8d0:	f000 f80c 	bl	800d8ec <__malloc_unlock>
 800d8d4:	e794      	b.n	800d800 <_malloc_r+0x20>
 800d8d6:	6005      	str	r5, [r0, #0]
 800d8d8:	e7d6      	b.n	800d888 <_malloc_r+0xa8>
 800d8da:	bf00      	nop
 800d8dc:	2000449c 	.word	0x2000449c

0800d8e0 <__malloc_lock>:
 800d8e0:	4801      	ldr	r0, [pc, #4]	@ (800d8e8 <__malloc_lock+0x8>)
 800d8e2:	f7ff bf03 	b.w	800d6ec <__retarget_lock_acquire_recursive>
 800d8e6:	bf00      	nop
 800d8e8:	20004494 	.word	0x20004494

0800d8ec <__malloc_unlock>:
 800d8ec:	4801      	ldr	r0, [pc, #4]	@ (800d8f4 <__malloc_unlock+0x8>)
 800d8ee:	f7ff befe 	b.w	800d6ee <__retarget_lock_release_recursive>
 800d8f2:	bf00      	nop
 800d8f4:	20004494 	.word	0x20004494

0800d8f8 <__ssputs_r>:
 800d8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8fc:	461f      	mov	r7, r3
 800d8fe:	688e      	ldr	r6, [r1, #8]
 800d900:	4682      	mov	sl, r0
 800d902:	42be      	cmp	r6, r7
 800d904:	460c      	mov	r4, r1
 800d906:	4690      	mov	r8, r2
 800d908:	680b      	ldr	r3, [r1, #0]
 800d90a:	d82d      	bhi.n	800d968 <__ssputs_r+0x70>
 800d90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d914:	d026      	beq.n	800d964 <__ssputs_r+0x6c>
 800d916:	6965      	ldr	r5, [r4, #20]
 800d918:	6909      	ldr	r1, [r1, #16]
 800d91a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d91e:	eba3 0901 	sub.w	r9, r3, r1
 800d922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d926:	1c7b      	adds	r3, r7, #1
 800d928:	444b      	add	r3, r9
 800d92a:	106d      	asrs	r5, r5, #1
 800d92c:	429d      	cmp	r5, r3
 800d92e:	bf38      	it	cc
 800d930:	461d      	movcc	r5, r3
 800d932:	0553      	lsls	r3, r2, #21
 800d934:	d527      	bpl.n	800d986 <__ssputs_r+0x8e>
 800d936:	4629      	mov	r1, r5
 800d938:	f7ff ff52 	bl	800d7e0 <_malloc_r>
 800d93c:	4606      	mov	r6, r0
 800d93e:	b360      	cbz	r0, 800d99a <__ssputs_r+0xa2>
 800d940:	464a      	mov	r2, r9
 800d942:	6921      	ldr	r1, [r4, #16]
 800d944:	f7ff fed4 	bl	800d6f0 <memcpy>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d952:	81a3      	strh	r3, [r4, #12]
 800d954:	6126      	str	r6, [r4, #16]
 800d956:	444e      	add	r6, r9
 800d958:	6026      	str	r6, [r4, #0]
 800d95a:	463e      	mov	r6, r7
 800d95c:	6165      	str	r5, [r4, #20]
 800d95e:	eba5 0509 	sub.w	r5, r5, r9
 800d962:	60a5      	str	r5, [r4, #8]
 800d964:	42be      	cmp	r6, r7
 800d966:	d900      	bls.n	800d96a <__ssputs_r+0x72>
 800d968:	463e      	mov	r6, r7
 800d96a:	4632      	mov	r2, r6
 800d96c:	4641      	mov	r1, r8
 800d96e:	6820      	ldr	r0, [r4, #0]
 800d970:	f000 faac 	bl	800decc <memmove>
 800d974:	2000      	movs	r0, #0
 800d976:	68a3      	ldr	r3, [r4, #8]
 800d978:	1b9b      	subs	r3, r3, r6
 800d97a:	60a3      	str	r3, [r4, #8]
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	4433      	add	r3, r6
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d986:	462a      	mov	r2, r5
 800d988:	f000 fad8 	bl	800df3c <_realloc_r>
 800d98c:	4606      	mov	r6, r0
 800d98e:	2800      	cmp	r0, #0
 800d990:	d1e0      	bne.n	800d954 <__ssputs_r+0x5c>
 800d992:	4650      	mov	r0, sl
 800d994:	6921      	ldr	r1, [r4, #16]
 800d996:	f7ff feb9 	bl	800d70c <_free_r>
 800d99a:	230c      	movs	r3, #12
 800d99c:	f8ca 3000 	str.w	r3, [sl]
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	e7e9      	b.n	800d982 <__ssputs_r+0x8a>
	...

0800d9b0 <_svfiprintf_r>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	4698      	mov	r8, r3
 800d9b6:	898b      	ldrh	r3, [r1, #12]
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	061b      	lsls	r3, r3, #24
 800d9bc:	460d      	mov	r5, r1
 800d9be:	4614      	mov	r4, r2
 800d9c0:	b09d      	sub	sp, #116	@ 0x74
 800d9c2:	d510      	bpl.n	800d9e6 <_svfiprintf_r+0x36>
 800d9c4:	690b      	ldr	r3, [r1, #16]
 800d9c6:	b973      	cbnz	r3, 800d9e6 <_svfiprintf_r+0x36>
 800d9c8:	2140      	movs	r1, #64	@ 0x40
 800d9ca:	f7ff ff09 	bl	800d7e0 <_malloc_r>
 800d9ce:	6028      	str	r0, [r5, #0]
 800d9d0:	6128      	str	r0, [r5, #16]
 800d9d2:	b930      	cbnz	r0, 800d9e2 <_svfiprintf_r+0x32>
 800d9d4:	230c      	movs	r3, #12
 800d9d6:	603b      	str	r3, [r7, #0]
 800d9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9dc:	b01d      	add	sp, #116	@ 0x74
 800d9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e2:	2340      	movs	r3, #64	@ 0x40
 800d9e4:	616b      	str	r3, [r5, #20]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ea:	2320      	movs	r3, #32
 800d9ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9f0:	2330      	movs	r3, #48	@ 0x30
 800d9f2:	f04f 0901 	mov.w	r9, #1
 800d9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800db94 <_svfiprintf_r+0x1e4>
 800d9fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da02:	4623      	mov	r3, r4
 800da04:	469a      	mov	sl, r3
 800da06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da0a:	b10a      	cbz	r2, 800da10 <_svfiprintf_r+0x60>
 800da0c:	2a25      	cmp	r2, #37	@ 0x25
 800da0e:	d1f9      	bne.n	800da04 <_svfiprintf_r+0x54>
 800da10:	ebba 0b04 	subs.w	fp, sl, r4
 800da14:	d00b      	beq.n	800da2e <_svfiprintf_r+0x7e>
 800da16:	465b      	mov	r3, fp
 800da18:	4622      	mov	r2, r4
 800da1a:	4629      	mov	r1, r5
 800da1c:	4638      	mov	r0, r7
 800da1e:	f7ff ff6b 	bl	800d8f8 <__ssputs_r>
 800da22:	3001      	adds	r0, #1
 800da24:	f000 80a7 	beq.w	800db76 <_svfiprintf_r+0x1c6>
 800da28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da2a:	445a      	add	r2, fp
 800da2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800da2e:	f89a 3000 	ldrb.w	r3, [sl]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 809f 	beq.w	800db76 <_svfiprintf_r+0x1c6>
 800da38:	2300      	movs	r3, #0
 800da3a:	f04f 32ff 	mov.w	r2, #4294967295
 800da3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da42:	f10a 0a01 	add.w	sl, sl, #1
 800da46:	9304      	str	r3, [sp, #16]
 800da48:	9307      	str	r3, [sp, #28]
 800da4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800da50:	4654      	mov	r4, sl
 800da52:	2205      	movs	r2, #5
 800da54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da58:	484e      	ldr	r0, [pc, #312]	@ (800db94 <_svfiprintf_r+0x1e4>)
 800da5a:	f000 fa61 	bl	800df20 <memchr>
 800da5e:	9a04      	ldr	r2, [sp, #16]
 800da60:	b9d8      	cbnz	r0, 800da9a <_svfiprintf_r+0xea>
 800da62:	06d0      	lsls	r0, r2, #27
 800da64:	bf44      	itt	mi
 800da66:	2320      	movmi	r3, #32
 800da68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da6c:	0711      	lsls	r1, r2, #28
 800da6e:	bf44      	itt	mi
 800da70:	232b      	movmi	r3, #43	@ 0x2b
 800da72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da76:	f89a 3000 	ldrb.w	r3, [sl]
 800da7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800da7c:	d015      	beq.n	800daaa <_svfiprintf_r+0xfa>
 800da7e:	4654      	mov	r4, sl
 800da80:	2000      	movs	r0, #0
 800da82:	f04f 0c0a 	mov.w	ip, #10
 800da86:	9a07      	ldr	r2, [sp, #28]
 800da88:	4621      	mov	r1, r4
 800da8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da8e:	3b30      	subs	r3, #48	@ 0x30
 800da90:	2b09      	cmp	r3, #9
 800da92:	d94b      	bls.n	800db2c <_svfiprintf_r+0x17c>
 800da94:	b1b0      	cbz	r0, 800dac4 <_svfiprintf_r+0x114>
 800da96:	9207      	str	r2, [sp, #28]
 800da98:	e014      	b.n	800dac4 <_svfiprintf_r+0x114>
 800da9a:	eba0 0308 	sub.w	r3, r0, r8
 800da9e:	fa09 f303 	lsl.w	r3, r9, r3
 800daa2:	4313      	orrs	r3, r2
 800daa4:	46a2      	mov	sl, r4
 800daa6:	9304      	str	r3, [sp, #16]
 800daa8:	e7d2      	b.n	800da50 <_svfiprintf_r+0xa0>
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	1d19      	adds	r1, r3, #4
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	9103      	str	r1, [sp, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bfbb      	ittet	lt
 800dab6:	425b      	neglt	r3, r3
 800dab8:	f042 0202 	orrlt.w	r2, r2, #2
 800dabc:	9307      	strge	r3, [sp, #28]
 800dabe:	9307      	strlt	r3, [sp, #28]
 800dac0:	bfb8      	it	lt
 800dac2:	9204      	strlt	r2, [sp, #16]
 800dac4:	7823      	ldrb	r3, [r4, #0]
 800dac6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dac8:	d10a      	bne.n	800dae0 <_svfiprintf_r+0x130>
 800daca:	7863      	ldrb	r3, [r4, #1]
 800dacc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dace:	d132      	bne.n	800db36 <_svfiprintf_r+0x186>
 800dad0:	9b03      	ldr	r3, [sp, #12]
 800dad2:	3402      	adds	r4, #2
 800dad4:	1d1a      	adds	r2, r3, #4
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	9203      	str	r2, [sp, #12]
 800dada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dade:	9305      	str	r3, [sp, #20]
 800dae0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800db98 <_svfiprintf_r+0x1e8>
 800dae4:	2203      	movs	r2, #3
 800dae6:	4650      	mov	r0, sl
 800dae8:	7821      	ldrb	r1, [r4, #0]
 800daea:	f000 fa19 	bl	800df20 <memchr>
 800daee:	b138      	cbz	r0, 800db00 <_svfiprintf_r+0x150>
 800daf0:	2240      	movs	r2, #64	@ 0x40
 800daf2:	9b04      	ldr	r3, [sp, #16]
 800daf4:	eba0 000a 	sub.w	r0, r0, sl
 800daf8:	4082      	lsls	r2, r0
 800dafa:	4313      	orrs	r3, r2
 800dafc:	3401      	adds	r4, #1
 800dafe:	9304      	str	r3, [sp, #16]
 800db00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db04:	2206      	movs	r2, #6
 800db06:	4825      	ldr	r0, [pc, #148]	@ (800db9c <_svfiprintf_r+0x1ec>)
 800db08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db0c:	f000 fa08 	bl	800df20 <memchr>
 800db10:	2800      	cmp	r0, #0
 800db12:	d036      	beq.n	800db82 <_svfiprintf_r+0x1d2>
 800db14:	4b22      	ldr	r3, [pc, #136]	@ (800dba0 <_svfiprintf_r+0x1f0>)
 800db16:	bb1b      	cbnz	r3, 800db60 <_svfiprintf_r+0x1b0>
 800db18:	9b03      	ldr	r3, [sp, #12]
 800db1a:	3307      	adds	r3, #7
 800db1c:	f023 0307 	bic.w	r3, r3, #7
 800db20:	3308      	adds	r3, #8
 800db22:	9303      	str	r3, [sp, #12]
 800db24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db26:	4433      	add	r3, r6
 800db28:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2a:	e76a      	b.n	800da02 <_svfiprintf_r+0x52>
 800db2c:	460c      	mov	r4, r1
 800db2e:	2001      	movs	r0, #1
 800db30:	fb0c 3202 	mla	r2, ip, r2, r3
 800db34:	e7a8      	b.n	800da88 <_svfiprintf_r+0xd8>
 800db36:	2300      	movs	r3, #0
 800db38:	f04f 0c0a 	mov.w	ip, #10
 800db3c:	4619      	mov	r1, r3
 800db3e:	3401      	adds	r4, #1
 800db40:	9305      	str	r3, [sp, #20]
 800db42:	4620      	mov	r0, r4
 800db44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db48:	3a30      	subs	r2, #48	@ 0x30
 800db4a:	2a09      	cmp	r2, #9
 800db4c:	d903      	bls.n	800db56 <_svfiprintf_r+0x1a6>
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d0c6      	beq.n	800dae0 <_svfiprintf_r+0x130>
 800db52:	9105      	str	r1, [sp, #20]
 800db54:	e7c4      	b.n	800dae0 <_svfiprintf_r+0x130>
 800db56:	4604      	mov	r4, r0
 800db58:	2301      	movs	r3, #1
 800db5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db5e:	e7f0      	b.n	800db42 <_svfiprintf_r+0x192>
 800db60:	ab03      	add	r3, sp, #12
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	462a      	mov	r2, r5
 800db66:	4638      	mov	r0, r7
 800db68:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <_svfiprintf_r+0x1f4>)
 800db6a:	a904      	add	r1, sp, #16
 800db6c:	f3af 8000 	nop.w
 800db70:	1c42      	adds	r2, r0, #1
 800db72:	4606      	mov	r6, r0
 800db74:	d1d6      	bne.n	800db24 <_svfiprintf_r+0x174>
 800db76:	89ab      	ldrh	r3, [r5, #12]
 800db78:	065b      	lsls	r3, r3, #25
 800db7a:	f53f af2d 	bmi.w	800d9d8 <_svfiprintf_r+0x28>
 800db7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db80:	e72c      	b.n	800d9dc <_svfiprintf_r+0x2c>
 800db82:	ab03      	add	r3, sp, #12
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	462a      	mov	r2, r5
 800db88:	4638      	mov	r0, r7
 800db8a:	4b06      	ldr	r3, [pc, #24]	@ (800dba4 <_svfiprintf_r+0x1f4>)
 800db8c:	a904      	add	r1, sp, #16
 800db8e:	f000 f87d 	bl	800dc8c <_printf_i>
 800db92:	e7ed      	b.n	800db70 <_svfiprintf_r+0x1c0>
 800db94:	0800e194 	.word	0x0800e194
 800db98:	0800e19a 	.word	0x0800e19a
 800db9c:	0800e19e 	.word	0x0800e19e
 800dba0:	00000000 	.word	0x00000000
 800dba4:	0800d8f9 	.word	0x0800d8f9

0800dba8 <_printf_common>:
 800dba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbac:	4616      	mov	r6, r2
 800dbae:	4698      	mov	r8, r3
 800dbb0:	688a      	ldr	r2, [r1, #8]
 800dbb2:	690b      	ldr	r3, [r1, #16]
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	bfb8      	it	lt
 800dbba:	4613      	movlt	r3, r2
 800dbbc:	6033      	str	r3, [r6, #0]
 800dbbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbc8:	b10a      	cbz	r2, 800dbce <_printf_common+0x26>
 800dbca:	3301      	adds	r3, #1
 800dbcc:	6033      	str	r3, [r6, #0]
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	0699      	lsls	r1, r3, #26
 800dbd2:	bf42      	ittt	mi
 800dbd4:	6833      	ldrmi	r3, [r6, #0]
 800dbd6:	3302      	addmi	r3, #2
 800dbd8:	6033      	strmi	r3, [r6, #0]
 800dbda:	6825      	ldr	r5, [r4, #0]
 800dbdc:	f015 0506 	ands.w	r5, r5, #6
 800dbe0:	d106      	bne.n	800dbf0 <_printf_common+0x48>
 800dbe2:	f104 0a19 	add.w	sl, r4, #25
 800dbe6:	68e3      	ldr	r3, [r4, #12]
 800dbe8:	6832      	ldr	r2, [r6, #0]
 800dbea:	1a9b      	subs	r3, r3, r2
 800dbec:	42ab      	cmp	r3, r5
 800dbee:	dc2b      	bgt.n	800dc48 <_printf_common+0xa0>
 800dbf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	3b00      	subs	r3, #0
 800dbf8:	bf18      	it	ne
 800dbfa:	2301      	movne	r3, #1
 800dbfc:	0692      	lsls	r2, r2, #26
 800dbfe:	d430      	bmi.n	800dc62 <_printf_common+0xba>
 800dc00:	4641      	mov	r1, r8
 800dc02:	4638      	mov	r0, r7
 800dc04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc08:	47c8      	blx	r9
 800dc0a:	3001      	adds	r0, #1
 800dc0c:	d023      	beq.n	800dc56 <_printf_common+0xae>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	6922      	ldr	r2, [r4, #16]
 800dc12:	f003 0306 	and.w	r3, r3, #6
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	bf14      	ite	ne
 800dc1a:	2500      	movne	r5, #0
 800dc1c:	6833      	ldreq	r3, [r6, #0]
 800dc1e:	f04f 0600 	mov.w	r6, #0
 800dc22:	bf08      	it	eq
 800dc24:	68e5      	ldreq	r5, [r4, #12]
 800dc26:	f104 041a 	add.w	r4, r4, #26
 800dc2a:	bf08      	it	eq
 800dc2c:	1aed      	subeq	r5, r5, r3
 800dc2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dc32:	bf08      	it	eq
 800dc34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	bfc4      	itt	gt
 800dc3c:	1a9b      	subgt	r3, r3, r2
 800dc3e:	18ed      	addgt	r5, r5, r3
 800dc40:	42b5      	cmp	r5, r6
 800dc42:	d11a      	bne.n	800dc7a <_printf_common+0xd2>
 800dc44:	2000      	movs	r0, #0
 800dc46:	e008      	b.n	800dc5a <_printf_common+0xb2>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	4641      	mov	r1, r8
 800dc4e:	4638      	mov	r0, r7
 800dc50:	47c8      	blx	r9
 800dc52:	3001      	adds	r0, #1
 800dc54:	d103      	bne.n	800dc5e <_printf_common+0xb6>
 800dc56:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5e:	3501      	adds	r5, #1
 800dc60:	e7c1      	b.n	800dbe6 <_printf_common+0x3e>
 800dc62:	2030      	movs	r0, #48	@ 0x30
 800dc64:	18e1      	adds	r1, r4, r3
 800dc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc70:	4422      	add	r2, r4
 800dc72:	3302      	adds	r3, #2
 800dc74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc78:	e7c2      	b.n	800dc00 <_printf_common+0x58>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	4641      	mov	r1, r8
 800dc80:	4638      	mov	r0, r7
 800dc82:	47c8      	blx	r9
 800dc84:	3001      	adds	r0, #1
 800dc86:	d0e6      	beq.n	800dc56 <_printf_common+0xae>
 800dc88:	3601      	adds	r6, #1
 800dc8a:	e7d9      	b.n	800dc40 <_printf_common+0x98>

0800dc8c <_printf_i>:
 800dc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	7e0f      	ldrb	r7, [r1, #24]
 800dc92:	4691      	mov	r9, r2
 800dc94:	2f78      	cmp	r7, #120	@ 0x78
 800dc96:	4680      	mov	r8, r0
 800dc98:	460c      	mov	r4, r1
 800dc9a:	469a      	mov	sl, r3
 800dc9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dca2:	d807      	bhi.n	800dcb4 <_printf_i+0x28>
 800dca4:	2f62      	cmp	r7, #98	@ 0x62
 800dca6:	d80a      	bhi.n	800dcbe <_printf_i+0x32>
 800dca8:	2f00      	cmp	r7, #0
 800dcaa:	f000 80d3 	beq.w	800de54 <_printf_i+0x1c8>
 800dcae:	2f58      	cmp	r7, #88	@ 0x58
 800dcb0:	f000 80ba 	beq.w	800de28 <_printf_i+0x19c>
 800dcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcbc:	e03a      	b.n	800dd34 <_printf_i+0xa8>
 800dcbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcc2:	2b15      	cmp	r3, #21
 800dcc4:	d8f6      	bhi.n	800dcb4 <_printf_i+0x28>
 800dcc6:	a101      	add	r1, pc, #4	@ (adr r1, 800dccc <_printf_i+0x40>)
 800dcc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd39 	.word	0x0800dd39
 800dcd4:	0800dcb5 	.word	0x0800dcb5
 800dcd8:	0800dcb5 	.word	0x0800dcb5
 800dcdc:	0800dcb5 	.word	0x0800dcb5
 800dce0:	0800dcb5 	.word	0x0800dcb5
 800dce4:	0800dd39 	.word	0x0800dd39
 800dce8:	0800dcb5 	.word	0x0800dcb5
 800dcec:	0800dcb5 	.word	0x0800dcb5
 800dcf0:	0800dcb5 	.word	0x0800dcb5
 800dcf4:	0800dcb5 	.word	0x0800dcb5
 800dcf8:	0800de3b 	.word	0x0800de3b
 800dcfc:	0800dd63 	.word	0x0800dd63
 800dd00:	0800ddf5 	.word	0x0800ddf5
 800dd04:	0800dcb5 	.word	0x0800dcb5
 800dd08:	0800dcb5 	.word	0x0800dcb5
 800dd0c:	0800de5d 	.word	0x0800de5d
 800dd10:	0800dcb5 	.word	0x0800dcb5
 800dd14:	0800dd63 	.word	0x0800dd63
 800dd18:	0800dcb5 	.word	0x0800dcb5
 800dd1c:	0800dcb5 	.word	0x0800dcb5
 800dd20:	0800ddfd 	.word	0x0800ddfd
 800dd24:	6833      	ldr	r3, [r6, #0]
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6032      	str	r2, [r6, #0]
 800dd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd34:	2301      	movs	r3, #1
 800dd36:	e09e      	b.n	800de76 <_printf_i+0x1ea>
 800dd38:	6833      	ldr	r3, [r6, #0]
 800dd3a:	6820      	ldr	r0, [r4, #0]
 800dd3c:	1d19      	adds	r1, r3, #4
 800dd3e:	6031      	str	r1, [r6, #0]
 800dd40:	0606      	lsls	r6, r0, #24
 800dd42:	d501      	bpl.n	800dd48 <_printf_i+0xbc>
 800dd44:	681d      	ldr	r5, [r3, #0]
 800dd46:	e003      	b.n	800dd50 <_printf_i+0xc4>
 800dd48:	0645      	lsls	r5, r0, #25
 800dd4a:	d5fb      	bpl.n	800dd44 <_printf_i+0xb8>
 800dd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd50:	2d00      	cmp	r5, #0
 800dd52:	da03      	bge.n	800dd5c <_printf_i+0xd0>
 800dd54:	232d      	movs	r3, #45	@ 0x2d
 800dd56:	426d      	negs	r5, r5
 800dd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd5c:	230a      	movs	r3, #10
 800dd5e:	4859      	ldr	r0, [pc, #356]	@ (800dec4 <_printf_i+0x238>)
 800dd60:	e011      	b.n	800dd86 <_printf_i+0xfa>
 800dd62:	6821      	ldr	r1, [r4, #0]
 800dd64:	6833      	ldr	r3, [r6, #0]
 800dd66:	0608      	lsls	r0, r1, #24
 800dd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd6c:	d402      	bmi.n	800dd74 <_printf_i+0xe8>
 800dd6e:	0649      	lsls	r1, r1, #25
 800dd70:	bf48      	it	mi
 800dd72:	b2ad      	uxthmi	r5, r5
 800dd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd76:	6033      	str	r3, [r6, #0]
 800dd78:	bf14      	ite	ne
 800dd7a:	230a      	movne	r3, #10
 800dd7c:	2308      	moveq	r3, #8
 800dd7e:	4851      	ldr	r0, [pc, #324]	@ (800dec4 <_printf_i+0x238>)
 800dd80:	2100      	movs	r1, #0
 800dd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd86:	6866      	ldr	r6, [r4, #4]
 800dd88:	2e00      	cmp	r6, #0
 800dd8a:	bfa8      	it	ge
 800dd8c:	6821      	ldrge	r1, [r4, #0]
 800dd8e:	60a6      	str	r6, [r4, #8]
 800dd90:	bfa4      	itt	ge
 800dd92:	f021 0104 	bicge.w	r1, r1, #4
 800dd96:	6021      	strge	r1, [r4, #0]
 800dd98:	b90d      	cbnz	r5, 800dd9e <_printf_i+0x112>
 800dd9a:	2e00      	cmp	r6, #0
 800dd9c:	d04b      	beq.n	800de36 <_printf_i+0x1aa>
 800dd9e:	4616      	mov	r6, r2
 800dda0:	fbb5 f1f3 	udiv	r1, r5, r3
 800dda4:	fb03 5711 	mls	r7, r3, r1, r5
 800dda8:	5dc7      	ldrb	r7, [r0, r7]
 800ddaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddae:	462f      	mov	r7, r5
 800ddb0:	42bb      	cmp	r3, r7
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	d9f4      	bls.n	800dda0 <_printf_i+0x114>
 800ddb6:	2b08      	cmp	r3, #8
 800ddb8:	d10b      	bne.n	800ddd2 <_printf_i+0x146>
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	07df      	lsls	r7, r3, #31
 800ddbe:	d508      	bpl.n	800ddd2 <_printf_i+0x146>
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	6861      	ldr	r1, [r4, #4]
 800ddc4:	4299      	cmp	r1, r3
 800ddc6:	bfde      	ittt	le
 800ddc8:	2330      	movle	r3, #48	@ 0x30
 800ddca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddd2:	1b92      	subs	r2, r2, r6
 800ddd4:	6122      	str	r2, [r4, #16]
 800ddd6:	464b      	mov	r3, r9
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4640      	mov	r0, r8
 800dddc:	f8cd a000 	str.w	sl, [sp]
 800dde0:	aa03      	add	r2, sp, #12
 800dde2:	f7ff fee1 	bl	800dba8 <_printf_common>
 800dde6:	3001      	adds	r0, #1
 800dde8:	d14a      	bne.n	800de80 <_printf_i+0x1f4>
 800ddea:	f04f 30ff 	mov.w	r0, #4294967295
 800ddee:	b004      	add	sp, #16
 800ddf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	f043 0320 	orr.w	r3, r3, #32
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	2778      	movs	r7, #120	@ 0x78
 800ddfe:	4832      	ldr	r0, [pc, #200]	@ (800dec8 <_printf_i+0x23c>)
 800de00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	6831      	ldr	r1, [r6, #0]
 800de08:	061f      	lsls	r7, r3, #24
 800de0a:	f851 5b04 	ldr.w	r5, [r1], #4
 800de0e:	d402      	bmi.n	800de16 <_printf_i+0x18a>
 800de10:	065f      	lsls	r7, r3, #25
 800de12:	bf48      	it	mi
 800de14:	b2ad      	uxthmi	r5, r5
 800de16:	6031      	str	r1, [r6, #0]
 800de18:	07d9      	lsls	r1, r3, #31
 800de1a:	bf44      	itt	mi
 800de1c:	f043 0320 	orrmi.w	r3, r3, #32
 800de20:	6023      	strmi	r3, [r4, #0]
 800de22:	b11d      	cbz	r5, 800de2c <_printf_i+0x1a0>
 800de24:	2310      	movs	r3, #16
 800de26:	e7ab      	b.n	800dd80 <_printf_i+0xf4>
 800de28:	4826      	ldr	r0, [pc, #152]	@ (800dec4 <_printf_i+0x238>)
 800de2a:	e7e9      	b.n	800de00 <_printf_i+0x174>
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	f023 0320 	bic.w	r3, r3, #32
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	e7f6      	b.n	800de24 <_printf_i+0x198>
 800de36:	4616      	mov	r6, r2
 800de38:	e7bd      	b.n	800ddb6 <_printf_i+0x12a>
 800de3a:	6833      	ldr	r3, [r6, #0]
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1d18      	adds	r0, r3, #4
 800de40:	6961      	ldr	r1, [r4, #20]
 800de42:	6030      	str	r0, [r6, #0]
 800de44:	062e      	lsls	r6, r5, #24
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	d501      	bpl.n	800de4e <_printf_i+0x1c2>
 800de4a:	6019      	str	r1, [r3, #0]
 800de4c:	e002      	b.n	800de54 <_printf_i+0x1c8>
 800de4e:	0668      	lsls	r0, r5, #25
 800de50:	d5fb      	bpl.n	800de4a <_printf_i+0x1be>
 800de52:	8019      	strh	r1, [r3, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	4616      	mov	r6, r2
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	e7bc      	b.n	800ddd6 <_printf_i+0x14a>
 800de5c:	6833      	ldr	r3, [r6, #0]
 800de5e:	2100      	movs	r1, #0
 800de60:	1d1a      	adds	r2, r3, #4
 800de62:	6032      	str	r2, [r6, #0]
 800de64:	681e      	ldr	r6, [r3, #0]
 800de66:	6862      	ldr	r2, [r4, #4]
 800de68:	4630      	mov	r0, r6
 800de6a:	f000 f859 	bl	800df20 <memchr>
 800de6e:	b108      	cbz	r0, 800de74 <_printf_i+0x1e8>
 800de70:	1b80      	subs	r0, r0, r6
 800de72:	6060      	str	r0, [r4, #4]
 800de74:	6863      	ldr	r3, [r4, #4]
 800de76:	6123      	str	r3, [r4, #16]
 800de78:	2300      	movs	r3, #0
 800de7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de7e:	e7aa      	b.n	800ddd6 <_printf_i+0x14a>
 800de80:	4632      	mov	r2, r6
 800de82:	4649      	mov	r1, r9
 800de84:	4640      	mov	r0, r8
 800de86:	6923      	ldr	r3, [r4, #16]
 800de88:	47d0      	blx	sl
 800de8a:	3001      	adds	r0, #1
 800de8c:	d0ad      	beq.n	800ddea <_printf_i+0x15e>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	079b      	lsls	r3, r3, #30
 800de92:	d413      	bmi.n	800debc <_printf_i+0x230>
 800de94:	68e0      	ldr	r0, [r4, #12]
 800de96:	9b03      	ldr	r3, [sp, #12]
 800de98:	4298      	cmp	r0, r3
 800de9a:	bfb8      	it	lt
 800de9c:	4618      	movlt	r0, r3
 800de9e:	e7a6      	b.n	800ddee <_printf_i+0x162>
 800dea0:	2301      	movs	r3, #1
 800dea2:	4632      	mov	r2, r6
 800dea4:	4649      	mov	r1, r9
 800dea6:	4640      	mov	r0, r8
 800dea8:	47d0      	blx	sl
 800deaa:	3001      	adds	r0, #1
 800deac:	d09d      	beq.n	800ddea <_printf_i+0x15e>
 800deae:	3501      	adds	r5, #1
 800deb0:	68e3      	ldr	r3, [r4, #12]
 800deb2:	9903      	ldr	r1, [sp, #12]
 800deb4:	1a5b      	subs	r3, r3, r1
 800deb6:	42ab      	cmp	r3, r5
 800deb8:	dcf2      	bgt.n	800dea0 <_printf_i+0x214>
 800deba:	e7eb      	b.n	800de94 <_printf_i+0x208>
 800debc:	2500      	movs	r5, #0
 800debe:	f104 0619 	add.w	r6, r4, #25
 800dec2:	e7f5      	b.n	800deb0 <_printf_i+0x224>
 800dec4:	0800e1a5 	.word	0x0800e1a5
 800dec8:	0800e1b6 	.word	0x0800e1b6

0800decc <memmove>:
 800decc:	4288      	cmp	r0, r1
 800dece:	b510      	push	{r4, lr}
 800ded0:	eb01 0402 	add.w	r4, r1, r2
 800ded4:	d902      	bls.n	800dedc <memmove+0x10>
 800ded6:	4284      	cmp	r4, r0
 800ded8:	4623      	mov	r3, r4
 800deda:	d807      	bhi.n	800deec <memmove+0x20>
 800dedc:	1e43      	subs	r3, r0, #1
 800dede:	42a1      	cmp	r1, r4
 800dee0:	d008      	beq.n	800def4 <memmove+0x28>
 800dee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deea:	e7f8      	b.n	800dede <memmove+0x12>
 800deec:	4601      	mov	r1, r0
 800deee:	4402      	add	r2, r0
 800def0:	428a      	cmp	r2, r1
 800def2:	d100      	bne.n	800def6 <memmove+0x2a>
 800def4:	bd10      	pop	{r4, pc}
 800def6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800defa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800defe:	e7f7      	b.n	800def0 <memmove+0x24>

0800df00 <_sbrk_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	2300      	movs	r3, #0
 800df04:	4d05      	ldr	r5, [pc, #20]	@ (800df1c <_sbrk_r+0x1c>)
 800df06:	4604      	mov	r4, r0
 800df08:	4608      	mov	r0, r1
 800df0a:	602b      	str	r3, [r5, #0]
 800df0c:	f7f2 ff10 	bl	8000d30 <_sbrk>
 800df10:	1c43      	adds	r3, r0, #1
 800df12:	d102      	bne.n	800df1a <_sbrk_r+0x1a>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	b103      	cbz	r3, 800df1a <_sbrk_r+0x1a>
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	20004490 	.word	0x20004490

0800df20 <memchr>:
 800df20:	4603      	mov	r3, r0
 800df22:	b510      	push	{r4, lr}
 800df24:	b2c9      	uxtb	r1, r1
 800df26:	4402      	add	r2, r0
 800df28:	4293      	cmp	r3, r2
 800df2a:	4618      	mov	r0, r3
 800df2c:	d101      	bne.n	800df32 <memchr+0x12>
 800df2e:	2000      	movs	r0, #0
 800df30:	e003      	b.n	800df3a <memchr+0x1a>
 800df32:	7804      	ldrb	r4, [r0, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	428c      	cmp	r4, r1
 800df38:	d1f6      	bne.n	800df28 <memchr+0x8>
 800df3a:	bd10      	pop	{r4, pc}

0800df3c <_realloc_r>:
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	4680      	mov	r8, r0
 800df42:	4615      	mov	r5, r2
 800df44:	460c      	mov	r4, r1
 800df46:	b921      	cbnz	r1, 800df52 <_realloc_r+0x16>
 800df48:	4611      	mov	r1, r2
 800df4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df4e:	f7ff bc47 	b.w	800d7e0 <_malloc_r>
 800df52:	b92a      	cbnz	r2, 800df60 <_realloc_r+0x24>
 800df54:	f7ff fbda 	bl	800d70c <_free_r>
 800df58:	2400      	movs	r4, #0
 800df5a:	4620      	mov	r0, r4
 800df5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df60:	f000 f81a 	bl	800df98 <_malloc_usable_size_r>
 800df64:	4285      	cmp	r5, r0
 800df66:	4606      	mov	r6, r0
 800df68:	d802      	bhi.n	800df70 <_realloc_r+0x34>
 800df6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df6e:	d8f4      	bhi.n	800df5a <_realloc_r+0x1e>
 800df70:	4629      	mov	r1, r5
 800df72:	4640      	mov	r0, r8
 800df74:	f7ff fc34 	bl	800d7e0 <_malloc_r>
 800df78:	4607      	mov	r7, r0
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d0ec      	beq.n	800df58 <_realloc_r+0x1c>
 800df7e:	42b5      	cmp	r5, r6
 800df80:	462a      	mov	r2, r5
 800df82:	4621      	mov	r1, r4
 800df84:	bf28      	it	cs
 800df86:	4632      	movcs	r2, r6
 800df88:	f7ff fbb2 	bl	800d6f0 <memcpy>
 800df8c:	4621      	mov	r1, r4
 800df8e:	4640      	mov	r0, r8
 800df90:	f7ff fbbc 	bl	800d70c <_free_r>
 800df94:	463c      	mov	r4, r7
 800df96:	e7e0      	b.n	800df5a <_realloc_r+0x1e>

0800df98 <_malloc_usable_size_r>:
 800df98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df9c:	1f18      	subs	r0, r3, #4
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	bfbc      	itt	lt
 800dfa2:	580b      	ldrlt	r3, [r1, r0]
 800dfa4:	18c0      	addlt	r0, r0, r3
 800dfa6:	4770      	bx	lr

0800dfa8 <_init>:
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	bf00      	nop
 800dfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfae:	bc08      	pop	{r3}
 800dfb0:	469e      	mov	lr, r3
 800dfb2:	4770      	bx	lr

0800dfb4 <_fini>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	bf00      	nop
 800dfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfba:	bc08      	pop	{r3}
 800dfbc:	469e      	mov	lr, r3
 800dfbe:	4770      	bx	lr
