
mini_mth_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de38  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800df48  0800df48  0000ef48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e150  0800e150  000101d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e150  0800e150  0000f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e158  0800e158  000101d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e158  0800e158  0000f158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e15c  0800e15c  0000f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800e160  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d0  200001d0  0800e330  000101d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  0800e330  000104a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292a2  00000000  00000000  000101f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066c3  00000000  00000000  0003949b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d8  00000000  00000000  0003fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ed  00000000  00000000  00041d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008c23  00000000  00000000  00043725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fa32  00000000  00000000  0004c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d1d  00000000  00000000  0007bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ca97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009134  00000000  00000000  0011cadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00125c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800df30 	.word	0x0800df30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800df30 	.word	0x0800df30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b968 	b.w	8000448 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9d08      	ldr	r5, [sp, #32]
 8000196:	460c      	mov	r4, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14e      	bne.n	800023a <__udivmoddi4+0xaa>
 800019c:	4694      	mov	ip, r2
 800019e:	458c      	cmp	ip, r1
 80001a0:	4686      	mov	lr, r0
 80001a2:	fab2 f282 	clz	r2, r2
 80001a6:	d962      	bls.n	800026e <__udivmoddi4+0xde>
 80001a8:	b14a      	cbz	r2, 80001be <__udivmoddi4+0x2e>
 80001aa:	f1c2 0320 	rsb	r3, r2, #32
 80001ae:	4091      	lsls	r1, r2
 80001b0:	fa20 f303 	lsr.w	r3, r0, r3
 80001b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b8:	4319      	orrs	r1, r3
 80001ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80001be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001c6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ca:	fa1f f68c 	uxth.w	r6, ip
 80001ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001d6:	fb04 f106 	mul.w	r1, r4, r6
 80001da:	4299      	cmp	r1, r3
 80001dc:	d90a      	bls.n	80001f4 <__udivmoddi4+0x64>
 80001de:	eb1c 0303 	adds.w	r3, ip, r3
 80001e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80001e6:	f080 8110 	bcs.w	800040a <__udivmoddi4+0x27a>
 80001ea:	4299      	cmp	r1, r3
 80001ec:	f240 810d 	bls.w	800040a <__udivmoddi4+0x27a>
 80001f0:	3c02      	subs	r4, #2
 80001f2:	4463      	add	r3, ip
 80001f4:	1a59      	subs	r1, r3, r1
 80001f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80001fa:	fb07 1110 	mls	r1, r7, r0, r1
 80001fe:	fb00 f606 	mul.w	r6, r0, r6
 8000202:	fa1f f38e 	uxth.w	r3, lr
 8000206:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800020a:	429e      	cmp	r6, r3
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0303 	adds.w	r3, ip, r3
 8000212:	f100 31ff 	add.w	r1, r0, #4294967295
 8000216:	f080 80fa 	bcs.w	800040e <__udivmoddi4+0x27e>
 800021a:	429e      	cmp	r6, r3
 800021c:	f240 80f7 	bls.w	800040e <__udivmoddi4+0x27e>
 8000220:	4463      	add	r3, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	1b9b      	subs	r3, r3, r6
 8000228:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800022c:	b11d      	cbz	r5, 8000236 <__udivmoddi4+0xa6>
 800022e:	40d3      	lsrs	r3, r2
 8000230:	2200      	movs	r2, #0
 8000232:	e9c5 3200 	strd	r3, r2, [r5]
 8000236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023a:	428b      	cmp	r3, r1
 800023c:	d905      	bls.n	800024a <__udivmoddi4+0xba>
 800023e:	b10d      	cbz	r5, 8000244 <__udivmoddi4+0xb4>
 8000240:	e9c5 0100 	strd	r0, r1, [r5]
 8000244:	2100      	movs	r1, #0
 8000246:	4608      	mov	r0, r1
 8000248:	e7f5      	b.n	8000236 <__udivmoddi4+0xa6>
 800024a:	fab3 f183 	clz	r1, r3
 800024e:	2900      	cmp	r1, #0
 8000250:	d146      	bne.n	80002e0 <__udivmoddi4+0x150>
 8000252:	42a3      	cmp	r3, r4
 8000254:	d302      	bcc.n	800025c <__udivmoddi4+0xcc>
 8000256:	4290      	cmp	r0, r2
 8000258:	f0c0 80ee 	bcc.w	8000438 <__udivmoddi4+0x2a8>
 800025c:	1a86      	subs	r6, r0, r2
 800025e:	eb64 0303 	sbc.w	r3, r4, r3
 8000262:	2001      	movs	r0, #1
 8000264:	2d00      	cmp	r5, #0
 8000266:	d0e6      	beq.n	8000236 <__udivmoddi4+0xa6>
 8000268:	e9c5 6300 	strd	r6, r3, [r5]
 800026c:	e7e3      	b.n	8000236 <__udivmoddi4+0xa6>
 800026e:	2a00      	cmp	r2, #0
 8000270:	f040 808f 	bne.w	8000392 <__udivmoddi4+0x202>
 8000274:	eba1 040c 	sub.w	r4, r1, ip
 8000278:	2101      	movs	r1, #1
 800027a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fbb4 f6f8 	udiv	r6, r4, r8
 8000286:	fb08 4416 	mls	r4, r8, r6, r4
 800028a:	fb07 f006 	mul.w	r0, r7, r6
 800028e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000296:	4298      	cmp	r0, r3
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x11c>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f106 34ff 	add.w	r4, r6, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x11a>
 80002a4:	4298      	cmp	r0, r3
 80002a6:	f200 80cb 	bhi.w	8000440 <__udivmoddi4+0x2b0>
 80002aa:	4626      	mov	r6, r4
 80002ac:	1a1c      	subs	r4, r3, r0
 80002ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80002b2:	fb08 4410 	mls	r4, r8, r0, r4
 80002b6:	fb00 f707 	mul.w	r7, r0, r7
 80002ba:	fa1f f38e 	uxth.w	r3, lr
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	429f      	cmp	r7, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x148>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x146>
 80002d0:	429f      	cmp	r7, r3
 80002d2:	f200 80ae 	bhi.w	8000432 <__udivmoddi4+0x2a2>
 80002d6:	4620      	mov	r0, r4
 80002d8:	1bdb      	subs	r3, r3, r7
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	e7a5      	b.n	800022c <__udivmoddi4+0x9c>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa24 f607 	lsr.w	r6, r4, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbb6 f8f9 	udiv	r8, r6, r9
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	fb09 6618 	mls	r6, r9, r8, r6
 8000302:	fa20 f307 	lsr.w	r3, r0, r7
 8000306:	408c      	lsls	r4, r1
 8000308:	fa00 fa01 	lsl.w	sl, r0, r1
 800030c:	fb08 f00e 	mul.w	r0, r8, lr
 8000310:	431c      	orrs	r4, r3
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000318:	4298      	cmp	r0, r3
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x1a6>
 8000320:	eb1c 0303 	adds.w	r3, ip, r3
 8000324:	f108 36ff 	add.w	r6, r8, #4294967295
 8000328:	f080 8081 	bcs.w	800042e <__udivmoddi4+0x29e>
 800032c:	4298      	cmp	r0, r3
 800032e:	d97e      	bls.n	800042e <__udivmoddi4+0x29e>
 8000330:	f1a8 0802 	sub.w	r8, r8, #2
 8000334:	4463      	add	r3, ip
 8000336:	1a1e      	subs	r6, r3, r0
 8000338:	fbb6 f3f9 	udiv	r3, r6, r9
 800033c:	fb09 6613 	mls	r6, r9, r3, r6
 8000340:	fb03 fe0e 	mul.w	lr, r3, lr
 8000344:	b2a4      	uxth	r4, r4
 8000346:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800034a:	45a6      	cmp	lr, r4
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x1d0>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f103 30ff 	add.w	r0, r3, #4294967295
 8000356:	d266      	bcs.n	8000426 <__udivmoddi4+0x296>
 8000358:	45a6      	cmp	lr, r4
 800035a:	d964      	bls.n	8000426 <__udivmoddi4+0x296>
 800035c:	3b02      	subs	r3, #2
 800035e:	4464      	add	r4, ip
 8000360:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000364:	fba0 8302 	umull	r8, r3, r0, r2
 8000368:	eba4 040e 	sub.w	r4, r4, lr
 800036c:	429c      	cmp	r4, r3
 800036e:	46c6      	mov	lr, r8
 8000370:	461e      	mov	r6, r3
 8000372:	d350      	bcc.n	8000416 <__udivmoddi4+0x286>
 8000374:	d04d      	beq.n	8000412 <__udivmoddi4+0x282>
 8000376:	b155      	cbz	r5, 800038e <__udivmoddi4+0x1fe>
 8000378:	ebba 030e 	subs.w	r3, sl, lr
 800037c:	eb64 0406 	sbc.w	r4, r4, r6
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	40cb      	lsrs	r3, r1
 8000386:	431f      	orrs	r7, r3
 8000388:	40cc      	lsrs	r4, r1
 800038a:	e9c5 7400 	strd	r7, r4, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	e751      	b.n	8000236 <__udivmoddi4+0xa6>
 8000392:	fa0c fc02 	lsl.w	ip, ip, r2
 8000396:	f1c2 0320 	rsb	r3, r2, #32
 800039a:	40d9      	lsrs	r1, r3
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003a8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003ac:	fb08 1110 	mls	r1, r8, r0, r1
 80003b0:	4094      	lsls	r4, r2
 80003b2:	431c      	orrs	r4, r3
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	0c23      	lsrs	r3, r4, #16
 80003ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003be:	fb00 f107 	mul.w	r1, r0, r7
 80003c2:	4299      	cmp	r1, r3
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x248>
 80003c6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ce:	d22c      	bcs.n	800042a <__udivmoddi4+0x29a>
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d92a      	bls.n	800042a <__udivmoddi4+0x29a>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4463      	add	r3, ip
 80003d8:	1a5b      	subs	r3, r3, r1
 80003da:	fbb3 f1f8 	udiv	r1, r3, r8
 80003de:	fb08 3311 	mls	r3, r8, r1, r3
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e8:	fb01 f307 	mul.w	r3, r1, r7
 80003ec:	42a3      	cmp	r3, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x272>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80003f8:	d213      	bcs.n	8000422 <__udivmoddi4+0x292>
 80003fa:	42a3      	cmp	r3, r4
 80003fc:	d911      	bls.n	8000422 <__udivmoddi4+0x292>
 80003fe:	3902      	subs	r1, #2
 8000400:	4464      	add	r4, ip
 8000402:	1ae4      	subs	r4, r4, r3
 8000404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000408:	e73b      	b.n	8000282 <__udivmoddi4+0xf2>
 800040a:	4604      	mov	r4, r0
 800040c:	e6f2      	b.n	80001f4 <__udivmoddi4+0x64>
 800040e:	4608      	mov	r0, r1
 8000410:	e708      	b.n	8000224 <__udivmoddi4+0x94>
 8000412:	45c2      	cmp	sl, r8
 8000414:	d2af      	bcs.n	8000376 <__udivmoddi4+0x1e6>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb63 060c 	sbc.w	r6, r3, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7a9      	b.n	8000376 <__udivmoddi4+0x1e6>
 8000422:	4631      	mov	r1, r6
 8000424:	e7ed      	b.n	8000402 <__udivmoddi4+0x272>
 8000426:	4603      	mov	r3, r0
 8000428:	e79a      	b.n	8000360 <__udivmoddi4+0x1d0>
 800042a:	4630      	mov	r0, r6
 800042c:	e7d4      	b.n	80003d8 <__udivmoddi4+0x248>
 800042e:	46b0      	mov	r8, r6
 8000430:	e781      	b.n	8000336 <__udivmoddi4+0x1a6>
 8000432:	4463      	add	r3, ip
 8000434:	3802      	subs	r0, #2
 8000436:	e74f      	b.n	80002d8 <__udivmoddi4+0x148>
 8000438:	4606      	mov	r6, r0
 800043a:	4623      	mov	r3, r4
 800043c:	4608      	mov	r0, r1
 800043e:	e711      	b.n	8000264 <__udivmoddi4+0xd4>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	e732      	b.n	80002ac <__udivmoddi4+0x11c>
 8000446:	bf00      	nop

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b087      	sub	sp, #28
 8000450:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000452:	f000 fcc3 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000456:	f000 f851 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045a:	f000 f965 	bl	8000728 <MX_GPIO_Init>
  MX_I2C2_Init();
 800045e:	f000 f8e1 	bl	8000624 <MX_I2C2_Init>
  MX_CAN_Init();
 8000462:	f000 f8ab 	bl	80005bc <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000466:	f000 f935 	bl	80006d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800046a:	f000 f909 	bl	8000680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  link_gpio_interface(&hgpio, gpio_set, gpio_get);
 800046e:	4a19      	ldr	r2, [pc, #100]	@ (80004d4 <main+0x88>)
 8000470:	4919      	ldr	r1, [pc, #100]	@ (80004d8 <main+0x8c>)
 8000472:	481a      	ldr	r0, [pc, #104]	@ (80004dc <main+0x90>)
 8000474:	f00c feb2 	bl	800d1dc <link_gpio_interface>

  link_periph_interface(
 8000478:	2000      	movs	r0, #0
 800047a:	f00c fec1 	bl	800d200 <get_hard_uart_interface_handle>
 800047e:	4604      	mov	r4, r0
		  get_hard_uart_interface_handle(0),
		  get_periph_event_id(),
 8000480:	f00c ff9c 	bl	800d3bc <get_periph_event_id>
 8000484:	4601      	mov	r1, r0
  link_periph_interface(
 8000486:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <main+0x94>)
 8000488:	9305      	str	r3, [sp, #20]
 800048a:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <main+0x98>)
 800048c:	9304      	str	r3, [sp, #16]
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <main+0x9c>)
 8000490:	9303      	str	r3, [sp, #12]
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <main+0xa0>)
 8000494:	9302      	str	r3, [sp, #8]
 8000496:	2301      	movs	r3, #1
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2302      	movs	r3, #2
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2300      	movs	r3, #0
 80004a0:	2200      	movs	r2, #0
 80004a2:	4620      	mov	r0, r4
 80004a4:	f00c fe70 	bl	800d188 <link_periph_interface>
		  delay_us);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a8:	f007 f9fa 	bl	80078a0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  print_msg_queue_init();
 80004ac:	f00c ff90 	bl	800d3d0 <print_msg_queue_init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004b0:	4a0f      	ldr	r2, [pc, #60]	@ (80004f0 <main+0xa4>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <main+0xa8>)
 80004b6:	f007 faab 	bl	8007a10 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <main+0xac>)
 80004be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  print_msg_thread_init();
 80004c0:	f00c ffde 	bl	800d480 <print_msg_thread_init>
  button_thread_init();
 80004c4:	f00c ffa2 	bl	800d40c <button_thread_init>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  init_periph_events();
 80004c8:	f00c ff62 	bl	800d390 <init_periph_events>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004cc:	f007 fa0a 	bl	80078e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x84>
 80004d4:	0800d139 	.word	0x0800d139
 80004d8:	0800d0d1 	.word	0x0800d0d1
 80004dc:	200002fc 	.word	0x200002fc
 80004e0:	0800cfc5 	.word	0x0800cfc5
 80004e4:	0800d297 	.word	0x0800d297
 80004e8:	0800d235 	.word	0x0800d235
 80004ec:	20000268 	.word	0x20000268
 80004f0:	0800e04c 	.word	0x0800e04c
 80004f4:	080008a1 	.word	0x080008a1
 80004f8:	200002f8 	.word	0x200002f8

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000506:	2228      	movs	r2, #40	@ 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f00d f82a 	bl	800d564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052c:	2301      	movs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000548:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f960 	bl	8003818 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 f9cd 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000572:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fbcc 	bl	8003d1c <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058a:	f000 f9b7 	bl	80008fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800058e:	2310      	movs	r3, #16
 8000590:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fdb7 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a4:	f000 f9aa 	bl	80008fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f04f 61e0 	mov.w	r1, #117440512	@ 0x7000000
 80005ae:	2000      	movs	r0, #0
 80005b0:	f003 fc9e 	bl	8003ef0 <HAL_RCC_MCOConfig>
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <MX_CAN_Init+0x60>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_CAN_Init+0x64>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <MX_CAN_Init+0x60>)
 80005c8:	2210      	movs	r2, #16
 80005ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005cc:	4b13      	ldr	r3, [pc, #76]	@ (800061c <MX_CAN_Init+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <MX_CAN_Init+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <MX_CAN_Init+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_CAN_Init+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_CAN_Init+0x60>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_CAN_Init+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_CAN_Init+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_CAN_Init+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_CAN_Init+0x60>)
 80005fe:	2200      	movs	r2, #0
 8000600:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_CAN_Init+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_CAN_Init+0x60>)
 800060a:	f000 fc19 	bl	8000e40 <HAL_CAN_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000614:	f000 f972 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200001ec 	.word	0x200001ec
 8000620:	40006400 	.word	0x40006400

08000624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_I2C2_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <MX_I2C2_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000630:	4a12      	ldr	r2, [pc, #72]	@ (800067c <MX_I2C2_Init+0x58>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_I2C2_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_I2C2_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_I2C2_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_I2C2_Init+0x50>)
 8000662:	f001 fa35 	bl	8001ad0 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f946 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000214 	.word	0x20000214
 8000678:	40005800 	.word	0x40005800
 800067c:	000186a0 	.word	0x000186a0

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f004 f81c 	bl	80046f4 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f91b 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000268 	.word	0x20000268
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f003 fff2 	bl	80046f4 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8f1 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200002b0 	.word	0x200002b0
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <MX_GPIO_Init+0x168>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a53      	ldr	r2, [pc, #332]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b51      	ldr	r3, [pc, #324]	@ (8000890 <MX_GPIO_Init+0x168>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b4e      	ldr	r3, [pc, #312]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a4d      	ldr	r2, [pc, #308]	@ (8000890 <MX_GPIO_Init+0x168>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b4b      	ldr	r3, [pc, #300]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b48      	ldr	r3, [pc, #288]	@ (8000890 <MX_GPIO_Init+0x168>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a47      	ldr	r2, [pc, #284]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <MX_GPIO_Init+0x168>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a41      	ldr	r2, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x168>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x168>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a2:	483c      	ldr	r0, [pc, #240]	@ (8000894 <MX_GPIO_Init+0x16c>)
 80007a4:	f001 f97b 	bl	8001a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	483a      	ldr	r0, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x170>)
 80007ae:	f001 f976 	bl	8001a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR_GPIO_Port, RS485_DIR_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2104      	movs	r1, #4
 80007b6:	4839      	ldr	r0, [pc, #228]	@ (800089c <MX_GPIO_Init+0x174>)
 80007b8:	f001 f971 	bl	8001a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	482f      	ldr	r0, [pc, #188]	@ (8000894 <MX_GPIO_Init+0x16c>)
 80007d6:	f000 ffc7 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007da:	23f1      	movs	r3, #241	@ 0xf1
 80007dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	482b      	ldr	r0, [pc, #172]	@ (8000898 <MX_GPIO_Init+0x170>)
 80007ea:	f000 ffbd 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	4824      	ldr	r0, [pc, #144]	@ (8000898 <MX_GPIO_Init+0x170>)
 8000806:	f000 ffaf 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800080a:	f24f 03f9 	movw	r3, #61689	@ 0xf0f9
 800080e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4820      	ldr	r0, [pc, #128]	@ (800089c <MX_GPIO_Init+0x174>)
 800081c:	f000 ffa4 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_0_Pin */
  GPIO_InitStruct.Pin = USER_BTN_0_Pin;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_0_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	481a      	ldr	r0, [pc, #104]	@ (800089c <MX_GPIO_Init+0x174>)
 8000834:	f000 ff98 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 8000838:	2304      	movs	r3, #4
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2302      	movs	r3, #2
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_GPIO_Init+0x174>)
 8000850:	f000 ff8a 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <MX_GPIO_Init+0x170>)
 800086a:	f000 ff7d 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 800086e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_GPIO_Init+0x170>)
 8000884:	f000 ff70 	bl	8001768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	40011000 	.word	0x40011000
 8000898:	40010800 	.word	0x40010800
 800089c:	40010c00 	.word	0x40010c00

080008a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008a8:	f00b fee2 	bl	800c670 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gpio_set(0, GPIO_TRUE);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f00c fc0e 	bl	800d0d0 <gpio_set>
	osDelay(100);
 80008b4:	2064      	movs	r0, #100	@ 0x64
 80008b6:	f007 f93d 	bl	8007b34 <osDelay>
	gpio_set(0, GPIO_FALSE);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2000      	movs	r0, #0
 80008be:	f00c fc07 	bl	800d0d0 <gpio_set>
    osDelay(100);
 80008c2:	2064      	movs	r0, #100	@ 0x64
 80008c4:	f007 f936 	bl	8007b34 <osDelay>

    print_to_console("Default task says Hello!");
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <StartDefaultTask+0x34>)
 80008ca:	f00c fb5d 	bl	800cf88 <print_to_console>
	gpio_set(0, GPIO_TRUE);
 80008ce:	bf00      	nop
 80008d0:	e7ec      	b.n	80008ac <StartDefaultTask+0xc>
 80008d2:	bf00      	nop
 80008d4:	0800df54 	.word	0x0800df54

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 fa8d 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <HAL_MspInit+0x68>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_MspInit+0x68>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_MspInit+0x68>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_MspInit+0x68>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <HAL_MspInit+0x68>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x68>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f000 fe58 	bl	80015fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_MspInit+0x6c>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_MspInit+0x6c>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	40010000 	.word	0x40010000

08000978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a29      	ldr	r2, [pc, #164]	@ (8000a38 <HAL_CAN_MspInit+0xc0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d14b      	bne.n	8000a30 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a2:	61d3      	str	r3, [r2, #28]
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <HAL_CAN_MspInit+0xc4>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0308 	and.w	r3, r3, #8
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <HAL_CAN_MspInit+0xc8>)
 80009de:	f000 fec3 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4812      	ldr	r0, [pc, #72]	@ (8000a40 <HAL_CAN_MspInit+0xc8>)
 80009f8:	f000 feb6 	bl	8001768 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_CAN_MspInit+0xcc>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_CAN_MspInit+0xcc>)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2105      	movs	r1, #5
 8000a24:	2014      	movs	r0, #20
 8000a26:	f000 fde8 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	f000 fe01 	bl	8001632 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40006400 	.word	0x40006400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010c00 	.word	0x40010c00
 8000a44:	40010000 	.word	0x40010000

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a16      	ldr	r2, [pc, #88]	@ (8000abc <HAL_I2C_MspInit+0x74>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d124      	bne.n	8000ab2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <HAL_I2C_MspInit+0x7c>)
 8000a96:	f000 fe67 	bl	8001768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_I2C_MspInit+0x78>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a37      	ldr	r2, [pc, #220]	@ (8000bc0 <HAL_UART_MspInit+0xf8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d132      	bne.n	8000b4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae8:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a35      	ldr	r2, [pc, #212]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4826      	ldr	r0, [pc, #152]	@ (8000bc8 <HAL_UART_MspInit+0x100>)
 8000b2e:	f000 fe1b 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <HAL_UART_MspInit+0x100>)
 8000b48:	f000 fe0e 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4c:	e034      	b.n	8000bb8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1e      	ldr	r2, [pc, #120]	@ (8000bcc <HAL_UART_MspInit+0x104>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d12f      	bne.n	8000bb8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b62:	61d3      	str	r3, [r2, #28]
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a13      	ldr	r2, [pc, #76]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0xfc>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <HAL_UART_MspInit+0x100>)
 8000b9c:	f000 fde4 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_UART_MspInit+0x100>)
 8000bb4:	f000 fdd8 	bl	8001768 <HAL_GPIO_Init>
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000be6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca0 <HAL_InitTick+0xd0>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca0 <HAL_InitTick+0xd0>)
 8000bec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <HAL_InitTick+0xd0>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfe:	f107 020c 	add.w	r2, r7, #12
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fa31 	bl	8004070 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c0e:	f003 fa1b 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8000c12:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c16:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <HAL_InitTick+0xd4>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <HAL_InitTick+0xdc>)
 8000c26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c2e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c4a:	f003 fb15 	bl	8004278 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11b      	bne.n	8000c94 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c5c:	4812      	ldr	r0, [pc, #72]	@ (8000ca8 <HAL_InitTick+0xd8>)
 8000c5e:	f003 fb63 	bl	8004328 <HAL_TIM_Base_Start_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c70:	2019      	movs	r0, #25
 8000c72:	f000 fcde 	bl	8001632 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d808      	bhi.n	8000c8e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2019      	movs	r0, #25
 8000c82:	f000 fcba 	bl	80015fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <HAL_InitTick+0xe0>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e002      	b.n	8000c94 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3730      	adds	r7, #48	@ 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	20000304 	.word	0x20000304
 8000cac:	40012c00 	.word	0x40012c00
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000cee:	f000 f9a2 	bl	8001036 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cf2:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000cf4:	f001 f94c 	bl	8001f90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200001ec 	.word	0x200001ec
 8000d00:	20003e04 	.word	0x20003e04

08000d04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d08:	4802      	ldr	r0, [pc, #8]	@ (8000d14 <TIM1_UP_IRQHandler+0x10>)
 8000d0a:	f003 fb5f 	bl	80043cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000304 	.word	0x20000304

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f00c fc6a 	bl	800d620 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20005000 	.word	0x20005000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	2000034c 	.word	0x2000034c
 8000d80:	200044a0 	.word	0x200044a0

08000d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff fff8 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d96:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d98:	4a0c      	ldr	r2, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dac:	4c09      	ldr	r4, [pc, #36]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f00c fc37 	bl	800d62c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dbe:	f7ff fb45 	bl	800044c <main>
  bx lr
 8000dc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000dcc:	0800e160 	.word	0x0800e160
  ldr r2, =_sbss
 8000dd0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000dd4:	200044a0 	.word	0x200044a0

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x28>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 fbf9 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff feec 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fd86 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a03      	ldr	r2, [pc, #12]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000350 	.word	0x20000350

08000e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000350 	.word	0x20000350

08000e40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0ed      	b.n	800102e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fd8a 	bl	8000978 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e74:	f7ff ffda 	bl	8000e2c <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7a:	e012      	b.n	8000ea2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7c:	f7ff ffd6 	bl	8000e2c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d90b      	bls.n	8000ea2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2205      	movs	r2, #5
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0c5      	b.n	800102e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0e5      	beq.n	8000e7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0202 	bic.w	r2, r2, #2
 8000ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec0:	f7ff ffb4 	bl	8000e2c <HAL_GetTick>
 8000ec4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ec6:	e012      	b.n	8000eee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec8:	f7ff ffb0 	bl	8000e2c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b0a      	cmp	r3, #10
 8000ed4:	d90b      	bls.n	8000eee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e09f      	b.n	800102e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1e5      	bne.n	8000ec8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e1b      	ldrb	r3, [r3, #24]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d108      	bne.n	8000f16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e007      	b.n	8000f26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7e5b      	ldrb	r3, [r3, #25]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7e9b      	ldrb	r3, [r3, #26]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0220 	bic.w	r2, r2, #32
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7edb      	ldrb	r3, [r3, #27]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d108      	bne.n	8000f94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0210 	bic.w	r2, r2, #16
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0210 	orr.w	r2, r2, #16
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7f1b      	ldrb	r3, [r3, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d108      	bne.n	8000fbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0208 	orr.w	r2, r2, #8
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0208 	bic.w	r2, r2, #8
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7f5b      	ldrb	r3, [r3, #29]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0204 	orr.w	r2, r2, #4
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0204 	bic.w	r2, r2, #4
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	ea42 0103 	orr.w	r1, r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b08a      	sub	sp, #40	@ 0x28
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d07c      	beq.n	8001176 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d023      	beq.n	80010ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f983 	bl	80013a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800109e:	e016      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b2:	e00c      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	e002      	b.n	80010ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f986 	bl	80013da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d024      	beq.n	8001122 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f962 	bl	80013b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80010f2:	e016      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
 8001106:	e00c      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
 800111a:	e002      	b.n	8001122 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f965 	bl	80013ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d024      	beq.n	8001176 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f941 	bl	80013c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001146:	e016      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	e00c      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
 800116e:	e002      	b.n	8001176 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f944 	bl	80013fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2210      	movs	r2, #16
 8001198:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2208      	movs	r2, #8
 80011b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f933 	bl	8001422 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f91b 	bl	8001410 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2210      	movs	r2, #16
 80011fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2208      	movs	r2, #8
 8001218:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f913 	bl	8001446 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f8fb 	bl	8001434 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2210      	movs	r2, #16
 8001258:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8fc 	bl	8001458 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2208      	movs	r2, #8
 800127a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f8f4 	bl	800146a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d07b      	beq.n	8001384 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d072      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d043      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d03e      	beq.n	800137c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001304:	2b60      	cmp	r3, #96	@ 0x60
 8001306:	d02b      	beq.n	8001360 <HAL_CAN_IRQHandler+0x32a>
 8001308:	2b60      	cmp	r3, #96	@ 0x60
 800130a:	d82e      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 800130c:	2b50      	cmp	r3, #80	@ 0x50
 800130e:	d022      	beq.n	8001356 <HAL_CAN_IRQHandler+0x320>
 8001310:	2b50      	cmp	r3, #80	@ 0x50
 8001312:	d82a      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 8001314:	2b40      	cmp	r3, #64	@ 0x40
 8001316:	d019      	beq.n	800134c <HAL_CAN_IRQHandler+0x316>
 8001318:	2b40      	cmp	r3, #64	@ 0x40
 800131a:	d826      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 800131c:	2b30      	cmp	r3, #48	@ 0x30
 800131e:	d010      	beq.n	8001342 <HAL_CAN_IRQHandler+0x30c>
 8001320:	2b30      	cmp	r3, #48	@ 0x30
 8001322:	d822      	bhi.n	800136a <HAL_CAN_IRQHandler+0x334>
 8001324:	2b10      	cmp	r3, #16
 8001326:	d002      	beq.n	800132e <HAL_CAN_IRQHandler+0x2f8>
 8001328:	2b20      	cmp	r3, #32
 800132a:	d005      	beq.n	8001338 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800132c:	e01d      	b.n	800136a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001336:	e019      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001340:	e014      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800134a:	e00f      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001354:	e00a      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800135e:	e005      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001368:	e000      	b.n	800136c <HAL_CAN_IRQHandler+0x336>
            break;
 800136a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800137a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2204      	movs	r2, #4
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f870 	bl	800147c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4906      	ldr	r1, [pc, #24]	@ (8001528 <__NVIC_EnableIRQ+0x34>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	@ (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	@ 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	@ 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff4f 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff64 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ffb2 	bl	8001580 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff81 	bl	800152c <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff57 	bl	80014f4 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_DMA_Start_IT+0x20>
 800166a:	2302      	movs	r3, #2
 800166c:	e04b      	b.n	8001706 <HAL_DMA_Start_IT+0xb8>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d13a      	bne.n	80016f8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2202      	movs	r2, #2
 8001686:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f831 	bl	800170e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 020e 	orr.w	r2, r2, #14
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e00f      	b.n	80016e6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0204 	bic.w	r2, r2, #4
 80016d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 020a 	orr.w	r2, r2, #10
 80016e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e005      	b.n	8001704 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001700:	2302      	movs	r3, #2
 8001702:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001704:	7dfb      	ldrb	r3, [r7, #23]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b10      	cmp	r3, #16
 800173a:	d108      	bne.n	800174e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800174c:	e007      	b.n	800175e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	60da      	str	r2, [r3, #12]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e169      	b.n	8001a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800177c:	2201      	movs	r2, #1
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8158 	bne.w	8001a4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a9a      	ldr	r2, [pc, #616]	@ (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017a4:	4a98      	ldr	r2, [pc, #608]	@ (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d875      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017aa:	4a98      	ldr	r2, [pc, #608]	@ (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d058      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017b0:	4a96      	ldr	r2, [pc, #600]	@ (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d86f      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017b6:	4a96      	ldr	r2, [pc, #600]	@ (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d052      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017bc:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d869      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017c2:	4a94      	ldr	r2, [pc, #592]	@ (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04c      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017c8:	4a92      	ldr	r2, [pc, #584]	@ (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d863      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017ce:	4a92      	ldr	r2, [pc, #584]	@ (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d046      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017d4:	4a90      	ldr	r2, [pc, #576]	@ (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d85d      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d82a      	bhi.n	8001834 <HAL_GPIO_Init+0xcc>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d859      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017e2:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <HAL_GPIO_Init+0x80>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001863 	.word	0x08001863
 80017ec:	0800183d 	.word	0x0800183d
 80017f0:	0800184f 	.word	0x0800184f
 80017f4:	08001891 	.word	0x08001891
 80017f8:	08001897 	.word	0x08001897
 80017fc:	08001897 	.word	0x08001897
 8001800:	08001897 	.word	0x08001897
 8001804:	08001897 	.word	0x08001897
 8001808:	08001897 	.word	0x08001897
 800180c:	08001897 	.word	0x08001897
 8001810:	08001897 	.word	0x08001897
 8001814:	08001897 	.word	0x08001897
 8001818:	08001897 	.word	0x08001897
 800181c:	08001897 	.word	0x08001897
 8001820:	08001897 	.word	0x08001897
 8001824:	08001897 	.word	0x08001897
 8001828:	08001897 	.word	0x08001897
 800182c:	08001845 	.word	0x08001845
 8001830:	08001859 	.word	0x08001859
 8001834:	4a79      	ldr	r2, [pc, #484]	@ (8001a1c <HAL_GPIO_Init+0x2b4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183a:	e02c      	b.n	8001896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e029      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	3304      	adds	r3, #4
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e024      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3308      	adds	r3, #8
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e01f      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	330c      	adds	r3, #12
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e01a      	b.n	8001898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186a:	2304      	movs	r3, #4
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e013      	b.n	8001898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	611a      	str	r2, [r3, #16]
          break;
 8001882:	e009      	b.n	8001898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	615a      	str	r2, [r3, #20]
          break;
 800188e:	e003      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x130>
          break;
 8001896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	@ 0xff
 800189c:	d801      	bhi.n	80018a2 <HAL_GPIO_Init+0x13a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	e001      	b.n	80018a6 <HAL_GPIO_Init+0x13e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	@ 0xff
 80018ac:	d802      	bhi.n	80018b4 <HAL_GPIO_Init+0x14c>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x152>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	3b08      	subs	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	210f      	movs	r1, #15
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80b1 	beq.w	8001a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001900:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a40      	ldr	r2, [pc, #256]	@ (8001a28 <HAL_GPIO_Init+0x2c0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_GPIO_Init+0x1ec>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a2c <HAL_GPIO_Init+0x2c4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1e8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3e      	ldr	r2, [pc, #248]	@ (8001a30 <HAL_GPIO_Init+0x2c8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1e4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a34 <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1e0>
 8001944:	2303      	movs	r3, #3
 8001946:	e006      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001948:	2304      	movs	r3, #4
 800194a:	e004      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 800194c:	2302      	movs	r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001954:	2300      	movs	r3, #0
 8001956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	4093      	lsls	r3, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001966:	492f      	ldr	r1, [pc, #188]	@ (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001980:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	492c      	ldr	r1, [pc, #176]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4928      	ldr	r1, [pc, #160]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4922      	ldr	r1, [pc, #136]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	491e      	ldr	r1, [pc, #120]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4918      	ldr	r1, [pc, #96]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4914      	ldr	r1, [pc, #80]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d021      	beq.n	8001a3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e021      	b.n	8001a4a <HAL_GPIO_Init+0x2e2>
 8001a06:	bf00      	nop
 8001a08:	10320000 	.word	0x10320000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10220000 	.word	0x10220000
 8001a14:	10210000 	.word	0x10210000
 8001a18:	10120000 	.word	0x10120000
 8001a1c:	10110000 	.word	0x10110000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40011400 	.word	0x40011400
 8001a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_GPIO_Init+0x304>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4909      	ldr	r1, [pc, #36]	@ (8001a6c <HAL_GPIO_Init+0x304>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae8e 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	372c      	adds	r7, #44	@ 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e001      	b.n	8001a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e12b      	b.n	8001d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe ffa6 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2224      	movs	r2, #36	@ 0x24
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b34:	f002 fa74 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a81      	ldr	r2, [pc, #516]	@ (8001d44 <HAL_I2C_Init+0x274>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d807      	bhi.n	8001b54 <HAL_I2C_Init+0x84>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a80      	ldr	r2, [pc, #512]	@ (8001d48 <HAL_I2C_Init+0x278>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf94      	ite	ls
 8001b4c:	2301      	movls	r3, #1
 8001b4e:	2300      	movhi	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	e006      	b.n	8001b62 <HAL_I2C_Init+0x92>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a7d      	ldr	r2, [pc, #500]	@ (8001d4c <HAL_I2C_Init+0x27c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	bf94      	ite	ls
 8001b5c:	2301      	movls	r3, #1
 8001b5e:	2300      	movhi	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0e7      	b.n	8001d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a78      	ldr	r2, [pc, #480]	@ (8001d50 <HAL_I2C_Init+0x280>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9b      	lsrs	r3, r3, #18
 8001b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	@ (8001d44 <HAL_I2C_Init+0x274>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d802      	bhi.n	8001ba4 <HAL_I2C_Init+0xd4>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	e009      	b.n	8001bb8 <HAL_I2C_Init+0xe8>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	4a69      	ldr	r2, [pc, #420]	@ (8001d54 <HAL_I2C_Init+0x284>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	495c      	ldr	r1, [pc, #368]	@ (8001d44 <HAL_I2C_Init+0x274>)
 8001bd4:	428b      	cmp	r3, r1
 8001bd6:	d819      	bhi.n	8001c0c <HAL_I2C_Init+0x13c>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be6:	1c59      	adds	r1, r3, #1
 8001be8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bec:	400b      	ands	r3, r1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_I2C_Init+0x138>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e59      	subs	r1, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c06:	e051      	b.n	8001cac <HAL_I2C_Init+0x1dc>
 8001c08:	2304      	movs	r3, #4
 8001c0a:	e04f      	b.n	8001cac <HAL_I2C_Init+0x1dc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d111      	bne.n	8001c38 <HAL_I2C_Init+0x168>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e012      	b.n	8001c5e <HAL_I2C_Init+0x18e>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x196>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e022      	b.n	8001cac <HAL_I2C_Init+0x1dc>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <HAL_I2C_Init+0x1bc>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e58      	subs	r0, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	440b      	add	r3, r1
 8001c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c8a:	e00f      	b.n	8001cac <HAL_I2C_Init+0x1dc>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	0099      	lsls	r1, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	6809      	ldr	r1, [r1, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6911      	ldr	r1, [r2, #16]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68d2      	ldr	r2, [r2, #12]
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	000186a0 	.word	0x000186a0
 8001d48:	001e847f 	.word	0x001e847f
 8001d4c:	003d08ff 	.word	0x003d08ff
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	10624dd3 	.word	0x10624dd3

08001d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0e8      	b.n	8001f3c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f00a fe42 	bl	800ca08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2203      	movs	r2, #3
 8001d88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f9cb 	bl	8005132 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da6:	f003 f9a1 	bl	80050ec <USB_CoreInit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0bf      	b.n	8001f3c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 f9cf 	bl	8005166 <USB_SetCurrentMode>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0b0      	b.n	8001f3c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e03e      	b.n	8001e5e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	3311      	adds	r3, #17
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3310      	adds	r3, #16
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3313      	adds	r3, #19
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3324      	adds	r3, #36	@ 0x24
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3bb      	bcc.n	8001de0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e044      	b.n	8001ef8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3b5      	bcc.n	8001e6e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	f003 f937 	bl	800517e <USB_DevInit>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00c      	b.n	8001f3c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fbb6 	bl	80076a6 <USB_DevDisconnect>

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Start+0x16>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e016      	b.n	8001f88 <HAL_PCD_Start+0x44>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 f8cd 	bl	8005106 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f00a ffbd 	bl	800ceee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f005 fb8a 	bl	8007692 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 fb8c 	bl	80076ba <USB_ReadInterrupts>
 8001fa2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb1a 	bl	80025e8 <PCD_EP_ISR_Handler>

    return;
 8001fb4:	e119      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f00a fd90 	bl	800cafe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f905 	bl	80021f0 <HAL_PCD_SetAddress>

    return;
 8001fe6:	e100      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800200a:	e0ee      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800202e:	e0dc      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d027      	beq.n	800208a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0204 	bic.w	r2, r2, #4
 800204c:	b292      	uxth	r2, r2
 800204e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0208 	bic.w	r2, r2, #8
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f00a fd80 	bl	800cb70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002082:	b292      	uxth	r2, r2
 8002084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002088:	e0af      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8083 	beq.w	800219c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	e010      	b.n	80020be <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	7ffb      	ldrb	r3, [r7, #31]
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	b292      	uxth	r2, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	3320      	adds	r3, #32
 80020b2:	443b      	add	r3, r7
 80020b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80020b8:	7ffb      	ldrb	r3, [r7, #31]
 80020ba:	3301      	adds	r3, #1
 80020bc:	77fb      	strb	r3, [r7, #31]
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d9eb      	bls.n	800209c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	b292      	uxth	r2, r2
 80020d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020f4:	bf00      	nop
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020fe:	b29b      	uxth	r3, r3
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f6      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211a:	b292      	uxth	r2, r2
 800211c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
 8002124:	e00f      	b.n	8002146 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	4611      	mov	r1, r2
 800212e:	7ffa      	ldrb	r2, [r7, #31]
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	440a      	add	r2, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	3320      	adds	r3, #32
 8002138:	443b      	add	r3, r7
 800213a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800213e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	3301      	adds	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	2b07      	cmp	r3, #7
 800214a:	d9ec      	bls.n	8002126 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	b292      	uxth	r2, r2
 8002160:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	b292      	uxth	r2, r2
 8002178:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0204 	orr.w	r2, r2, #4
 800218e:	b292      	uxth	r2, r2
 8002190:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f00a fcd1 	bl	800cb3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800219a:	e026      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00f      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021b8:	b292      	uxth	r2, r2
 80021ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f00a fc8f 	bl	800cae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021c4:	e011      	b.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e2:	b292      	uxth	r2, r2
 80021e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021e8:	bf00      	nop
  }
}
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_PCD_SetAddress+0x1a>
 8002206:	2302      	movs	r3, #2
 8002208:	e012      	b.n	8002230 <HAL_PCD_SetAddress+0x40>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f005 fa23 	bl	800766c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	461a      	mov	r2, r3
 8002246:	4603      	mov	r3, r0
 8002248:	70fb      	strb	r3, [r7, #3]
 800224a:	460b      	mov	r3, r1
 800224c:	803b      	strh	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da0e      	bge.n	800227c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0207 	and.w	r2, r3, #7
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	3310      	adds	r3, #16
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	705a      	strb	r2, [r3, #1]
 800227a:	e00e      	b.n	800229a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022a6:	883a      	ldrh	r2, [r7, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	78ba      	ldrb	r2, [r7, #2]
 80022b0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022b2:	78bb      	ldrb	r3, [r7, #2]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d102      	bne.n	80022be <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_PCD_EP_Open+0x94>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e00e      	b.n	80022ea <HAL_PCD_EP_Open+0xb2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 ff6c 	bl	80051b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0e      	bge.n	8002324 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0207 	and.w	r2, r3, #7
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	3310      	adds	r3, #16
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00e      	b.n	8002342 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_PCD_EP_Close+0x6a>
 8002358:	2302      	movs	r3, #2
 800235a:	e00e      	b.n	800237a <HAL_PCD_EP_Close+0x88>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fae4 	bl	8005938 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fc9b 	bl	8005d10 <USB_EPStartXfer>

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	460b      	mov	r3, r1
 8002420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	f003 0207 	and.w	r2, r3, #7
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3310      	adds	r3, #16
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	b2da      	uxtb	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fc4d 	bl	8005d10 <USB_EPStartXfer>

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	7912      	ldrb	r2, [r2, #4]
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e04c      	b.n	8002538 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800249e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da0e      	bge.n	80024c4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0207 	and.w	r2, r3, #7
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3310      	adds	r3, #16
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	e00c      	b.n	80024de <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_PCD_EP_SetStall+0x7e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e01c      	b.n	8002538 <HAL_PCD_EP_SetStall+0xb8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f004 ffb0 	bl	8007472 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	2b00      	cmp	r3, #0
 800251a:	d108      	bne.n	800252e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f005 f8d5 	bl	80076d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	7912      	ldrb	r2, [r2, #4]
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e040      	b.n	80025e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800255e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	da0e      	bge.n	8002584 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 0207 	and.w	r2, r3, #7
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3310      	adds	r3, #16
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	705a      	strb	r2, [r3, #1]
 8002582:	e00e      	b.n	80025a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 0207 	and.w	r2, r3, #7
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_EP_ClrStall+0x82>
 80025be:	2302      	movs	r3, #2
 80025c0:	e00e      	b.n	80025e0 <HAL_PCD_EP_ClrStall+0xa0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 ff9e 	bl	8007512 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b096      	sub	sp, #88	@ 0x58
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025f0:	e3bb      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800260c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 8175 	bne.w	8002900 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d14e      	bne.n	80026c0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800262e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002632:	81fb      	strh	r3, [r7, #14]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	b29b      	uxth	r3, r3
 8002644:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3310      	adds	r3, #16
 800264a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	3302      	adds	r3, #2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002676:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	441a      	add	r2, r3
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002686:	2100      	movs	r1, #0
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f00a fa10 	bl	800caae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7b5b      	ldrb	r3, [r3, #13]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8368 	beq.w	8002d6a <PCD_EP_ISR_Handler+0x782>
 800269a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8363 	bne.w	8002d6a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7b5b      	ldrb	r3, [r3, #13]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	735a      	strb	r2, [r3, #13]
 80026be:	e354      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026c6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d034      	beq.n	8002748 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	3306      	adds	r3, #6
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002708:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002716:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800271c:	b29b      	uxth	r3, r3
 800271e:	f005 f82b 	bl	8007778 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800272e:	4013      	ands	r3, r2
 8002730:	823b      	strh	r3, [r7, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	8a3a      	ldrh	r2, [r7, #16]
 8002738:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800273c:	b292      	uxth	r2, r2
 800273e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f00a f987 	bl	800ca54 <HAL_PCD_SetupStageCallback>
 8002746:	e310      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002748:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800274c:	2b00      	cmp	r3, #0
 800274e:	f280 830c 	bge.w	8002d6a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800275e:	4013      	ands	r3, r2
 8002760:	83fb      	strh	r3, [r7, #30]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	8bfa      	ldrh	r2, [r7, #30]
 8002768:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800276c:	b292      	uxth	r2, r2
 800276e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	3306      	adds	r3, #6
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800279c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d019      	beq.n	80027d8 <PCD_EP_ISR_Handler+0x1f0>
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	6959      	ldr	r1, [r3, #20]
 80027b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f004 ffdb 	bl	8007778 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	441a      	add	r2, r3
 80027cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f00a f950 	bl	800ca78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 82bd 	bne.w	8002d6a <PCD_EP_ISR_Handler+0x782>
 80027f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027f4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80027f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027fc:	f000 82b5 	beq.w	8002d6a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282a:	b29a      	uxth	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b3e      	cmp	r3, #62	@ 0x3e
 8002836:	d91d      	bls.n	8002874 <PCD_EP_ISR_Handler+0x28c>
 8002838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <PCD_EP_ISR_Handler+0x26a>
 800284c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800284e:	3b01      	subs	r3, #1
 8002850:	647b      	str	r3, [r7, #68]	@ 0x44
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29a      	uxth	r2, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285a:	b29b      	uxth	r3, r3
 800285c:	029b      	lsls	r3, r3, #10
 800285e:	b29b      	uxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e026      	b.n	80028c2 <PCD_EP_ISR_Handler+0x2da>
 8002874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <PCD_EP_ISR_Handler+0x2aa>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288a:	b29a      	uxth	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	e017      	b.n	80028c2 <PCD_EP_ISR_Handler+0x2da>
 8002892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <PCD_EP_ISR_Handler+0x2c4>
 80028a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a8:	3301      	adds	r3, #1
 80028aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b29a      	uxth	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d2:	827b      	strh	r3, [r7, #18]
 80028d4:	8a7b      	ldrh	r3, [r7, #18]
 80028d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80028da:	827b      	strh	r3, [r7, #18]
 80028dc:	8a7b      	ldrh	r3, [r7, #18]
 80028de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028e2:	827b      	strh	r3, [r7, #18]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	8a7b      	ldrh	r3, [r7, #18]
 80028ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	8013      	strh	r3, [r2, #0]
 80028fe:	e234      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002914:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002918:	2b00      	cmp	r3, #0
 800291a:	f280 80fc 	bge.w	8002b16 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29a      	uxth	r2, r3
 8002930:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002934:	4013      	ands	r3, r2
 8002936:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800294c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002950:	b292      	uxth	r2, r2
 8002952:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002954:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	7b1b      	ldrb	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d125      	bne.n	80029be <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	3306      	adds	r3, #6
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800299e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8092 	beq.w	8002acc <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	6959      	ldr	r1, [r3, #20]
 80029b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b2:	88da      	ldrh	r2, [r3, #6]
 80029b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029b8:	f004 fede 	bl	8007778 <USB_ReadPMA>
 80029bc:	e086      	b.n	8002acc <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c0:	78db      	ldrb	r3, [r3, #3]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d10a      	bne.n	80029dc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029ca:	461a      	mov	r2, r3
 80029cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9d9 	bl	8002d86 <HAL_PCD_EP_DB_Receive>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80029da:	e077      	b.n	8002acc <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d024      	beq.n	8002a84 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02e      	beq.n	8002acc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a74:	6959      	ldr	r1, [r3, #20]
 8002a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a78:	891a      	ldrh	r2, [r3, #8]
 8002a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a7e:	f004 fe7b 	bl	8007778 <USB_ReadPMA>
 8002a82:	e023      	b.n	8002acc <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	3306      	adds	r3, #6
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002ab0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abe:	6959      	ldr	r1, [r3, #20]
 8002ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac2:	895a      	ldrh	r2, [r3, #10]
 8002ac4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ac8:	f004 fe56 	bl	8007778 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ad4:	441a      	add	r2, r3
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ae2:	441a      	add	r2, r3
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <PCD_EP_ISR_Handler+0x514>
 8002af0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d206      	bcs.n	8002b0a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f009 ffb8 	bl	800ca78 <HAL_PCD_DataOutStageCallback>
 8002b08:	e005      	b.n	8002b16 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 f8fd 	bl	8005d10 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8123 	beq.w	8002d6a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b24:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	3310      	adds	r3, #16
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b76:	78db      	ldrb	r3, [r3, #3]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 80a2 	bne.w	8002cc2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b86:	7b1b      	ldrb	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8093 	beq.w	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d046      	beq.n	8002c28 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d126      	bne.n	8002bf0 <PCD_EP_ISR_Handler+0x608>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	4413      	add	r3, r2
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	011a      	lsls	r2, r3, #4
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	e061      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d15d      	bne.n	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	4413      	add	r3, r2
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	011a      	lsls	r2, r3, #4
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	4413      	add	r3, r2
 8002c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	2200      	movs	r2, #0
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e045      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d126      	bne.n	8002c84 <PCD_EP_ISR_Handler+0x69c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	4413      	add	r3, r2
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	011a      	lsls	r2, r3, #4
 8002c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	e017      	b.n	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d113      	bne.n	8002cb4 <PCD_EP_ISR_Handler+0x6cc>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9a:	4413      	add	r3, r2
 8002c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	011a      	lsls	r2, r3, #4
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f009 fef7 	bl	800caae <HAL_PCD_DataInStageCallback>
 8002cc0:	e053      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d146      	bne.n	8002d5c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d907      	bls.n	8002d16 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	e002      	b.n	8002d1c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f009 febf 	bl	800caae <HAL_PCD_DataInStageCallback>
 8002d30:	e01b      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d3a:	441a      	add	r2, r3
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d48:	441a      	add	r2, r3
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 ffdb 	bl	8005d10 <USB_EPStartXfer>
 8002d5a:	e006      	b.n	8002d6a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d60:	461a      	mov	r2, r3
 8002d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f91b 	bl	8002fa0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f6ff ac3b 	blt.w	80025f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3758      	adds	r7, #88	@ 0x58
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b088      	sub	sp, #32
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d07e      	beq.n	8002e9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	3302      	adds	r3, #2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	8b7b      	ldrh	r3, [r7, #26]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d306      	bcc.n	8002de0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	8b7b      	ldrh	r3, [r7, #26]
 8002dd8:	1ad2      	subs	r2, r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	619a      	str	r2, [r3, #24]
 8002dde:	e002      	b.n	8002de6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d123      	bne.n	8002e36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e08:	833b      	strh	r3, [r7, #24]
 8002e0a:	8b3b      	ldrh	r3, [r7, #24]
 8002e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e10:	833b      	strh	r3, [r7, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8b3b      	ldrh	r3, [r7, #24]
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01f      	beq.n	8002e80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5a:	82fb      	strh	r3, [r7, #22]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	8afb      	ldrh	r3, [r7, #22]
 8002e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6959      	ldr	r1, [r3, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	891a      	ldrh	r2, [r3, #8]
 8002e94:	8b7b      	ldrh	r3, [r7, #26]
 8002e96:	f004 fc6f 	bl	8007778 <USB_ReadPMA>
 8002e9a:	e07c      	b.n	8002f96 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3306      	adds	r3, #6
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	8b7b      	ldrh	r3, [r7, #26]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d306      	bcc.n	8002ede <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	e002      	b.n	8002ee4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d123      	bne.n	8002f34 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f06:	83fb      	strh	r3, [r7, #30]
 8002f08:	8bfb      	ldrh	r3, [r7, #30]
 8002f0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f0e:	83fb      	strh	r3, [r7, #30]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	8bfb      	ldrh	r3, [r7, #30]
 8002f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11f      	bne.n	8002f7e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f58:	83bb      	strh	r3, [r7, #28]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	8bbb      	ldrh	r3, [r7, #28]
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f7e:	8b7b      	ldrh	r3, [r7, #26]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6959      	ldr	r1, [r3, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	895a      	ldrh	r2, [r3, #10]
 8002f90:	8b7b      	ldrh	r3, [r7, #26]
 8002f92:	f004 fbf1 	bl	8007778 <USB_ReadPMA>
    }
  }

  return count;
 8002f96:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0a4      	sub	sp, #144	@ 0x90
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 81dd 	beq.w	8003374 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d907      	bls.n	8003002 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ffa:	1ad2      	subs	r2, r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	e002      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 80b9 	bne.w	8003184 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d126      	bne.n	8003068 <HAL_PCD_EP_DB_Transmit+0xc8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	4413      	add	r3, r2
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	011a      	lsls	r2, r3, #4
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	b29a      	uxth	r2, r3
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800305c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003060:	b29a      	uxth	r2, r3
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	801a      	strh	r2, [r3, #0]
 8003066:	e01a      	b.n	800309e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d116      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	637b      	str	r3, [r7, #52]	@ 0x34
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003084:	4413      	add	r3, r2
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003090:	4413      	add	r3, r2
 8003092:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003096:	633b      	str	r3, [r7, #48]	@ 0x30
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d126      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x15a>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	011a      	lsls	r2, r3, #4
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030de:	b29a      	uxth	r2, r3
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	801a      	strh	r2, [r3, #0]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e017      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x18a>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d113      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	4413      	add	r3, r2
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	4413      	add	r3, r2
 800311e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2200      	movs	r2, #0
 8003128:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f009 fcbc 	bl	800caae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 82fc 	beq.w	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315c:	82fb      	strh	r3, [r7, #22]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	8afb      	ldrh	r3, [r7, #22]
 800316e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800317a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]
 8003182:	e2da      	b.n	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d021      	beq.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80031be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f040 82ae 	bne.w	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031e6:	441a      	add	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031f4:	441a      	add	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6a1a      	ldr	r2, [r3, #32]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	429a      	cmp	r2, r3
 8003204:	d30b      	bcc.n	800321e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	621a      	str	r2, [r3, #32]
 800321c:	e017      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003226:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003236:	e00a      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d165      	bne.n	8003322 <HAL_PCD_EP_DB_Transmit+0x382>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003264:	b29b      	uxth	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326a:	4413      	add	r3, r2
 800326c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	011a      	lsls	r2, r3, #4
 8003274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003276:	4413      	add	r3, r2
 8003278:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800327c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003288:	b29a      	uxth	r2, r3
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003292:	2b3e      	cmp	r3, #62	@ 0x3e
 8003294:	d91d      	bls.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x332>
 8003296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x310>
 80032aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ac:	3b01      	subs	r3, #1
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	b29b      	uxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e044      	b.n	800335c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x350>
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ec:	801a      	strh	r2, [r3, #0]
 80032ee:	e035      	b.n	800335c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003306:	3301      	adds	r3, #1
 8003308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29a      	uxth	r2, r3
 8003310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003312:	b29b      	uxth	r3, r3
 8003314:	029b      	lsls	r3, r3, #10
 8003316:	b29b      	uxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b29a      	uxth	r2, r3
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	e01c      	b.n	800335c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	785b      	ldrb	r3, [r3, #1]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d118      	bne.n	800335c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800333e:	4413      	add	r3, r2
 8003340:	647b      	str	r3, [r7, #68]	@ 0x44
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	011a      	lsls	r2, r3, #4
 8003348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334a:	4413      	add	r3, r2
 800334c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003350:	643b      	str	r3, [r7, #64]	@ 0x40
 8003352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003356:	b29a      	uxth	r2, r3
 8003358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6959      	ldr	r1, [r3, #20]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	891a      	ldrh	r2, [r3, #8]
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800336c:	b29b      	uxth	r3, r3
 800336e:	f004 f9be 	bl	80076ee <USB_WritePMA>
 8003372:	e1e2      	b.n	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	3306      	adds	r3, #6
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d307      	bcc.n	80033bc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033b4:	1ad2      	subs	r2, r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	e002      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80c0 	bne.w	800354c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d126      	bne.n	8003422 <HAL_PCD_EP_DB_Transmit+0x482>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033e8:	4413      	add	r3, r2
 80033ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	011a      	lsls	r2, r3, #4
 80033f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003406:	b29a      	uxth	r2, r3
 8003408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341a:	b29a      	uxth	r2, r3
 800341c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	e01a      	b.n	8003458 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d116      	bne.n	8003458 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800343e:	4413      	add	r3, r2
 8003440:	667b      	str	r3, [r7, #100]	@ 0x64
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	011a      	lsls	r2, r3, #4
 8003448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800344a:	4413      	add	r3, r2
 800344c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003450:	663b      	str	r3, [r7, #96]	@ 0x60
 8003452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003454:	2200      	movs	r2, #0
 8003456:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	677b      	str	r3, [r7, #116]	@ 0x74
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d12b      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x51e>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800347a:	4413      	add	r3, r2
 800347c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	011a      	lsls	r2, r3, #4
 8003484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003486:	4413      	add	r3, r2
 8003488:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800348c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003490:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349c:	b29a      	uxth	r2, r3
 800349e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e017      	b.n	80034ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d113      	bne.n	80034ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d4:	4413      	add	r3, r2
 80034d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	011a      	lsls	r2, r3, #4
 80034de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e0:	4413      	add	r3, r2
 80034e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f009 fada 	bl	800caae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 811a 	bne.w	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003520:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800353a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800353e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003546:	b29b      	uxth	r3, r3
 8003548:	8013      	strh	r3, [r2, #0]
 800354a:	e0f6      	b.n	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d121      	bne.n	800359a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800356c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003570:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800358e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 80ca 	bne.w	800373a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035ae:	441a      	add	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035bc:	441a      	add	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d30b      	bcc.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035de:	1ad2      	subs	r2, r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	e017      	b.n	8003616 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80035ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035fe:	e00a      	b.n	8003616 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2200      	movs	r2, #0
 800360c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	657b      	str	r3, [r7, #84]	@ 0x54
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d165      	bne.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003632:	b29b      	uxth	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003638:	4413      	add	r3, r2
 800363a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	011a      	lsls	r2, r3, #4
 8003642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003644:	4413      	add	r3, r2
 8003646:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800364a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800364c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003656:	b29a      	uxth	r2, r3
 8003658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003660:	2b3e      	cmp	r3, #62	@ 0x3e
 8003662:	d91d      	bls.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x700>
 8003664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800366c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367a:	3b01      	subs	r3, #1
 800367c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800367e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003686:	b29b      	uxth	r3, r3
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	b29b      	uxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003698:	b29a      	uxth	r2, r3
 800369a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e041      	b.n	8003724 <HAL_PCD_EP_DB_Transmit+0x784>
 80036a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x71e>
 80036a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e032      	b.n	8003724 <HAL_PCD_EP_DB_Transmit+0x784>
 80036be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x738>
 80036d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036d4:	3301      	adds	r3, #1
 80036d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4313      	orrs	r3, r2
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	e019      	b.n	8003724 <HAL_PCD_EP_DB_Transmit+0x784>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d115      	bne.n	8003724 <HAL_PCD_EP_DB_Transmit+0x784>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003706:	4413      	add	r3, r2
 8003708:	657b      	str	r3, [r7, #84]	@ 0x54
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011a      	lsls	r2, r3, #4
 8003710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003712:	4413      	add	r3, r2
 8003714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003718:	653b      	str	r3, [r7, #80]	@ 0x50
 800371a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371e:	b29a      	uxth	r2, r3
 8003720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003722:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6959      	ldr	r1, [r3, #20]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	895a      	ldrh	r2, [r3, #10]
 8003730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003734:	b29b      	uxth	r3, r3
 8003736:	f003 ffda 	bl	80076ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003754:	82bb      	strh	r3, [r7, #20]
 8003756:	8abb      	ldrh	r3, [r7, #20]
 8003758:	f083 0310 	eor.w	r3, r3, #16
 800375c:	82bb      	strh	r3, [r7, #20]
 800375e:	8abb      	ldrh	r3, [r7, #20]
 8003760:	f083 0320 	eor.w	r3, r3, #32
 8003764:	82bb      	strh	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	8abb      	ldrh	r3, [r7, #20]
 8003776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800377a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800377e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003786:	b29b      	uxth	r3, r3
 8003788:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3790      	adds	r7, #144	@ 0x90
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	4613      	mov	r3, r2
 80037a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	f003 0207 	and.w	r2, r3, #7
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	3310      	adds	r3, #16
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e009      	b.n	80037de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ca:	897a      	ldrh	r2, [r7, #10]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	80da      	strh	r2, [r3, #6]
 80037f2:	e00b      	b.n	800380c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2201      	movs	r2, #1
 80037f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b29a      	uxth	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e272      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8087 	beq.w	8003946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003838:	4b92      	ldr	r3, [pc, #584]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b04      	cmp	r3, #4
 8003842:	d00c      	beq.n	800385e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003844:	4b8f      	ldr	r3, [pc, #572]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d112      	bne.n	8003876 <HAL_RCC_OscConfig+0x5e>
 8003850:	4b8c      	ldr	r3, [pc, #560]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385c:	d10b      	bne.n	8003876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385e:	4b89      	ldr	r3, [pc, #548]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d06c      	beq.n	8003944 <HAL_RCC_OscConfig+0x12c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d168      	bne.n	8003944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e24c      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x76>
 8003880:	4b80      	ldr	r3, [pc, #512]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7f      	ldr	r2, [pc, #508]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e02e      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x98>
 8003896:	4b7b      	ldr	r3, [pc, #492]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b78      	ldr	r3, [pc, #480]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a77      	ldr	r2, [pc, #476]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e01d      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0xbc>
 80038ba:	4b72      	ldr	r3, [pc, #456]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a71      	ldr	r2, [pc, #452]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e00b      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 80038d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b68      	ldr	r3, [pc, #416]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a67      	ldr	r2, [pc, #412]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd fa9a 	bl	8000e2c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fd fa96 	bl	8000e2c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	@ 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e200      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0xe4>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd fa86 	bl	8000e2c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd fa82 	bl	8000e2c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1ec      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	4b53      	ldr	r3, [pc, #332]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x10c>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d063      	beq.n	8003a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003952:	4b4c      	ldr	r3, [pc, #304]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800395e:	4b49      	ldr	r3, [pc, #292]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b08      	cmp	r3, #8
 8003968:	d11c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x18c>
 800396a:	4b46      	ldr	r3, [pc, #280]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	4b43      	ldr	r3, [pc, #268]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_RCC_OscConfig+0x176>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d001      	beq.n	800398e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e1c0      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4939      	ldr	r1, [pc, #228]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	e03a      	b.n	8003a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ac:	4b36      	ldr	r3, [pc, #216]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fd fa3b 	bl	8000e2c <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd fa37 	bl	8000e2c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1a1      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4927      	ldr	r1, [pc, #156]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
 80039ec:	e015      	b.n	8003a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ee:	4b26      	ldr	r3, [pc, #152]	@ (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fa1a 	bl	8000e2c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fc:	f7fd fa16 	bl	8000e2c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e180      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03a      	beq.n	8003a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d019      	beq.n	8003a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2e:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fd f9fa 	bl	8000e2c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fd f9f6 	bl	8000e2c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e160      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f000 fb38 	bl	80040d0 <RCC_Delay>
 8003a60:	e01c      	b.n	8003a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a62:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7fd f9e0 	bl	8000e2c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6e:	e00f      	b.n	8003a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a70:	f7fd f9dc 	bl	8000e2c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d908      	bls.n	8003a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e146      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	42420000 	.word	0x42420000
 8003a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b92      	ldr	r3, [pc, #584]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e9      	bne.n	8003a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a6 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b8b      	ldr	r3, [pc, #556]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b88      	ldr	r3, [pc, #544]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	4a87      	ldr	r2, [pc, #540]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	61d3      	str	r3, [r2, #28]
 8003ac6:	4b85      	ldr	r3, [pc, #532]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b82      	ldr	r3, [pc, #520]	@ (8003ce0 <HAL_RCC_OscConfig+0x4c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce0 <HAL_RCC_OscConfig+0x4c8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ce0 <HAL_RCC_OscConfig+0x4c8>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fd f99d 	bl	8000e2c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fd f999 	bl	8000e2c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	@ 0x64
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e103      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b75      	ldr	r3, [pc, #468]	@ (8003ce0 <HAL_RCC_OscConfig+0x4c8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x312>
 8003b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a6e      	ldr	r2, [pc, #440]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	e02d      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x334>
 8003b32:	4b6a      	ldr	r3, [pc, #424]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a69      	ldr	r2, [pc, #420]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6213      	str	r3, [r2, #32]
 8003b3e:	4b67      	ldr	r3, [pc, #412]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4a66      	ldr	r2, [pc, #408]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	e01c      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x356>
 8003b54:	4b61      	ldr	r3, [pc, #388]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4a60      	ldr	r2, [pc, #384]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	4b5e      	ldr	r3, [pc, #376]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6213      	str	r3, [r2, #32]
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a5a      	ldr	r2, [pc, #360]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	4b58      	ldr	r3, [pc, #352]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a57      	ldr	r2, [pc, #348]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd f94d 	bl	8000e2c <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd f949 	bl	8000e2c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0b1      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCC_OscConfig+0x37e>
 8003bb8:	e014      	b.n	8003be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd f937 	bl	8000e2c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd f933 	bl	8000e2c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e09b      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ee      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4a3b      	ldr	r2, [pc, #236]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8087 	beq.w	8003d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c00:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d061      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d146      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <HAL_RCC_OscConfig+0x4cc>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd f907 	bl	8000e2c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd f903 	bl	8000e2c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e06d      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c34:	4b29      	ldr	r3, [pc, #164]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c48:	d108      	bne.n	8003c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4921      	ldr	r1, [pc, #132]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a19      	ldr	r1, [r3, #32]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	491b      	ldr	r1, [pc, #108]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <HAL_RCC_OscConfig+0x4cc>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f8d7 	bl	8000e2c <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd f8d3 	bl	8000e2c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e03d      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c94:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x46a>
 8003ca0:	e035      	b.n	8003d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <HAL_RCC_OscConfig+0x4cc>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f8c0 	bl	8000e2c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f8bc 	bl	8000e2c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e026      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x498>
 8003cce:	e01e      	b.n	8003d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e019      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_OscConfig+0x500>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0d0      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b6a      	ldr	r3, [pc, #424]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4965      	ldr	r1, [pc, #404]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a52      	ldr	r2, [pc, #328]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d040      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e073      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4936      	ldr	r1, [pc, #216]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fd f80e 	bl	8000e2c <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fd f80a 	bl	8000e2c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e053      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 020c 	and.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1eb      	bne.n	8003e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d210      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	4922      	ldr	r1, [pc, #136]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f859 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_RCC_ClockConfig+0x1d0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fe80 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800e070 	.word	0x0800e070
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	20000004 	.word	0x20000004

08003ef0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003efc:	f107 0318 	add.w	r3, r7, #24
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <HAL_RCC_MCOConfig+0x68>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_RCC_MCOConfig+0x68>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6193      	str	r3, [r2, #24]
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCC_MCOConfig+0x68>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003f34:	f107 0318 	add.w	r3, r7, #24
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4808      	ldr	r0, [pc, #32]	@ (8003f5c <HAL_RCC_MCOConfig+0x6c>)
 8003f3c:	f7fd fc14 	bl	8001768 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_MCOConfig+0x68>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_MCOConfig+0x68>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
}
 8003f50:	bf00      	nop
 8003f52:	3728      	adds	r7, #40	@ 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40010800 	.word	0x40010800

08003f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d002      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x30>
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x36>
 8003f8e:	e027      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f90:	4b19      	ldr	r3, [pc, #100]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	e027      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	0c9b      	lsrs	r3, r3, #18
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	4a17      	ldr	r2, [pc, #92]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fae:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	0c5b      	lsrs	r3, r3, #17
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	4a11      	ldr	r2, [pc, #68]	@ (8004000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc2:	fb03 f202 	mul.w	r2, r3, r2
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e004      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	613b      	str	r3, [r7, #16]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003fe2:	613b      	str	r3, [r7, #16]
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	693b      	ldr	r3, [r7, #16]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	00b71b00 	.word	0x00b71b00
 8003ffc:	0800e088 	.word	0x0800e088
 8004000:	0800e098 	.word	0x0800e098
 8004004:	003d0900 	.word	0x003d0900
 8004008:	007a1200 	.word	0x007a1200

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b02      	ldr	r3, [pc, #8]	@ (800401c <HAL_RCC_GetHCLKFreq+0x10>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	20000000 	.word	0x20000000

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004024:	f7ff fff2 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	@ (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	0800e080 	.word	0x0800e080

08004048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800404c:	f7ff ffde 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0adb      	lsrs	r3, r3, #11
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	@ (800406c <HAL_RCC_GetPCLK2Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	0800e080 	.word	0x0800e080

08004070 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	220f      	movs	r2, #15
 800407e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <HAL_RCC_GetClockConfig+0x58>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0203 	and.w	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800408c:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <HAL_RCC_GetClockConfig+0x58>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_GetClockConfig+0x58>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <HAL_RCC_GetClockConfig+0x58>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	08db      	lsrs	r3, r3, #3
 80040aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040b2:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_RCC_GetClockConfig+0x5c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0207 	and.w	r2, r3, #7
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40022000 	.word	0x40022000

080040d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <RCC_Delay+0x34>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <RCC_Delay+0x38>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0a5b      	lsrs	r3, r3, #9
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040ec:	bf00      	nop
  }
  while (Delay --);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	60fa      	str	r2, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f9      	bne.n	80040ec <RCC_Delay+0x1c>
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000000 	.word	0x20000000
 8004108:	10624dd3 	.word	0x10624dd3

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d07d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b4c      	ldr	r3, [pc, #304]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a4b      	ldr	r2, [pc, #300]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b46      	ldr	r3, [pc, #280]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d118      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004160:	4b43      	ldr	r3, [pc, #268]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416c:	f7fc fe5e 	bl	8000e2c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fc fe5a 	bl	8000e2c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e06d      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b3a      	ldr	r3, [pc, #232]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004192:	4b36      	ldr	r3, [pc, #216]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d027      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b0:	4b2e      	ldr	r3, [pc, #184]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c6:	4a29      	ldr	r2, [pc, #164]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d014      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d6:	f7fc fe29 	bl	8000e2c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fc fe25 	bl	8000e2c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e036      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b1d      	ldr	r3, [pc, #116]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004200:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4917      	ldr	r1, [pc, #92]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	4313      	orrs	r3, r2
 8004210:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004218:	4b14      	ldr	r3, [pc, #80]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a13      	ldr	r2, [pc, #76]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004222:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	490b      	ldr	r1, [pc, #44]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424e:	4b07      	ldr	r3, [pc, #28]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4904      	ldr	r1, [pc, #16]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
 8004274:	42420440 	.word	0x42420440

08004278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f839 	bl	8004316 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 f99c 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e03a      	b.n	80043b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a18      	ldr	r2, [pc, #96]	@ (80043c0 <HAL_TIM_Base_Start_IT+0x98>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x58>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436a:	d009      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x58>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x58>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	@ (80043c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d111      	bne.n	80043a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b06      	cmp	r3, #6
 8004390:	d010      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	e007      	b.n	80043b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800

080043cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0202 	mvn.w	r2, #2
 8004400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8d1 	bl	80045be <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8c4 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8d3 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0204 	mvn.w	r2, #4
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8ab 	bl	80045be <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f89e 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ad 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01b      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0208 	mvn.w	r2, #8
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2204      	movs	r2, #4
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f885 	bl	80045be <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f878 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f887 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d020      	beq.n	8004514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0210 	mvn.w	r2, #16
 80044e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2208      	movs	r2, #8
 80044ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f85f 	bl	80045be <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f852 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f861 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0201 	mvn.w	r2, #1
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc f9d0 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8c3 	bl	80046e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00c      	beq.n	8004580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f831 	bl	80045e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0220 	mvn.w	r2, #32
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f896 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2f      	ldr	r2, [pc, #188]	@ (80046c4 <TIM_Base_SetConfig+0xd0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0x30>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0x30>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a2c      	ldr	r2, [pc, #176]	@ (80046c8 <TIM_Base_SetConfig+0xd4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0x30>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2b      	ldr	r2, [pc, #172]	@ (80046cc <TIM_Base_SetConfig+0xd8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a22      	ldr	r2, [pc, #136]	@ (80046c4 <TIM_Base_SetConfig+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x62>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x62>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <TIM_Base_SetConfig+0xd4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <TIM_Base_SetConfig+0xd8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0d      	ldr	r2, [pc, #52]	@ (80046c4 <TIM_Base_SetConfig+0xd0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]
  }
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e042      	b.n	800478c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc f9d4 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	@ 0x24
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fc49 	bl	8004fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800474c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800475c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800476c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	@ 0x28
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d175      	bne.n	80048a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Transmit+0x2c>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e06e      	b.n	80048a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2221      	movs	r2, #33	@ 0x21
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d2:	f7fc fb2b 	bl	8000e2c <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Transmit+0x6c>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004808:	e02e      	b.n	8004868 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fa5d 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e03a      	b.n	80048a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	3302      	adds	r3, #2
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e007      	b.n	800485a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	3301      	adds	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cb      	bne.n	800480a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2140      	movs	r1, #64	@ 0x40
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa29 	bl	8004cd4 <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e006      	b.n	80048a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	@ 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d156      	bne.n	8004974 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Transmit_DMA+0x26>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e04f      	b.n	8004976 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2221      	movs	r2, #33	@ 0x21
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <HAL_UART_Transmit_DMA+0xd4>)
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004902:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <HAL_UART_Transmit_DMA+0xd8>)
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_UART_Transmit_DMA+0xdc>)
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	2200      	movs	r2, #0
 8004914:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	461a      	mov	r2, r3
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	f7fc fe8e 	bl	800164e <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800493a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	617b      	str	r3, [r7, #20]
   return(result);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495c:	627a      	str	r2, [r7, #36]	@ 0x24
 800495e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6a39      	ldr	r1, [r7, #32]
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	61fb      	str	r3, [r7, #28]
   return(result);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3730      	adds	r7, #48	@ 0x30
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	08004a23 	.word	0x08004a23
 8004984:	08004abd 	.word	0x08004abd
 8004988:	08004c41 	.word	0x08004c41

0800498c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d112      	bne.n	80049cc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Receive_DMA+0x26>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00b      	b.n	80049ce <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	461a      	mov	r2, r3
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f9e0 	bl	8004d88 <UART_Start_Receive_DMA>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b090      	sub	sp, #64	@ 0x40
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d137      	bne.n	8004aae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a40:	2200      	movs	r2, #0
 8004a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	623b      	str	r3, [r7, #32]
   return(result);
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a64:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	69b9      	ldr	r1, [r7, #24]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aac:	e002      	b.n	8004ab4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004aae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ab0:	f008 fade 	bl	800d070 <HAL_UART_TxCpltCallback>
}
 8004ab4:	bf00      	nop
 8004ab6:	3740      	adds	r7, #64	@ 0x40
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff83 	bl	80049d6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b09c      	sub	sp, #112	@ 0x70
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d172      	bne.n	8004bda <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af6:	2200      	movs	r2, #0
 8004af8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e5      	bne.n	8004afa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	623b      	str	r3, [r7, #32]
   return(result);
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3314      	adds	r3, #20
 8004b80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b82:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d119      	bne.n	8004bda <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0310 	bic.w	r3, r3, #16
 8004bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	69b9      	ldr	r1, [r7, #24]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e5      	bne.n	8004ba6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bdc:	2200      	movs	r2, #0
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bec:	4619      	mov	r1, r3
 8004bee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bf0:	f7ff ff0c 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf4:	e002      	b.n	8004bfc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004bf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bf8:	f008 fa20 	bl	800d03c <HAL_UART_RxCpltCallback>
}
 8004bfc:	bf00      	nop
 8004bfe:	3770      	adds	r7, #112	@ 0x70
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d108      	bne.n	8004c32 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff feee 	bl	8004a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c30:	e002      	b.n	8004c38 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fed8 	bl	80049e8 <HAL_UART_RxHalfCpltCallback>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b21      	cmp	r3, #33	@ 0x21
 8004c72:	d108      	bne.n	8004c86 <UART_DMAError+0x46>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	f000 f91b 	bl	8004ebc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b22      	cmp	r3, #34	@ 0x22
 8004ca6:	d108      	bne.n	8004cba <UART_DMAError+0x7a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f000 f928 	bl	8004f0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	f043 0210 	orr.w	r2, r3, #16
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7ff fe97 	bl	80049fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce4:	e03b      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d037      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7fc f89d 	bl	8000e2c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e03a      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d023      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b80      	cmp	r3, #128	@ 0x80
 8004d1a:	d020      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d01d      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d116      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8df 	bl	8004f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e00f      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0b4      	beq.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b098      	sub	sp, #96	@ 0x60
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2222      	movs	r2, #34	@ 0x22
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb0 <UART_Start_Receive_DMA+0x128>)
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb4 <UART_Start_Receive_DMA+0x12c>)
 8004dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004eb8 <UART_Start_Receive_DMA+0x130>)
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	2200      	movs	r2, #0
 8004dce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	f7fc fc31 	bl	800164e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e2a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3314      	adds	r3, #20
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e5e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e5      	bne.n	8004e3e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3314      	adds	r3, #20
 8004e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	617b      	str	r3, [r7, #20]
   return(result);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e92:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3760      	adds	r7, #96	@ 0x60
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08004ad9 	.word	0x08004ad9
 8004eb4:	08004c05 	.word	0x08004c05
 8004eb8:	08004c41 	.word	0x08004c41

08004ebc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	61ba      	str	r2, [r7, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f00:	bf00      	nop
 8004f02:	3724      	adds	r7, #36	@ 0x24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b095      	sub	sp, #84	@ 0x54
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f32:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d119      	bne.n	8004fb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f023 0310 	bic.w	r3, r3, #16
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fa2:	61ba      	str	r2, [r7, #24]
 8004fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e5      	bne.n	8004f82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fc4:	bf00      	nop
 8004fc6:	3754      	adds	r7, #84	@ 0x54
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
	...

08004fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800500a:	f023 030c 	bic.w	r3, r3, #12
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	430b      	orrs	r3, r1
 8005016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2c      	ldr	r2, [pc, #176]	@ (80050e4 <UART_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d103      	bne.n	8005040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005038:	f7ff f806 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	e002      	b.n	8005046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fe ffee 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8005044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	4a22      	ldr	r2, [pc, #136]	@ (80050e8 <UART_SetConfig+0x118>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	0119      	lsls	r1, r3, #4
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009a      	lsls	r2, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	fbb2 f2f3 	udiv	r2, r2, r3
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <UART_SetConfig+0x118>)
 800507e:	fba3 0302 	umull	r0, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2064      	movs	r0, #100	@ 0x64
 8005086:	fb00 f303 	mul.w	r3, r0, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	3332      	adds	r3, #50	@ 0x32
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <UART_SetConfig+0x118>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800509c:	4419      	add	r1, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <UART_SetConfig+0x118>)
 80050b6:	fba3 0302 	umull	r0, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2064      	movs	r0, #100	@ 0x64
 80050be:	fb00 f303 	mul.w	r3, r0, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	3332      	adds	r3, #50	@ 0x32
 80050c8:	4a07      	ldr	r2, [pc, #28]	@ (80050e8 <UART_SetConfig+0x118>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f003 020f 	and.w	r2, r3, #15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	440a      	add	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40013800 	.word	0x40013800
 80050e8:	51eb851f 	.word	0x51eb851f

080050ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	4638      	mov	r0, r7
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005116:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800511a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800513a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800513e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	b29b      	uxth	r3, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	b29b      	uxth	r3, r3
 8005150:	4013      	ands	r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	4638      	mov	r0, r7
 8005188:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b09d      	sub	sp, #116	@ 0x74
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d81f      	bhi.n	800522a <USB_ActivateEndpoint+0x72>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <USB_ActivateEndpoint+0x38>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005201 	.word	0x08005201
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005233 	.word	0x08005233
 80051fc:	0800520f 	.word	0x0800520f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005200:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005208:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800520c:	e012      	b.n	8005234 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800520e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005212:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005216:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800521a:	e00b      	b.n	8005234 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800521c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005220:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005224:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005228:	e004      	b.n	8005234 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005230:	e000      	b.n	8005234 <USB_ActivateEndpoint+0x7c>
      break;
 8005232:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526c:	b29b      	uxth	r3, r3
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800528a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005296:	b29b      	uxth	r3, r3
 8005298:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	7b1b      	ldrb	r3, [r3, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 8178 	bne.w	8005594 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8084 	beq.w	80053b6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4413      	add	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	011a      	lsls	r2, r3, #4
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	88db      	ldrh	r3, [r3, #6]
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	827b      	strh	r3, [r7, #18]
 80052f0:	8a7b      	ldrh	r3, [r7, #18]
 80052f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01b      	beq.n	8005332 <USB_ActivateEndpoint+0x17a>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005310:	823b      	strh	r3, [r7, #16]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	8a3b      	ldrh	r3, [r7, #16]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d020      	beq.n	800537c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005350:	81bb      	strh	r3, [r7, #12]
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	f083 0320 	eor.w	r3, r3, #32
 8005358:	81bb      	strh	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	89bb      	ldrh	r3, [r7, #12]
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]
 800537a:	e2d5      	b.n	8005928 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005392:	81fb      	strh	r3, [r7, #14]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	89fb      	ldrh	r3, [r7, #14]
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
 80053b4:	e2b8      	b.n	8005928 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	4413      	add	r3, r2
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	011a      	lsls	r2, r3, #4
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	88db      	ldrh	r3, [r3, #6]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	4413      	add	r3, r2
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	011a      	lsls	r2, r3, #4
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	4413      	add	r3, r2
 8005408:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005418:	b29a      	uxth	r2, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b3e      	cmp	r3, #62	@ 0x3e
 8005424:	d91d      	bls.n	8005462 <USB_ActivateEndpoint+0x2aa>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <USB_ActivateEndpoint+0x288>
 800543a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800543c:	3b01      	subs	r3, #1
 800543e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29a      	uxth	r2, r3
 8005446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005448:	b29b      	uxth	r3, r3
 800544a:	029b      	lsls	r3, r3, #10
 800544c:	b29b      	uxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e026      	b.n	80054b0 <USB_ActivateEndpoint+0x2f8>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <USB_ActivateEndpoint+0x2c8>
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005478:	b29a      	uxth	r2, r3
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e017      	b.n	80054b0 <USB_ActivateEndpoint+0x2f8>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <USB_ActivateEndpoint+0x2e2>
 8005494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005496:	3301      	adds	r3, #1
 8005498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <USB_ActivateEndpoint+0x348>
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	843b      	strh	r3, [r7, #32]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	8c3b      	ldrh	r3, [r7, #32]
 80054ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d124      	bne.n	8005552 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800551a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551e:	83bb      	strh	r3, [r7, #28]
 8005520:	8bbb      	ldrh	r3, [r7, #28]
 8005522:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005526:	83bb      	strh	r3, [r7, #28]
 8005528:	8bbb      	ldrh	r3, [r7, #28]
 800552a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800552e:	83bb      	strh	r3, [r7, #28]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8bbb      	ldrh	r3, [r7, #28]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
 8005550:	e1ea      	b.n	8005928 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005568:	83fb      	strh	r3, [r7, #30]
 800556a:	8bfb      	ldrh	r3, [r7, #30]
 800556c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005570:	83fb      	strh	r3, [r7, #30]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	8bfb      	ldrh	r3, [r7, #30]
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800558a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]
 8005592:	e1c9      	b.n	8005928 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	78db      	ldrb	r3, [r3, #3]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11e      	bne.n	80055da <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80055d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]
 80055d8:	e01d      	b.n	8005616 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80055ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800560a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005612:	b29b      	uxth	r3, r3
 8005614:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005626:	4413      	add	r3, r2
 8005628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005632:	4413      	add	r3, r2
 8005634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005638:	65bb      	str	r3, [r7, #88]	@ 0x58
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	891b      	ldrh	r3, [r3, #8]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	b29b      	uxth	r3, r3
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	657b      	str	r3, [r7, #84]	@ 0x54
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565a:	4413      	add	r3, r2
 800565c:	657b      	str	r3, [r7, #84]	@ 0x54
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005666:	4413      	add	r3, r2
 8005668:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800566c:	653b      	str	r3, [r7, #80]	@ 0x50
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	895b      	ldrh	r3, [r3, #10]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800567c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 8093 	bne.w	80057ae <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005698:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800569c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <USB_ActivateEndpoint+0x524>
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80056ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01b      	beq.n	800572c <USB_ActivateEndpoint+0x574>
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005724:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800573e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005742:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005744:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005746:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800574a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800574c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800574e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005752:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	441a      	add	r2, r3
 800575e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
 80057ac:	e0bc      	b.n	8005928 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01d      	beq.n	8005806 <USB_ActivateEndpoint+0x64e>
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005816:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800581a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01d      	beq.n	800585e <USB_ActivateEndpoint+0x6a6>
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	78db      	ldrb	r3, [r3, #3]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d024      	beq.n	80058b0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800587c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005884:	f083 0320 	eor.w	r3, r3, #32
 8005888:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
 80058ae:	e01d      	b.n	80058ec <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005902:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005928:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800592c:	4618      	mov	r0, r3
 800592e:	3774      	adds	r7, #116	@ 0x74
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop

08005938 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b08d      	sub	sp, #52	@ 0x34
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	7b1b      	ldrb	r3, [r3, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 808e 	bne.w	8005a68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d044      	beq.n	80059de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	81bb      	strh	r3, [r7, #12]
 8005962:	89bb      	ldrh	r3, [r7, #12]
 8005964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <USB_DeactivateEndpoint+0x6c>
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005982:	817b      	strh	r3, [r7, #10]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ba:	813b      	strh	r3, [r7, #8]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	893b      	ldrh	r3, [r7, #8]
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]
 80059dc:	e192      	b.n	8005d04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	827b      	strh	r3, [r7, #18]
 80059ec:	8a7b      	ldrh	r3, [r7, #18]
 80059ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01b      	beq.n	8005a2e <USB_DeactivateEndpoint+0xf6>
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0c:	823b      	strh	r3, [r7, #16]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	441a      	add	r2, r3
 8005a18:	8a3b      	ldrh	r3, [r7, #16]
 8005a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	81fb      	strh	r3, [r7, #14]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]
 8005a66:	e14d      	b.n	8005d04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 80a5 	bne.w	8005bbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	843b      	strh	r3, [r7, #32]
 8005a80:	8c3b      	ldrh	r3, [r7, #32]
 8005a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01b      	beq.n	8005ac2 <USB_DeactivateEndpoint+0x18a>
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa0:	83fb      	strh	r3, [r7, #30]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	83bb      	strh	r3, [r7, #28]
 8005ad0:	8bbb      	ldrh	r3, [r7, #28]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01b      	beq.n	8005b12 <USB_DeactivateEndpoint+0x1da>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af0:	837b      	strh	r3, [r7, #26]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	8b7b      	ldrh	r3, [r7, #26]
 8005afe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b28:	833b      	strh	r3, [r7, #24]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8b3b      	ldrh	r3, [r7, #24]
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b60:	82fb      	strh	r3, [r7, #22]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	8afb      	ldrh	r3, [r7, #22]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b98:	82bb      	strh	r3, [r7, #20]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	8abb      	ldrh	r3, [r7, #20]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e0a3      	b.n	8005d04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005bca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01b      	beq.n	8005c0c <USB_DeactivateEndpoint+0x2d4>
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <USB_DeactivateEndpoint+0x324>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c72:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005caa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	441a      	add	r2, r3
 8005cee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3734      	adds	r7, #52	@ 0x34
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b0c2      	sub	sp, #264	@ 0x108
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1e:	6018      	str	r0, [r3, #0]
 8005d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d28:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f040 86b7 	bne.w	8006aaa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d908      	bls.n	8005d6a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d68:	e007      	b.n	8005d7a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	7b1b      	ldrb	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d13a      	bne.n	8005e00 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6959      	ldr	r1, [r3, #20]
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	88da      	ldrh	r2, [r3, #6]
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005db0:	6800      	ldr	r0, [r0, #0]
 8005db2:	f001 fc9c 	bl	80076ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	011a      	lsls	r2, r3, #4
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	f000 be1f 	b.w	8006a3e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	f040 8462 	bne.w	80066d6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6a1a      	ldr	r2, [r3, #32]
 8005e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f240 83df 	bls.w	80065ee <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e80:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 81c7 	beq.w	8006260 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d177      	bne.n	8005fde <USB_EPStartXfer+0x2ce>
 8005eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	4413      	add	r3, r2
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	011a      	lsls	r2, r3, #4
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f40:	d921      	bls.n	8005f86 <USB_EPStartXfer+0x276>
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <USB_EPStartXfer+0x252>
 8005f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	029b      	lsls	r3, r3, #10
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e050      	b.n	8006028 <USB_EPStartXfer+0x318>
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <USB_EPStartXfer+0x294>
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	e041      	b.n	8006028 <USB_EPStartXfer+0x318>
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <USB_EPStartXfer+0x2b4>
 8005fba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	029b      	lsls	r3, r3, #10
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e024      	b.n	8006028 <USB_EPStartXfer+0x318>
 8005fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d11c      	bne.n	8006028 <USB_EPStartXfer+0x318>
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	4413      	add	r3, r2
 8006004:	633b      	str	r3, [r7, #48]	@ 0x30
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	4413      	add	r3, r2
 8006018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	b29a      	uxth	r2, r3
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	895b      	ldrh	r3, [r3, #10]
 8006034:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6959      	ldr	r1, [r3, #20]
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800604e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006052:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f001 fb49 	bl	80076ee <USB_WritePMA>
            ep->xfer_buff += len;
 800605c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	441a      	add	r2, r3
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800607a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90f      	bls.n	80060b6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	e00e      	b.n	80060d4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d177      	bne.n	80061d4 <USB_EPStartXfer+0x4c4>
 80060e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	4413      	add	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	011a      	lsls	r2, r3, #4
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	4413      	add	r3, r2
 800611a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612a:	b29a      	uxth	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	2b3e      	cmp	r3, #62	@ 0x3e
 8006136:	d921      	bls.n	800617c <USB_EPStartXfer+0x46c>
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <USB_EPStartXfer+0x448>
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006152:	3b01      	subs	r3, #1
 8006154:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29a      	uxth	r2, r3
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006162:	b29b      	uxth	r3, r3
 8006164:	029b      	lsls	r3, r3, #10
 8006166:	b29b      	uxth	r3, r3
 8006168:	4313      	orrs	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006174:	b29a      	uxth	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e056      	b.n	800622a <USB_EPStartXfer+0x51a>
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <USB_EPStartXfer+0x48a>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e047      	b.n	800622a <USB_EPStartXfer+0x51a>
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <USB_EPStartXfer+0x4aa>
 80061b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b4:	3301      	adds	r3, #1
 80061b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	029b      	lsls	r3, r3, #10
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	4313      	orrs	r3, r2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e02a      	b.n	800622a <USB_EPStartXfer+0x51a>
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d122      	bne.n	800622a <USB_EPStartXfer+0x51a>
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	4413      	add	r3, r2
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	011a      	lsls	r2, r3, #4
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	4413      	add	r3, r2
 800621a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006224:	b29a      	uxth	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	891b      	ldrh	r3, [r3, #8]
 8006236:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6959      	ldr	r1, [r3, #20]
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624a:	b29b      	uxth	r3, r3
 800624c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006250:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006254:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006258:	6800      	ldr	r0, [r0, #0]
 800625a:	f001 fa48 	bl	80076ee <USB_WritePMA>
 800625e:	e3ee      	b.n	8006a3e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d177      	bne.n	8006360 <USB_EPStartXfer+0x650>
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006290:	4413      	add	r3, r2
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	011a      	lsls	r2, r3, #4
 80062a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a4:	4413      	add	r3, r2
 80062a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062c2:	d921      	bls.n	8006308 <USB_EPStartXfer+0x5f8>
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <USB_EPStartXfer+0x5d4>
 80062da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062de:	3b01      	subs	r3, #1
 80062e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	029b      	lsls	r3, r3, #10
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	4313      	orrs	r3, r2
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e056      	b.n	80063b6 <USB_EPStartXfer+0x6a6>
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <USB_EPStartXfer+0x616>
 8006310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631e:	b29a      	uxth	r2, r3
 8006320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	e047      	b.n	80063b6 <USB_EPStartXfer+0x6a6>
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <USB_EPStartXfer+0x636>
 800633c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006340:	3301      	adds	r3, #1
 8006342:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006350:	b29b      	uxth	r3, r3
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	b29b      	uxth	r3, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	b29a      	uxth	r2, r3
 800635a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e02a      	b.n	80063b6 <USB_EPStartXfer+0x6a6>
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d122      	bne.n	80063b6 <USB_EPStartXfer+0x6a6>
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	653b      	str	r3, [r7, #80]	@ 0x50
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006390:	4413      	add	r3, r2
 8006392:	653b      	str	r3, [r7, #80]	@ 0x50
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	891b      	ldrh	r3, [r3, #8]
 80063c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6959      	ldr	r1, [r3, #20]
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063e4:	6800      	ldr	r0, [r0, #0]
 80063e6:	f001 f982 	bl	80076ee <USB_WritePMA>
            ep->xfer_buff += len;
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	441a      	add	r2, r3
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1a      	ldr	r2, [r3, #32]
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d90f      	bls.n	8006444 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	621a      	str	r2, [r3, #32]
 8006442:	e00e      	b.n	8006462 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	643b      	str	r3, [r7, #64]	@ 0x40
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d177      	bne.n	800656e <USB_EPStartXfer+0x85e>
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006498:	b29b      	uxth	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	4413      	add	r3, r2
 80064a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	011a      	lsls	r2, r3, #4
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	4413      	add	r3, r2
 80064b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80064d0:	d921      	bls.n	8006516 <USB_EPStartXfer+0x806>
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <USB_EPStartXfer+0x7e2>
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ec:	3b01      	subs	r3, #1
 80064ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	b29b      	uxth	r3, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	b29b      	uxth	r3, r3
 8006506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650e:	b29a      	uxth	r2, r3
 8006510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	e050      	b.n	80065b8 <USB_EPStartXfer+0x8a8>
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <USB_EPStartXfer+0x824>
 800651e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652c:	b29a      	uxth	r2, r3
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e041      	b.n	80065b8 <USB_EPStartXfer+0x8a8>
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <USB_EPStartXfer+0x844>
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654e:	3301      	adds	r3, #1
 8006550:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655e:	b29b      	uxth	r3, r3
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	b29b      	uxth	r3, r3
 8006564:	4313      	orrs	r3, r2
 8006566:	b29a      	uxth	r2, r3
 8006568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e024      	b.n	80065b8 <USB_EPStartXfer+0x8a8>
 800656e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11c      	bne.n	80065b8 <USB_EPStartXfer+0x8a8>
 800657e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006592:	4413      	add	r3, r2
 8006594:	643b      	str	r3, [r7, #64]	@ 0x40
 8006596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	011a      	lsls	r2, r3, #4
 80065a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a6:	4413      	add	r3, r2
 80065a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	895b      	ldrh	r3, [r3, #10]
 80065c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6959      	ldr	r1, [r3, #20]
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065e6:	6800      	ldr	r0, [r0, #0]
 80065e8:	f001 f881 	bl	80076ee <USB_WritePMA>
 80065ec:	e227      	b.n	8006a3e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800667a:	4413      	add	r3, r2
 800667c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	011a      	lsls	r2, r3, #4
 800668c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668e:	4413      	add	r3, r2
 8006690:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006694:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669a:	b29a      	uxth	r2, r3
 800669c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	891b      	ldrh	r3, [r3, #8]
 80066ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6959      	ldr	r1, [r3, #20]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066ce:	6800      	ldr	r0, [r0, #0]
 80066d0:	f001 f80d 	bl	80076ee <USB_WritePMA>
 80066d4:	e1b3      	b.n	8006a3e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80c6 	beq.w	80068a8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	673b      	str	r3, [r7, #112]	@ 0x70
 8006728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d177      	bne.n	8006828 <USB_EPStartXfer+0xb18>
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006758:	4413      	add	r3, r2
 800675a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800676c:	4413      	add	r3, r2
 800676e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006772:	667b      	str	r3, [r7, #100]	@ 0x64
 8006774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677e:	b29a      	uxth	r2, r3
 8006780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	2b3e      	cmp	r3, #62	@ 0x3e
 800678a:	d921      	bls.n	80067d0 <USB_EPStartXfer+0xac0>
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <USB_EPStartXfer+0xa9c>
 80067a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4313      	orrs	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e050      	b.n	8006872 <USB_EPStartXfer+0xb62>
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <USB_EPStartXfer+0xade>
 80067d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e041      	b.n	8006872 <USB_EPStartXfer+0xb62>
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <USB_EPStartXfer+0xafe>
 8006804:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006808:	3301      	adds	r3, #1
 800680a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800680e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29b      	uxth	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e024      	b.n	8006872 <USB_EPStartXfer+0xb62>
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d11c      	bne.n	8006872 <USB_EPStartXfer+0xb62>
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800684c:	4413      	add	r3, r2
 800684e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	011a      	lsls	r2, r3, #4
 800685e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006860:	4413      	add	r3, r2
 8006862:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	b29a      	uxth	r2, r3
 800686e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006870:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	895b      	ldrh	r3, [r3, #10]
 800687e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6959      	ldr	r1, [r3, #20]
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	b29b      	uxth	r3, r3
 8006894:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006898:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800689c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068a0:	6800      	ldr	r0, [r0, #0]
 80068a2:	f000 ff24 	bl	80076ee <USB_WritePMA>
 80068a6:	e0ca      	b.n	8006a3e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d177      	bne.n	80069a8 <USB_EPStartXfer+0xc98>
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068d8:	4413      	add	r3, r2
 80068da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	011a      	lsls	r2, r3, #4
 80068ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fe:	b29a      	uxth	r2, r3
 8006900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	2b3e      	cmp	r3, #62	@ 0x3e
 800690a:	d921      	bls.n	8006950 <USB_EPStartXfer+0xc40>
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <USB_EPStartXfer+0xc1c>
 8006922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006926:	3b01      	subs	r3, #1
 8006928:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800692c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29a      	uxth	r2, r3
 8006932:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006936:	b29b      	uxth	r3, r3
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	b29b      	uxth	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006948:	b29a      	uxth	r2, r3
 800694a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e05c      	b.n	8006a0a <USB_EPStartXfer+0xcfa>
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <USB_EPStartXfer+0xc5e>
 8006958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006966:	b29a      	uxth	r2, r3
 8006968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e04d      	b.n	8006a0a <USB_EPStartXfer+0xcfa>
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <USB_EPStartXfer+0xc7e>
 8006984:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006988:	3301      	adds	r3, #1
 800698a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800698e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006998:	b29b      	uxth	r3, r3
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	b29b      	uxth	r3, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e030      	b.n	8006a0a <USB_EPStartXfer+0xcfa>
 80069a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d128      	bne.n	8006a0a <USB_EPStartXfer+0xcfa>
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069dc:	4413      	add	r3, r2
 80069de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	011a      	lsls	r2, r3, #4
 80069f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	891b      	ldrh	r3, [r3, #8]
 8006a16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a38:	6800      	ldr	r0, [r0, #0]
 8006a3a:	f000 fe58 	bl	80076ee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a64:	817b      	strh	r3, [r7, #10]
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	f083 0310 	eor.w	r3, r3, #16
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	897b      	ldrh	r3, [r7, #10]
 8006a70:	f083 0320 	eor.w	r3, r3, #32
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	897b      	ldrh	r3, [r7, #10]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
 8006aa6:	f000 bcde 	b.w	8007466 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	7b1b      	ldrb	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 80bb 	bne.w	8006c32 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d917      	bls.n	8006b08 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699a      	ldr	r2, [r3, #24]
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	619a      	str	r2, [r3, #24]
 8006b06:	e00e      	b.n	8006b26 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	011a      	lsls	r2, r3, #4
 8006b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b62:	4413      	add	r3, r2
 8006b64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b86:	d924      	bls.n	8006bd2 <USB_EPStartXfer+0xec2>
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <USB_EPStartXfer+0xe98>
 8006b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	f000 bc10 	b.w	80073f2 <USB_EPStartXfer+0x16e2>
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10c      	bne.n	8006bf4 <USB_EPStartXfer+0xee4>
 8006bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e3fe      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <USB_EPStartXfer+0xf04>
 8006c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e3df      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	78db      	ldrb	r3, [r3, #3]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	f040 8218 	bne.w	8007074 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f040 809d 	bne.w	8006d90 <USB_EPStartXfer+0x1080>
 8006c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	011a      	lsls	r2, r3, #4
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c92:	4413      	add	r3, r2
 8006c94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cbe:	d92b      	bls.n	8006d18 <USB_EPStartXfer+0x1008>
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USB_EPStartXfer+0xfe0>
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cea:	3b01      	subs	r3, #1
 8006cec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	e070      	b.n	8006dfa <USB_EPStartXfer+0x10ea>
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10c      	bne.n	8006d42 <USB_EPStartXfer+0x1032>
 8006d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e05b      	b.n	8006dfa <USB_EPStartXfer+0x10ea>
 8006d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <USB_EPStartXfer+0x1062>
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	029b      	lsls	r3, r3, #10
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e034      	b.n	8006dfa <USB_EPStartXfer+0x10ea>
 8006d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d12c      	bne.n	8006dfa <USB_EPStartXfer+0x10ea>
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	011a      	lsls	r2, r3, #4
 8006dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ddc:	4413      	add	r3, r2
 8006dde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 809d 	bne.w	8006f54 <USB_EPStartXfer+0x1244>
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e3e:	4413      	add	r3, r2
 8006e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	011a      	lsls	r2, r3, #4
 8006e52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e56:	4413      	add	r3, r2
 8006e58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e82:	d92b      	bls.n	8006edc <USB_EPStartXfer+0x11cc>
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <USB_EPStartXfer+0x11a4>
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e069      	b.n	8006fb0 <USB_EPStartXfer+0x12a0>
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10c      	bne.n	8006f06 <USB_EPStartXfer+0x11f6>
 8006eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e054      	b.n	8006fb0 <USB_EPStartXfer+0x12a0>
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <USB_EPStartXfer+0x1226>
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f30:	3301      	adds	r3, #1
 8006f32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e02d      	b.n	8006fb0 <USB_EPStartXfer+0x12a0>
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d125      	bne.n	8006fb0 <USB_EPStartXfer+0x12a0>
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8218 	beq.w	80073f2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fe2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <USB_EPStartXfer+0x12ea>
 8006fee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ffa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 81f5 	bne.w	80073f2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007008:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800700c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 81ee 	bne.w	80073f2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800705e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800706a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800706e:	b29b      	uxth	r3, r3
 8007070:	8013      	strh	r3, [r2, #0]
 8007072:	e1be      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 81b4 	bne.w	80073ee <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d917      	bls.n	80070d2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	619a      	str	r2, [r3, #24]
 80070d0:	e00e      	b.n	80070f0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 8085 	bne.w	800720c <USB_EPStartXfer+0x14fc>
 8007102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007126:	4413      	add	r3, r2
 8007128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	011a      	lsls	r2, r3, #4
 800713a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800713e:	4413      	add	r3, r2
 8007140:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	2b3e      	cmp	r3, #62	@ 0x3e
 8007162:	d923      	bls.n	80071ac <USB_EPStartXfer+0x149c>
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <USB_EPStartXfer+0x1474>
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800717e:	3b01      	subs	r3, #1
 8007180:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007190:	b29b      	uxth	r3, r3
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	b29b      	uxth	r3, r3
 8007196:	4313      	orrs	r3, r2
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e060      	b.n	800726e <USB_EPStartXfer+0x155e>
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10c      	bne.n	80071ce <USB_EPStartXfer+0x14be>
 80071b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e04f      	b.n	800726e <USB_EPStartXfer+0x155e>
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0x14de>
 80071e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e030      	b.n	800726e <USB_EPStartXfer+0x155e>
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d128      	bne.n	800726e <USB_EPStartXfer+0x155e>
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007238:	b29b      	uxth	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007240:	4413      	add	r3, r2
 8007242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	011a      	lsls	r2, r3, #4
 8007254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007258:	4413      	add	r3, r2
 800725a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800725e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 8085 	bne.w	8007398 <USB_EPStartXfer+0x1688>
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072b2:	4413      	add	r3, r2
 80072b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	011a      	lsls	r2, r3, #4
 80072c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ee:	d923      	bls.n	8007338 <USB_EPStartXfer+0x1628>
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <USB_EPStartXfer+0x1600>
 8007306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800730a:	3b01      	subs	r3, #1
 800730c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29a      	uxth	r2, r3
 8007318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800731c:	b29b      	uxth	r3, r3
 800731e:	029b      	lsls	r3, r3, #10
 8007320:	b29b      	uxth	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	e05c      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
 8007338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <USB_EPStartXfer+0x164a>
 8007340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e04b      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0x166a>
 8007370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800737a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007386:	b29b      	uxth	r3, r3
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	b29b      	uxth	r3, r3
 800738c:	4313      	orrs	r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	e02c      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d124      	bne.n	80073f2 <USB_EPStartXfer+0x16e2>
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073be:	4413      	add	r3, r2
 80073c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	011a      	lsls	r2, r3, #4
 80073d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073d6:	4413      	add	r3, r2
 80073d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	e001      	b.n	80073f2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e03a      	b.n	8007468 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007418:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800741c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007420:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007424:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007428:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800742c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007430:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800745a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d020      	beq.n	80074c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800749a:	81bb      	strh	r3, [r7, #12]
 800749c:	89bb      	ldrh	r3, [r7, #12]
 800749e:	f083 0310 	eor.w	r3, r3, #16
 80074a2:	81bb      	strh	r3, [r7, #12]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	89bb      	ldrh	r3, [r7, #12]
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
 80074c4:	e01f      	b.n	8007506 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074dc:	81fb      	strh	r3, [r7, #14]
 80074de:	89fb      	ldrh	r3, [r7, #14]
 80074e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074e4:	81fb      	strh	r3, [r7, #14]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	441a      	add	r2, r3
 80074f0:	89fb      	ldrh	r3, [r7, #14]
 80074f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007502:	b29b      	uxth	r3, r3
 8007504:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007512:	b480      	push	{r7}
 8007514:	b087      	sub	sp, #28
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	7b1b      	ldrb	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 809d 	bne.w	8007660 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d04c      	beq.n	80075c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	823b      	strh	r3, [r7, #16]
 800753c:	8a3b      	ldrh	r3, [r7, #16]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01b      	beq.n	800757e <USB_EPClearStall+0x6c>
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	81fb      	strh	r3, [r7, #14]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	89fb      	ldrh	r3, [r7, #14]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007576:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d06c      	beq.n	8007660 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800759c:	81bb      	strh	r3, [r7, #12]
 800759e:	89bb      	ldrh	r3, [r7, #12]
 80075a0:	f083 0320 	eor.w	r3, r3, #32
 80075a4:	81bb      	strh	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	89bb      	ldrh	r3, [r7, #12]
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]
 80075c6:	e04b      	b.n	8007660 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	82fb      	strh	r3, [r7, #22]
 80075d6:	8afb      	ldrh	r3, [r7, #22]
 80075d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01b      	beq.n	8007618 <USB_EPClearStall+0x106>
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f6:	82bb      	strh	r3, [r7, #20]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	441a      	add	r2, r3
 8007602:	8abb      	ldrh	r3, [r7, #20]
 8007604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800760c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007614:	b29b      	uxth	r3, r3
 8007616:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800762a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762e:	827b      	strh	r3, [r7, #18]
 8007630:	8a7b      	ldrh	r3, [r7, #18]
 8007632:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007636:	827b      	strh	r3, [r7, #18]
 8007638:	8a7b      	ldrh	r3, [r7, #18]
 800763a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800763e:	827b      	strh	r3, [r7, #18]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	8a7b      	ldrh	r3, [r7, #18]
 800764c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765c:	b29b      	uxth	r3, r3
 800765e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2280      	movs	r2, #128	@ 0x80
 8007682:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr

08007692 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr

080076d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b08b      	sub	sp, #44	@ 0x2c
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	4611      	mov	r1, r2
 80076fa:	461a      	mov	r2, r3
 80076fc:	460b      	mov	r3, r1
 80076fe:	80fb      	strh	r3, [r7, #6]
 8007700:	4613      	mov	r3, r2
 8007702:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007704:	88bb      	ldrh	r3, [r7, #4]
 8007706:	3301      	adds	r3, #1
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	005a      	lsls	r2, r3, #1
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007720:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
 8007726:	e01e      	b.n	8007766 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	3301      	adds	r3, #1
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	b21a      	sxth	r2, r3
 8007738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800773c:	4313      	orrs	r3, r2
 800773e:	b21b      	sxth	r3, r3
 8007740:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	8a7a      	ldrh	r2, [r7, #18]
 8007746:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	3302      	adds	r3, #2
 800774c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	3302      	adds	r3, #2
 8007752:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3301      	adds	r3, #1
 8007758:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	3301      	adds	r3, #1
 800775e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	3b01      	subs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1dd      	bne.n	8007728 <USB_WritePMA+0x3a>
  }
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	372c      	adds	r7, #44	@ 0x2c
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007778:	b480      	push	{r7}
 800777a:	b08b      	sub	sp, #44	@ 0x2c
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	460b      	mov	r3, r1
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	4613      	mov	r3, r2
 800778c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800778e:	88bb      	ldrh	r3, [r7, #4]
 8007790:	085b      	lsrs	r3, r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	005a      	lsls	r2, r3, #1
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b0:	e01b      	b.n	80077ea <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	3302      	adds	r3, #2
 80077be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	3301      	adds	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	3302      	adds	r3, #2
 80077e2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	3b01      	subs	r3, #1
 80077e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e0      	bne.n	80077b2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077f0:	88bb      	ldrh	r3, [r7, #4]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	701a      	strb	r2, [r3, #0]
  }
}
 800780c:	bf00      	nop
 800780e:	372c      	adds	r7, #44	@ 0x2c
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr
	...

08007818 <__NVIC_SetPriority>:
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007828:	2b00      	cmp	r3, #0
 800782a:	db0a      	blt.n	8007842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	b2da      	uxtb	r2, r3
 8007830:	490c      	ldr	r1, [pc, #48]	@ (8007864 <__NVIC_SetPriority+0x4c>)
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	0112      	lsls	r2, r2, #4
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	440b      	add	r3, r1
 800783c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007840:	e00a      	b.n	8007858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	b2da      	uxtb	r2, r3
 8007846:	4908      	ldr	r1, [pc, #32]	@ (8007868 <__NVIC_SetPriority+0x50>)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	3b04      	subs	r3, #4
 8007850:	0112      	lsls	r2, r2, #4
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	440b      	add	r3, r1
 8007856:	761a      	strb	r2, [r3, #24]
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	e000e100 	.word	0xe000e100
 8007868:	e000ed00 	.word	0xe000ed00

0800786c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007870:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <SysTick_Handler+0x1c>)
 8007872:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007874:	f002 ff4e 	bl	800a714 <xTaskGetSchedulerState>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800787e:	f001 f9db 	bl	8008c38 <xPortSysTickHandler>
  }
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	e000e010 	.word	0xe000e010

0800788c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007890:	2100      	movs	r1, #0
 8007892:	f06f 0004 	mvn.w	r0, #4
 8007896:	f7ff ffbf 	bl	8007818 <__NVIC_SetPriority>
#endif
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a6:	f3ef 8305 	mrs	r3, IPSR
 80078aa:	603b      	str	r3, [r7, #0]
  return(result);
 80078ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078b2:	f06f 0305 	mvn.w	r3, #5
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	e00c      	b.n	80078d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078ba:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <osKernelInitialize+0x40>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078c2:	4b07      	ldr	r3, [pc, #28]	@ (80078e0 <osKernelInitialize+0x40>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e002      	b.n	80078d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078ce:	f04f 33ff 	mov.w	r3, #4294967295
 80078d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078d4:	687b      	ldr	r3, [r7, #4]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr
 80078e0:	20000354 	.word	0x20000354

080078e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ea:	f3ef 8305 	mrs	r3, IPSR
 80078ee:	603b      	str	r3, [r7, #0]
  return(result);
 80078f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	e010      	b.n	8007920 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078fe:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <osKernelStart+0x48>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d109      	bne.n	800791a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007906:	f7ff ffc1 	bl	800788c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800790a:	4b08      	ldr	r3, [pc, #32]	@ (800792c <osKernelStart+0x48>)
 800790c:	2202      	movs	r2, #2
 800790e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007910:	f002 f9fe 	bl	8009d10 <vTaskStartScheduler>
      stat = osOK;
 8007914:	2300      	movs	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	e002      	b.n	8007920 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007920:	687b      	ldr	r3, [r7, #4]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000354 	.word	0x20000354

08007930 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8007936:	4b06      	ldr	r3, [pc, #24]	@ (8007950 <OS_Tick_GetCount+0x20>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <OS_Tick_GetCount+0x20>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	1ad3      	subs	r3, r2, r3
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e010 	.word	0xe000e010

08007954 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8007958:	4b04      	ldr	r3, [pc, #16]	@ (800796c <OS_Tick_GetOverflow+0x18>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	f003 0301 	and.w	r3, r3, #1
}
 8007962:	4618      	mov	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	e000e010 	.word	0xe000e010

08007970 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8007974:	4b03      	ldr	r3, [pc, #12]	@ (8007984 <OS_Tick_GetInterval+0x14>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	3301      	adds	r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e010 	.word	0xe000e010

08007988 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798e:	f3ef 8310 	mrs	r3, PRIMASK
 8007992:	60bb      	str	r3, [r7, #8]
  return(result);
 8007994:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800799a:	f3ef 8311 	mrs	r3, BASEPRI
 800799e:	607b      	str	r3, [r7, #4]
  return(result);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <osKernelGetSysTimerCount+0x22>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <osKernelGetSysTimerCount+0x24>
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80079ae:	b672      	cpsid	i
}
 80079b0:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 80079b2:	f002 fac9 	bl	8009f48 <xTaskGetTickCount>
 80079b6:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 80079b8:	f7ff ffba 	bl	8007930 <OS_Tick_GetCount>
 80079bc:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 80079be:	f7ff ffc9 	bl	8007954 <OS_Tick_GetOverflow>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 80079c8:	f7ff ffb2 	bl	8007930 <OS_Tick_GetCount>
 80079cc:	6138      	str	r0, [r7, #16]
    ticks++;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 80079d4:	f7ff ffcc 	bl	8007970 <OS_Tick_GetInterval>
 80079d8:	4602      	mov	r2, r0
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	fb02 f303 	mul.w	r3, r2, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 80079ec:	b662      	cpsie	i
}
 80079ee:	bf00      	nop
    __enable_irq();
  }

  return (val);
 80079f0:	693b      	ldr	r3, [r7, #16]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <osKernelGetSysTimerFreq>:

uint32_t osKernelGetSysTimerFreq (void) {
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 8007a00:	4b02      	ldr	r3, [pc, #8]	@ (8007a0c <osKernelGetSysTimerFreq+0x10>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr
 8007a0c:	20000000 	.word	0x20000000

08007a10 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08e      	sub	sp, #56	@ 0x38
 8007a14:	af04      	add	r7, sp, #16
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a20:	f3ef 8305 	mrs	r3, IPSR
 8007a24:	617b      	str	r3, [r7, #20]
  return(result);
 8007a26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d17e      	bne.n	8007b2a <osThreadNew+0x11a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d07b      	beq.n	8007b2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007a36:	2318      	movs	r3, #24
 8007a38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d045      	beq.n	8007ad6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <osThreadNew+0x48>
        name = attr->name;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <osThreadNew+0x6e>
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	2b38      	cmp	r3, #56	@ 0x38
 8007a70:	d805      	bhi.n	8007a7e <osThreadNew+0x6e>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <osThreadNew+0x72>
        return (NULL);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e054      	b.n	8007b2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	089b      	lsrs	r3, r3, #2
 8007a90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <osThreadNew+0xa8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007aa0:	d90a      	bls.n	8007ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d006      	beq.n	8007ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <osThreadNew+0xa8>
        mem = 1;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	e010      	b.n	8007ada <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10c      	bne.n	8007ada <osThreadNew+0xca>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d108      	bne.n	8007ada <osThreadNew+0xca>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <osThreadNew+0xca>
          mem = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e001      	b.n	8007ada <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d110      	bne.n	8007b02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ae8:	9202      	str	r2, [sp, #8]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 ff16 	bl	8009928 <xTaskCreateStatic>
 8007afc:	4603      	mov	r3, r0
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	e013      	b.n	8007b2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	f107 0310 	add.w	r3, r7, #16
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 ff64 	bl	80099e8 <xTaskCreate>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d001      	beq.n	8007b2a <osThreadNew+0x11a>
            hTask = NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b2a:	693b      	ldr	r3, [r7, #16]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3728      	adds	r7, #40	@ 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3c:	f3ef 8305 	mrs	r3, IPSR
 8007b40:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <osDelay+0x1c>
    stat = osErrorISR;
 8007b48:	f06f 0305 	mvn.w	r3, #5
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	e007      	b.n	8007b60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f002 f8a2 	bl	8009ca4 <vTaskDelay>
    }
  }

  return (stat);
 8007b60:	68fb      	ldr	r3, [r7, #12]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b76:	f3ef 8305 	mrs	r3, IPSR
 8007b7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b7c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d12d      	bne.n	8007bde <osEventFlagsNew+0x74>
    mem = -1;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d015      	beq.n	8007bba <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d006      	beq.n	8007ba4 <osEventFlagsNew+0x3a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b1f      	cmp	r3, #31
 8007b9c:	d902      	bls.n	8007ba4 <osEventFlagsNew+0x3a>
        mem = 1;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	e00c      	b.n	8007bbe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d108      	bne.n	8007bbe <osEventFlagsNew+0x54>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <osEventFlagsNew+0x54>
          mem = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	e001      	b.n	8007bbe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d106      	bne.n	8007bd2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fa37 	bl	800803c <xEventGroupCreateStatic>
 8007bce:	6178      	str	r0, [r7, #20]
 8007bd0:	e005      	b.n	8007bde <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007bd8:	f000 fa69 	bl	80080ae <xEventGroupCreate>
 8007bdc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007bde:	697b      	ldr	r3, [r7, #20]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <osEventFlagsSet+0x1c>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c02:	d303      	bcc.n	8007c0c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007c04:	f06f 0303 	mvn.w	r3, #3
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e028      	b.n	8007c5e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c0c:	f3ef 8305 	mrs	r3, IPSR
 8007c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c12:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01d      	beq.n	8007c54 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007c1c:	f107 0308 	add.w	r3, r7, #8
 8007c20:	461a      	mov	r2, r3
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6938      	ldr	r0, [r7, #16]
 8007c26:	f000 fbe9 	bl	80083fc <xEventGroupSetBitsFromISR>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007c30:	f06f 0302 	mvn.w	r3, #2
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e012      	b.n	8007c5e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <osEventFlagsSet+0x76>
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <osEventFlagsSet+0x80>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	e004      	b.n	8007c5e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 fb16 	bl	8008288 <xEventGroupSetBits>
 8007c5c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007c5e:	697b      	ldr	r3, [r7, #20]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08c      	sub	sp, #48	@ 0x30
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <osEventFlagsWait+0x20>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c8a:	d303      	bcc.n	8007c94 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007c8c:	f06f 0303 	mvn.w	r3, #3
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e04b      	b.n	8007d2c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c94:	f3ef 8305 	mrs	r3, IPSR
 8007c98:	617b      	str	r3, [r7, #20]
  return(result);
 8007c9a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007ca0:	f06f 0305 	mvn.w	r3, #5
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e041      	b.n	8007d2c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb6:	e001      	b.n	8007cbc <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	e001      	b.n	8007cd0 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	6a3a      	ldr	r2, [r7, #32]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	69b8      	ldr	r0, [r7, #24]
 8007cdc:	f000 fa02 	bl	80080e4 <xEventGroupWaitBits>
 8007ce0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d019      	beq.n	8007d2c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007cfe:	f06f 0301 	mvn.w	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e012      	b.n	8007d2c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007d06:	f06f 0302 	mvn.w	r3, #2
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e00e      	b.n	8007d2c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d109      	bne.n	8007d2c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007d1e:	f06f 0301 	mvn.w	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e002      	b.n	8007d2c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007d26:	f06f 0302 	mvn.w	r3, #2
 8007d2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007d2c:	69fb      	ldr	r3, [r7, #28]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	@ 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b08a      	sub	sp, #40	@ 0x28
 8007d3a:	af02      	add	r7, sp, #8
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d46:	f3ef 8305 	mrs	r3, IPSR
 8007d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8007d4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d15f      	bne.n	8007e12 <osMessageQueueNew+0xdc>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d05c      	beq.n	8007e12 <osMessageQueueNew+0xdc>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d059      	beq.n	8007e12 <osMessageQueueNew+0xdc>
    mem = -1;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d029      	beq.n	8007dbe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d012      	beq.n	8007d98 <osMessageQueueNew+0x62>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	2b4f      	cmp	r3, #79	@ 0x4f
 8007d78:	d90e      	bls.n	8007d98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695a      	ldr	r2, [r3, #20]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	fb01 f303 	mul.w	r3, r1, r3
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d302      	bcc.n	8007d98 <osMessageQueueNew+0x62>
        mem = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e014      	b.n	8007dc2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d110      	bne.n	8007dc2 <osMessageQueueNew+0x8c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10c      	bne.n	8007dc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d108      	bne.n	8007dc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
 8007dbc:	e001      	b.n	8007dc2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d10b      	bne.n	8007de0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	9100      	str	r1, [sp, #0]
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f001 f81c 	bl	8008e14 <xQueueGenericCreateStatic>
 8007ddc:	61f8      	str	r0, [r7, #28]
 8007dde:	e008      	b.n	8007df2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d105      	bne.n	8007df2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007de6:	2200      	movs	r2, #0
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f001 f88f 	bl	8008f0e <xQueueGenericCreate>
 8007df0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e001      	b.n	8007e0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	69f8      	ldr	r0, [r7, #28]
 8007e0e:	f001 fd2f 	bl	8009870 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e12:	69fb      	ldr	r3, [r7, #28]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e34:	f3ef 8305 	mrs	r3, IPSR
 8007e38:	617b      	str	r3, [r7, #20]
  return(result);
 8007e3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d028      	beq.n	8007e92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <osMessageQueuePut+0x36>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <osMessageQueuePut+0x36>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007e52:	f06f 0303 	mvn.w	r3, #3
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e038      	b.n	8007ecc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e5e:	f107 0210 	add.w	r2, r7, #16
 8007e62:	2300      	movs	r3, #0
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f001 f9b2 	bl	80091d0 <xQueueGenericSendFromISR>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d003      	beq.n	8007e7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007e72:	f06f 0302 	mvn.w	r3, #2
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e028      	b.n	8007ecc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d025      	beq.n	8007ecc <osMessageQueuePut+0xb0>
 8007e80:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <osMessageQueuePut+0xbc>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	e01c      	b.n	8007ecc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <osMessageQueuePut+0x82>
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007e9e:	f06f 0303 	mvn.w	r3, #3
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e012      	b.n	8007ecc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	69b8      	ldr	r0, [r7, #24]
 8007eae:	f001 f88d 	bl	8008fcc <xQueueGenericSend>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d009      	beq.n	8007ecc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007ebe:	f06f 0301 	mvn.w	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e002      	b.n	8007ecc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007ec6:	f06f 0302 	mvn.w	r3, #2
 8007eca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007ecc:	69fb      	ldr	r3, [r7, #28]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef2:	f3ef 8305 	mrs	r3, IPSR
 8007ef6:	617b      	str	r3, [r7, #20]
  return(result);
 8007ef8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d028      	beq.n	8007f50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <osMessageQueueGet+0x34>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <osMessageQueueGet+0x34>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007f10:	f06f 0303 	mvn.w	r3, #3
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	e037      	b.n	8007f88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	69b8      	ldr	r0, [r7, #24]
 8007f26:	f001 fad3 	bl	80094d0 <xQueueReceiveFromISR>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d003      	beq.n	8007f38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007f30:	f06f 0302 	mvn.w	r3, #2
 8007f34:	61fb      	str	r3, [r7, #28]
 8007f36:	e027      	b.n	8007f88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d024      	beq.n	8007f88 <osMessageQueueGet+0xac>
 8007f3e:	4b15      	ldr	r3, [pc, #84]	@ (8007f94 <osMessageQueueGet+0xb8>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	e01b      	b.n	8007f88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <osMessageQueueGet+0x80>
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007f5c:	f06f 0303 	mvn.w	r3, #3
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	e011      	b.n	8007f88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	69b8      	ldr	r0, [r7, #24]
 8007f6a:	f001 f9cf 	bl	800930c <xQueueReceive>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d009      	beq.n	8007f88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007f7a:	f06f 0301 	mvn.w	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e002      	b.n	8007f88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007f82:	f06f 0302 	mvn.w	r3, #2
 8007f86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f88:	69fb      	ldr	r3, [r7, #28]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d102      	bne.n	8007fb0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	e00e      	b.n	8007fce <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb0:	f3ef 8305 	mrs	r3, IPSR
 8007fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007fbc:	6938      	ldr	r0, [r7, #16]
 8007fbe:	f001 fb28 	bl	8009612 <uxQueueMessagesWaitingFromISR>
 8007fc2:	6178      	str	r0, [r7, #20]
 8007fc4:	e003      	b.n	8007fce <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007fc6:	6938      	ldr	r0, [r7, #16]
 8007fc8:	f001 fb04 	bl	80095d4 <uxQueueMessagesWaiting>
 8007fcc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8007fce:	697b      	ldr	r3, [r7, #20]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a06      	ldr	r2, [pc, #24]	@ (8008000 <vApplicationGetIdleTaskMemory+0x28>)
 8007fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4a05      	ldr	r2, [pc, #20]	@ (8008004 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2280      	movs	r2, #128	@ 0x80
 8007ff4:	601a      	str	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr
 8008000:	20000358 	.word	0x20000358
 8008004:	20000400 	.word	0x20000400

08008008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a07      	ldr	r2, [pc, #28]	@ (8008034 <vApplicationGetTimerTaskMemory+0x2c>)
 8008018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4a06      	ldr	r2, [pc, #24]	@ (8008038 <vApplicationGetTimerTaskMemory+0x30>)
 800801e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008026:	601a      	str	r2, [r3, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000600 	.word	0x20000600
 8008038:	200006a8 	.word	0x200006a8

0800803c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008062:	2320      	movs	r3, #32
 8008064:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b20      	cmp	r3, #32
 800806a:	d00b      	beq.n	8008084 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3304      	adds	r3, #4
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fbaf 	bl	80087fc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2201      	movs	r2, #1
 80080a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80080a4:	697b      	ldr	r3, [r7, #20]
	}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80080b4:	2020      	movs	r0, #32
 80080b6:	f000 f9b5 	bl	8008424 <pvPortMalloc>
 80080ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb95 	bl	80087fc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80080d8:	687b      	ldr	r3, [r7, #4]
	}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b090      	sub	sp, #64	@ 0x40
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xEventGroupWaitBits+0x38>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008122:	d30b      	bcc.n	800813c <xEventGroupWaitBits+0x58>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	61fb      	str	r3, [r7, #28]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10b      	bne.n	800815a <xEventGroupWaitBits+0x76>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	61bb      	str	r3, [r7, #24]
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	e7fd      	b.n	8008156 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800815a:	f002 fadb 	bl	800a714 <xTaskGetSchedulerState>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <xEventGroupWaitBits+0x86>
 8008164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <xEventGroupWaitBits+0x8a>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <xEventGroupWaitBits+0x8c>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	617b      	str	r3, [r7, #20]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800818c:	f001 fe30 	bl	8009df0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800819c:	f000 f90d 	bl	80083ba <prvTestWaitCondition>
 80081a0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d028      	beq.n	8008208 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	43db      	mvns	r3, r3
 80081be:	401a      	ands	r2, r3
 80081c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e020      	b.n	8008208 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80081c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d104      	bne.n	80081d6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80081cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80081d4:	e018      	b.n	8008208 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80081f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f4:	1d18      	adds	r0, r3, #4
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	4313      	orrs	r3, r2
 80081fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081fe:	4619      	mov	r1, r3
 8008200:	f001 fff4 	bl	800a1ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008208:	f001 fe00 	bl	8009e0c <xTaskResumeAll>
 800820c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800820e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008210:	2b00      	cmp	r3, #0
 8008212:	d031      	beq.n	8008278 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d107      	bne.n	800822a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800821a:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <xEventGroupWaitBits+0x1a0>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800822a:	f002 fb01 	bl	800a830 <uxTaskResetEventItemValue>
 800822e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d11a      	bne.n	8008270 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800823a:	f000 fc7f 	bl	8008b3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800823e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800824a:	f000 f8b6 	bl	80083ba <prvTestWaitCondition>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	43db      	mvns	r3, r3
 8008262:	401a      	ands	r2, r3
 8008264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008266:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800826c:	f000 fc96 	bl	8008b9c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800827a:	4618      	mov	r0, r3
 800827c:	3740      	adds	r7, #64	@ 0x40
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008292:	2300      	movs	r3, #0
 8008294:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10b      	bne.n	80082bc <xEventGroupSetBits+0x34>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	613b      	str	r3, [r7, #16]
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	e7fd      	b.n	80082b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082c2:	d30b      	bcc.n	80082dc <xEventGroupSetBits+0x54>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	3304      	adds	r3, #4
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	3308      	adds	r3, #8
 80082e6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80082e8:	f001 fd82 	bl	8009df0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80082fe:	e03c      	b.n	800837a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800830c:	2300      	movs	r3, #0
 800830e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008316:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800831e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d108      	bne.n	800833c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800833a:	e008      	b.n	800834e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	4013      	ands	r3, r2
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	429a      	cmp	r2, r3
 8008348:	d101      	bne.n	800834e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800834a:	2301      	movs	r3, #1
 800834c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800835e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	4313      	orrs	r3, r2
 8008364:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800836e:	4619      	mov	r1, r3
 8008370:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008372:	f002 f809 	bl	800a388 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800837a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	429a      	cmp	r2, r3
 8008380:	d1be      	bne.n	8008300 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	43db      	mvns	r3, r3
 800838a:	401a      	ands	r2, r3
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008390:	f001 fd3c 	bl	8009e0c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	681b      	ldr	r3, [r3, #0]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3738      	adds	r7, #56	@ 0x38
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff ff6b 	bl	8008288 <xEventGroupSetBits>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b087      	sub	sp, #28
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d107      	bne.n	80083e0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	e007      	b.n	80083f0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4013      	ands	r3, r2
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d101      	bne.n	80083f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083ec:	2301      	movs	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80083f0:	697b      	ldr	r3, [r7, #20]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	68f9      	ldr	r1, [r7, #12]
 800840e:	4804      	ldr	r0, [pc, #16]	@ (8008420 <xEventGroupSetBitsFromISR+0x24>)
 8008410:	f002 fdd2 	bl	800afb8 <xTimerPendFunctionCallFromISR>
 8008414:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008416:	697b      	ldr	r3, [r7, #20]
	}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	080083a1 	.word	0x080083a1

08008424 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	@ 0x28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008430:	f001 fcde 	bl	8009df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008434:	4b5c      	ldr	r3, [pc, #368]	@ (80085a8 <pvPortMalloc+0x184>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800843c:	f000 f924 	bl	8008688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008440:	4b5a      	ldr	r3, [pc, #360]	@ (80085ac <pvPortMalloc+0x188>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	f040 8095 	bne.w	8008578 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01e      	beq.n	8008492 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008454:	2208      	movs	r2, #8
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b00      	cmp	r3, #0
 8008464:	d015      	beq.n	8008492 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f023 0307 	bic.w	r3, r3, #7
 800846c:	3308      	adds	r3, #8
 800846e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <pvPortMalloc+0x6e>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	617b      	str	r3, [r7, #20]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d06f      	beq.n	8008578 <pvPortMalloc+0x154>
 8008498:	4b45      	ldr	r3, [pc, #276]	@ (80085b0 <pvPortMalloc+0x18c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d86a      	bhi.n	8008578 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084a2:	4b44      	ldr	r3, [pc, #272]	@ (80085b4 <pvPortMalloc+0x190>)
 80084a4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084a6:	4b43      	ldr	r3, [pc, #268]	@ (80085b4 <pvPortMalloc+0x190>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ac:	e004      	b.n	80084b8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d903      	bls.n	80084ca <pvPortMalloc+0xa6>
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f1      	bne.n	80084ae <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084ca:	4b37      	ldr	r3, [pc, #220]	@ (80085a8 <pvPortMalloc+0x184>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d051      	beq.n	8008578 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2208      	movs	r2, #8
 80084da:	4413      	add	r3, r2
 80084dc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	2308      	movs	r3, #8
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d920      	bls.n	8008538 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <pvPortMalloc+0xfc>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	613b      	str	r3, [r7, #16]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	1ad2      	subs	r2, r2, r3
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008532:	69b8      	ldr	r0, [r7, #24]
 8008534:	f000 f90a 	bl	800874c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008538:	4b1d      	ldr	r3, [pc, #116]	@ (80085b0 <pvPortMalloc+0x18c>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	4a1b      	ldr	r2, [pc, #108]	@ (80085b0 <pvPortMalloc+0x18c>)
 8008544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008546:	4b1a      	ldr	r3, [pc, #104]	@ (80085b0 <pvPortMalloc+0x18c>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <pvPortMalloc+0x194>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d203      	bcs.n	800855a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008552:	4b17      	ldr	r3, [pc, #92]	@ (80085b0 <pvPortMalloc+0x18c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a18      	ldr	r2, [pc, #96]	@ (80085b8 <pvPortMalloc+0x194>)
 8008558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4b13      	ldr	r3, [pc, #76]	@ (80085ac <pvPortMalloc+0x188>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	431a      	orrs	r2, r3
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800856e:	4b13      	ldr	r3, [pc, #76]	@ (80085bc <pvPortMalloc+0x198>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3301      	adds	r3, #1
 8008574:	4a11      	ldr	r2, [pc, #68]	@ (80085bc <pvPortMalloc+0x198>)
 8008576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008578:	f001 fc48 	bl	8009e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <pvPortMalloc+0x17a>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60fb      	str	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <pvPortMalloc+0x176>
	return pvReturn;
 800859e:	69fb      	ldr	r3, [r7, #28]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3728      	adds	r7, #40	@ 0x28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20002ab0 	.word	0x20002ab0
 80085ac:	20002ac4 	.word	0x20002ac4
 80085b0:	20002ab4 	.word	0x20002ab4
 80085b4:	20002aa8 	.word	0x20002aa8
 80085b8:	20002ab8 	.word	0x20002ab8
 80085bc:	20002abc 	.word	0x20002abc

080085c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d04f      	beq.n	8008672 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085d2:	2308      	movs	r3, #8
 80085d4:	425b      	negs	r3, r3
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	4b25      	ldr	r3, [pc, #148]	@ (800867c <vPortFree+0xbc>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <vPortFree+0x46>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <vPortFree+0x66>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60bb      	str	r3, [r7, #8]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	4b14      	ldr	r3, [pc, #80]	@ (800867c <vPortFree+0xbc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4013      	ands	r3, r2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01e      	beq.n	8008672 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d11a      	bne.n	8008672 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <vPortFree+0xbc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	43db      	mvns	r3, r3
 8008646:	401a      	ands	r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800864c:	f001 fbd0 	bl	8009df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4b0a      	ldr	r3, [pc, #40]	@ (8008680 <vPortFree+0xc0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4413      	add	r3, r2
 800865a:	4a09      	ldr	r2, [pc, #36]	@ (8008680 <vPortFree+0xc0>)
 800865c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f000 f874 	bl	800874c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008664:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <vPortFree+0xc4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	4a06      	ldr	r2, [pc, #24]	@ (8008684 <vPortFree+0xc4>)
 800866c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800866e:	f001 fbcd 	bl	8009e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008672:	bf00      	nop
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20002ac4 	.word	0x20002ac4
 8008680:	20002ab4 	.word	0x20002ab4
 8008684:	20002ac0 	.word	0x20002ac0

08008688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800868e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008694:	4b27      	ldr	r3, [pc, #156]	@ (8008734 <prvHeapInit+0xac>)
 8008696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00c      	beq.n	80086bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3307      	adds	r3, #7
 80086a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008734 <prvHeapInit+0xac>)
 80086b8:	4413      	add	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <prvHeapInit+0xb0>)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008738 <prvHeapInit+0xb0>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086d4:	2208      	movs	r2, #8
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a15      	ldr	r2, [pc, #84]	@ (800873c <prvHeapInit+0xb4>)
 80086e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086ea:	4b14      	ldr	r3, [pc, #80]	@ (800873c <prvHeapInit+0xb4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086f2:	4b12      	ldr	r3, [pc, #72]	@ (800873c <prvHeapInit+0xb4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	1ad2      	subs	r2, r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008708:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <prvHeapInit+0xb4>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4a0a      	ldr	r2, [pc, #40]	@ (8008740 <prvHeapInit+0xb8>)
 8008716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a09      	ldr	r2, [pc, #36]	@ (8008744 <prvHeapInit+0xbc>)
 800871e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008720:	4b09      	ldr	r3, [pc, #36]	@ (8008748 <prvHeapInit+0xc0>)
 8008722:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008726:	601a      	str	r2, [r3, #0]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000aa8 	.word	0x20000aa8
 8008738:	20002aa8 	.word	0x20002aa8
 800873c:	20002ab0 	.word	0x20002ab0
 8008740:	20002ab8 	.word	0x20002ab8
 8008744:	20002ab4 	.word	0x20002ab4
 8008748:	20002ac4 	.word	0x20002ac4

0800874c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008754:	4b27      	ldr	r3, [pc, #156]	@ (80087f4 <prvInsertBlockIntoFreeList+0xa8>)
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e002      	b.n	8008760 <prvInsertBlockIntoFreeList+0x14>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	429a      	cmp	r2, r3
 8008768:	d8f7      	bhi.n	800875a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d108      	bne.n	800878e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d118      	bne.n	80087d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b14      	ldr	r3, [pc, #80]	@ (80087f8 <prvInsertBlockIntoFreeList+0xac>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d00d      	beq.n	80087ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	441a      	add	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e008      	b.n	80087dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087ca:	4b0b      	ldr	r3, [pc, #44]	@ (80087f8 <prvInsertBlockIntoFreeList+0xac>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e003      	b.n	80087dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d002      	beq.n	80087ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ea:	bf00      	nop
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	20002aa8 	.word	0x20002aa8
 80087f8:	20002ab0 	.word	0x20002ab0

080087fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f103 0208 	add.w	r2, r3, #8
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f103 0208 	add.w	r2, r3, #8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0208 	add.w	r2, r3, #8
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ae:	d103      	bne.n	80088b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e00c      	b.n	80088d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3308      	adds	r3, #8
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e002      	b.n	80088c6 <vListInsert+0x2e>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d2f6      	bcs.n	80088c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6892      	ldr	r2, [r2, #8]
 800891e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6852      	ldr	r2, [r2, #4]
 8008928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d103      	bne.n	800893c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	1e5a      	subs	r2, r3, #1
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
	...

0800895c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3b04      	subs	r3, #4
 800896c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b04      	subs	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f023 0201 	bic.w	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800898c:	4a08      	ldr	r2, [pc, #32]	@ (80089b0 <pxPortInitialiseStack+0x54>)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3b14      	subs	r3, #20
 8008996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b20      	subs	r3, #32
 80089a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	080089b5 	.word	0x080089b5

080089b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089be:	4b12      	ldr	r3, [pc, #72]	@ (8008a08 <prvTaskExitError+0x54>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d00b      	beq.n	80089e0 <prvTaskExitError+0x2c>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <prvTaskExitError+0x28>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60bb      	str	r3, [r7, #8]
}
 80089f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089f4:	bf00      	nop
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0fc      	beq.n	80089f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	2000000c 	.word	0x2000000c
 8008a0c:	00000000 	.word	0x00000000

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a2e:	4770      	bx	lr

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20002b10 	.word	0x20002b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a38:	4806      	ldr	r0, [pc, #24]	@ (8008a54 <prvPortStartFirstTask+0x1c>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	b662      	cpsie	i
 8008a44:	b661      	cpsie	f
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	df00      	svc	0
 8008a50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a52:	bf00      	nop
 8008a54:	e000ed08 	.word	0xe000ed08

08008a58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a5e:	4b32      	ldr	r3, [pc, #200]	@ (8008b28 <xPortStartScheduler+0xd0>)
 8008a60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22ff      	movs	r2, #255	@ 0xff
 8008a6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	4b2a      	ldr	r3, [pc, #168]	@ (8008b2c <xPortStartScheduler+0xd4>)
 8008a84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a86:	4b2a      	ldr	r3, [pc, #168]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008a88:	2207      	movs	r2, #7
 8008a8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a8c:	e009      	b.n	8008aa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a8e:	4b28      	ldr	r3, [pc, #160]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	4a26      	ldr	r2, [pc, #152]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008a96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aaa:	2b80      	cmp	r3, #128	@ 0x80
 8008aac:	d0ef      	beq.n	8008a8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aae:	4b20      	ldr	r3, [pc, #128]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f1c3 0307 	rsb	r3, r3, #7
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d00b      	beq.n	8008ad2 <xPortStartScheduler+0x7a>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60bb      	str	r3, [r7, #8]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008ada:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008adc:	4b14      	ldr	r3, [pc, #80]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ae4:	4a12      	ldr	r2, [pc, #72]	@ (8008b30 <xPortStartScheduler+0xd8>)
 8008ae6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008af0:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <xPortStartScheduler+0xdc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a0f      	ldr	r2, [pc, #60]	@ (8008b34 <xPortStartScheduler+0xdc>)
 8008af6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008afa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <xPortStartScheduler+0xdc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0c      	ldr	r2, [pc, #48]	@ (8008b34 <xPortStartScheduler+0xdc>)
 8008b02:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b08:	f000 f8b8 	bl	8008c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <xPortStartScheduler+0xe0>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b12:	f7ff ff91 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b16:	f001 fadf 	bl	800a0d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b1a:	f7ff ff4b 	bl	80089b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000e400 	.word	0xe000e400
 8008b2c:	20002ac8 	.word	0x20002ac8
 8008b30:	20002acc 	.word	0x20002acc
 8008b34:	e000ed20 	.word	0xe000ed20
 8008b38:	2000000c 	.word	0x2000000c

08008b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	607b      	str	r3, [r7, #4]
}
 8008b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b56:	4b0f      	ldr	r3, [pc, #60]	@ (8008b94 <vPortEnterCritical+0x58>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <vPortEnterCritical+0x58>)
 8008b5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b60:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <vPortEnterCritical+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d110      	bne.n	8008b8a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b68:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <vPortEnterCritical+0x5c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00b      	beq.n	8008b8a <vPortEnterCritical+0x4e>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	603b      	str	r3, [r7, #0]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <vPortEnterCritical+0x4a>
	}
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr
 8008b94:	2000000c 	.word	0x2000000c
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ba2:	4b12      	ldr	r3, [pc, #72]	@ (8008bec <vPortExitCritical+0x50>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <vPortExitCritical+0x26>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	607b      	str	r3, [r7, #4]
}
 8008bbc:	bf00      	nop
 8008bbe:	bf00      	nop
 8008bc0:	e7fd      	b.n	8008bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bec <vPortExitCritical+0x50>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	4a08      	ldr	r2, [pc, #32]	@ (8008bec <vPortExitCritical+0x50>)
 8008bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bcc:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <vPortExitCritical+0x50>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <vPortExitCritical+0x44>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	2000000c 	.word	0x2000000c

08008bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bf0:	f3ef 8009 	mrs	r0, PSP
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c30 <pxCurrentTCBConst>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c0a:	f380 8811 	msr	BASEPRI, r0
 8008c0e:	f001 fa63 	bl	800a0d8 <vTaskSwitchContext>
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8811 	msr	BASEPRI, r0
 8008c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c26:	f380 8809 	msr	PSP, r0
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	4770      	bx	lr

08008c30 <pxCurrentTCBConst>:
 8008c30:	20002b10 	.word	0x20002b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
}
 8008c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c52:	f001 f987 	bl	8009f64 <xTaskIncrementTick>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <xPortSysTickHandler+0x40>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f383 8811 	msr	BASEPRI, r3
}
 8008c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <vPortSetupTimerInterrupt+0x30>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c86:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <vPortSetupTimerInterrupt+0x34>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c8c:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <vPortSetupTimerInterrupt+0x38>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a09      	ldr	r2, [pc, #36]	@ (8008cb8 <vPortSetupTimerInterrupt+0x3c>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	099b      	lsrs	r3, r3, #6
 8008c98:	4a08      	ldr	r2, [pc, #32]	@ (8008cbc <vPortSetupTimerInterrupt+0x40>)
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c9e:	4b03      	ldr	r3, [pc, #12]	@ (8008cac <vPortSetupTimerInterrupt+0x30>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	e000e010 	.word	0xe000e010
 8008cb0:	e000e018 	.word	0xe000e018
 8008cb4:	20000000 	.word	0x20000000
 8008cb8:	10624dd3 	.word	0x10624dd3
 8008cbc:	e000e014 	.word	0xe000e014

08008cc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cc6:	f3ef 8305 	mrs	r3, IPSR
 8008cca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d915      	bls.n	8008cfe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cd2:	4a17      	ldr	r2, [pc, #92]	@ (8008d30 <vPortValidateInterruptPriority+0x70>)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cdc:	4b15      	ldr	r3, [pc, #84]	@ (8008d34 <vPortValidateInterruptPriority+0x74>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	7afa      	ldrb	r2, [r7, #11]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d20b      	bcs.n	8008cfe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	607b      	str	r3, [r7, #4]
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	e7fd      	b.n	8008cfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <vPortValidateInterruptPriority+0x78>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <vPortValidateInterruptPriority+0x7c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d90b      	bls.n	8008d26 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	603b      	str	r3, [r7, #0]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <vPortValidateInterruptPriority+0x62>
	}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr
 8008d30:	e000e3f0 	.word	0xe000e3f0
 8008d34:	20002ac8 	.word	0x20002ac8
 8008d38:	e000ed0c 	.word	0xe000ed0c
 8008d3c:	20002acc 	.word	0x20002acc

08008d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <xQueueGenericReset+0x2c>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	60bb      	str	r3, [r7, #8]
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d6c:	f7ff fee6 	bl	8008b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d78:	68f9      	ldr	r1, [r7, #12]
 8008d7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d7c:	fb01 f303 	mul.w	r3, r1, r3
 8008d80:	441a      	add	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	441a      	add	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	22ff      	movs	r2, #255	@ 0xff
 8008db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	22ff      	movs	r2, #255	@ 0xff
 8008db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d114      	bne.n	8008dec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01a      	beq.n	8008e00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3310      	adds	r3, #16
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fa76 	bl	800a2c0 <xTaskRemoveFromEventList>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d012      	beq.n	8008e00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <xQueueGenericReset+0xd0>)
 8008ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	e009      	b.n	8008e00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3310      	adds	r3, #16
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fd03 	bl	80087fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3324      	adds	r3, #36	@ 0x24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fcfe 	bl	80087fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e00:	f7ff fecc 	bl	8008b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e04:	2301      	movs	r3, #1
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	@ 0x38
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10b      	bne.n	8008e40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <xQueueGenericCreateStatic+0x56>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <xQueueGenericCreateStatic+0x5a>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <xQueueGenericCreateStatic+0x5c>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	623b      	str	r3, [r7, #32]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <xQueueGenericCreateStatic+0x84>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <xQueueGenericCreateStatic+0x88>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <xQueueGenericCreateStatic+0x8a>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	61fb      	str	r3, [r7, #28]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eba:	2350      	movs	r3, #80	@ 0x50
 8008ebc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b50      	cmp	r3, #80	@ 0x50
 8008ec2:	d00b      	beq.n	8008edc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	61bb      	str	r3, [r7, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008edc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00d      	beq.n	8008f04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 f840 	bl	8008f84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3730      	adds	r7, #48	@ 0x30
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b08a      	sub	sp, #40	@ 0x28
 8008f12:	af02      	add	r7, sp, #8
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	613b      	str	r3, [r7, #16]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	3350      	adds	r3, #80	@ 0x50
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff fa6b 	bl	8008424 <pvPortMalloc>
 8008f4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d011      	beq.n	8008f7a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	3350      	adds	r3, #80	@ 0x50
 8008f5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f68:	79fa      	ldrb	r2, [r7, #7]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 f805 	bl	8008f84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d103      	bne.n	8008fa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	69b8      	ldr	r0, [r7, #24]
 8008fb6:	f7ff fec3 	bl	8008d40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	@ 0x38
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10b      	bne.n	8009000 <xQueueGenericSend+0x34>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	e7fd      	b.n	8008ffc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d103      	bne.n	800900e <xQueueGenericSend+0x42>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <xQueueGenericSend+0x46>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <xQueueGenericSend+0x48>
 8009012:	2300      	movs	r3, #0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10b      	bne.n	8009030 <xQueueGenericSend+0x64>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d103      	bne.n	800903e <xQueueGenericSend+0x72>
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <xQueueGenericSend+0x76>
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <xQueueGenericSend+0x78>
 8009042:	2300      	movs	r3, #0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <xQueueGenericSend+0x94>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	623b      	str	r3, [r7, #32]
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	e7fd      	b.n	800905c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009060:	f001 fb58 	bl	800a714 <xTaskGetSchedulerState>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <xQueueGenericSend+0xa4>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <xQueueGenericSend+0xa8>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <xQueueGenericSend+0xaa>
 8009074:	2300      	movs	r3, #0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <xQueueGenericSend+0xc6>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	61fb      	str	r3, [r7, #28]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009092:	f7ff fd53 	bl	8008b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909e:	429a      	cmp	r2, r3
 80090a0:	d302      	bcc.n	80090a8 <xQueueGenericSend+0xdc>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d129      	bne.n	80090fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ae:	f000 face 	bl	800964e <prvCopyDataToQueue>
 80090b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d010      	beq.n	80090de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090be:	3324      	adds	r3, #36	@ 0x24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f8fd 	bl	800a2c0 <xTaskRemoveFromEventList>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d013      	beq.n	80090f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090cc:	4b3f      	ldr	r3, [pc, #252]	@ (80091cc <xQueueGenericSend+0x200>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	e00a      	b.n	80090f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d007      	beq.n	80090f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090e4:	4b39      	ldr	r3, [pc, #228]	@ (80091cc <xQueueGenericSend+0x200>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090f4:	f7ff fd52 	bl	8008b9c <vPortExitCritical>
				return pdPASS;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e063      	b.n	80091c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009102:	f7ff fd4b 	bl	8008b9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009106:	2300      	movs	r3, #0
 8009108:	e05c      	b.n	80091c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	4618      	mov	r0, r3
 8009116:	f001 f99b 	bl	800a450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911a:	2301      	movs	r3, #1
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800911e:	f7ff fd3d 	bl	8008b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009122:	f000 fe65 	bl	8009df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009126:	f7ff fd09 	bl	8008b3c <vPortEnterCritical>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d103      	bne.n	8009140 <xQueueGenericSend+0x174>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009146:	b25b      	sxtb	r3, r3
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d103      	bne.n	8009156 <xQueueGenericSend+0x18a>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009156:	f7ff fd21 	bl	8008b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915a:	1d3a      	adds	r2, r7, #4
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f98a 	bl	800a47c <xTaskCheckForTimeOut>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d124      	bne.n	80091b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800916e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009170:	f000 fb65 	bl	800983e <prvIsQueueFull>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d018      	beq.n	80091ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	3310      	adds	r3, #16
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f80c 	bl	800a1a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800918a:	f000 faf0 	bl	800976e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800918e:	f000 fe3d 	bl	8009e0c <xTaskResumeAll>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	f47f af7c 	bne.w	8009092 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800919a:	4b0c      	ldr	r3, [pc, #48]	@ (80091cc <xQueueGenericSend+0x200>)
 800919c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	e772      	b.n	8009092 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ae:	f000 fade 	bl	800976e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b2:	f000 fe2b 	bl	8009e0c <xTaskResumeAll>
 80091b6:	e76c      	b.n	8009092 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ba:	f000 fad8 	bl	800976e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091be:	f000 fe25 	bl	8009e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3738      	adds	r7, #56	@ 0x38
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b090      	sub	sp, #64	@ 0x40
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80091e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <xQueueGenericSendFromISR+0x3e>
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <xQueueGenericSendFromISR+0x42>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericSendFromISR+0x44>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d103      	bne.n	800923e <xQueueGenericSendFromISR+0x6e>
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <xQueueGenericSendFromISR+0x72>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueGenericSendFromISR+0x74>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	623b      	str	r3, [r7, #32]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009260:	f7ff fd2e 	bl	8008cc0 <vPortValidateInterruptPriority>
	__asm volatile
 8009264:	f3ef 8211 	mrs	r2, BASEPRI
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	61fa      	str	r2, [r7, #28]
 800927a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800927c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <xQueueGenericSendFromISR+0xc2>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b02      	cmp	r3, #2
 8009290:	d12f      	bne.n	80092f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009298:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800929c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092a8:	f000 f9d1 	bl	800964e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d112      	bne.n	80092dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d016      	beq.n	80092ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	3324      	adds	r3, #36	@ 0x24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fffc 	bl	800a2c0 <xTaskRemoveFromEventList>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00e      	beq.n	80092ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	e007      	b.n	80092ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092e0:	3301      	adds	r3, #1
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	b25a      	sxtb	r2, r3
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092ec:	2301      	movs	r3, #1
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80092f0:	e001      	b.n	80092f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f8:	617b      	str	r3, [r7, #20]
	__asm volatile
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f383 8811 	msr	BASEPRI, r3
}
 8009300:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009304:	4618      	mov	r0, r3
 8009306:	3740      	adds	r7, #64	@ 0x40
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08c      	sub	sp, #48	@ 0x30
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009318:	2300      	movs	r3, #0
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10b      	bne.n	800933e <xQueueReceive+0x32>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	623b      	str	r3, [r7, #32]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <xQueueReceive+0x40>
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <xQueueReceive+0x44>
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <xQueueReceive+0x46>
 8009350:	2300      	movs	r3, #0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <xQueueReceive+0x62>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	61fb      	str	r3, [r7, #28]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800936e:	f001 f9d1 	bl	800a714 <xTaskGetSchedulerState>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <xQueueReceive+0x72>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <xQueueReceive+0x76>
 800937e:	2301      	movs	r3, #1
 8009380:	e000      	b.n	8009384 <xQueueReceive+0x78>
 8009382:	2300      	movs	r3, #0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10b      	bne.n	80093a0 <xQueueReceive+0x94>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	61bb      	str	r3, [r7, #24]
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	e7fd      	b.n	800939c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093a0:	f7ff fbcc 	bl	8008b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01f      	beq.n	80093f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093b4:	f000 f9b5 	bl	8009722 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	1e5a      	subs	r2, r3, #1
 80093bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00f      	beq.n	80093e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	3310      	adds	r3, #16
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 ff77 	bl	800a2c0 <xTaskRemoveFromEventList>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093d8:	4b3c      	ldr	r3, [pc, #240]	@ (80094cc <xQueueReceive+0x1c0>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093e8:	f7ff fbd8 	bl	8008b9c <vPortExitCritical>
				return pdPASS;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e069      	b.n	80094c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093f6:	f7ff fbd1 	bl	8008b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e062      	b.n	80094c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d106      	bne.n	8009412 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009404:	f107 0310 	add.w	r3, r7, #16
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f821 	bl	800a450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800940e:	2301      	movs	r3, #1
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009412:	f7ff fbc3 	bl	8008b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009416:	f000 fceb 	bl	8009df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800941a:	f7ff fb8f 	bl	8008b3c <vPortEnterCritical>
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009424:	b25b      	sxtb	r3, r3
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	d103      	bne.n	8009434 <xQueueReceive+0x128>
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800943a:	b25b      	sxtb	r3, r3
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d103      	bne.n	800944a <xQueueReceive+0x13e>
 8009442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800944a:	f7ff fba7 	bl	8008b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800944e:	1d3a      	adds	r2, r7, #4
 8009450:	f107 0310 	add.w	r3, r7, #16
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f001 f810 	bl	800a47c <xTaskCheckForTimeOut>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d123      	bne.n	80094aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009464:	f000 f9d5 	bl	8009812 <prvIsQueueEmpty>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d017      	beq.n	800949e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	3324      	adds	r3, #36	@ 0x24
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fe92 	bl	800a1a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800947c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800947e:	f000 f976 	bl	800976e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009482:	f000 fcc3 	bl	8009e0c <xTaskResumeAll>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d189      	bne.n	80093a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800948c:	4b0f      	ldr	r3, [pc, #60]	@ (80094cc <xQueueReceive+0x1c0>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	e780      	b.n	80093a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800949e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094a0:	f000 f965 	bl	800976e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094a4:	f000 fcb2 	bl	8009e0c <xTaskResumeAll>
 80094a8:	e77a      	b.n	80093a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094ac:	f000 f95f 	bl	800976e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094b0:	f000 fcac 	bl	8009e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094b6:	f000 f9ac 	bl	8009812 <prvIsQueueEmpty>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f43f af6f 	beq.w	80093a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3730      	adds	r7, #48	@ 0x30
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08e      	sub	sp, #56	@ 0x38
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	623b      	str	r3, [r7, #32]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <xQueueReceiveFromISR+0x3c>
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <xQueueReceiveFromISR+0x40>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <xQueueReceiveFromISR+0x42>
 8009510:	2300      	movs	r3, #0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10b      	bne.n	800952e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	61fb      	str	r3, [r7, #28]
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	e7fd      	b.n	800952a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800952e:	f7ff fbc7 	bl	8008cc0 <vPortValidateInterruptPriority>
	__asm volatile
 8009532:	f3ef 8211 	mrs	r2, BASEPRI
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61ba      	str	r2, [r7, #24]
 8009548:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800954a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800954c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009552:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d02f      	beq.n	80095ba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009568:	f000 f8db 	bl	8009722 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	1e5a      	subs	r2, r3, #1
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009574:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d112      	bne.n	80095a4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d016      	beq.n	80095b4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	3310      	adds	r3, #16
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fe98 	bl	800a2c0 <xTaskRemoveFromEventList>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e007      	b.n	80095b4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095a8:	3301      	adds	r3, #1
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	b25a      	sxtb	r2, r3
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80095b4:	2301      	movs	r3, #1
 80095b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b8:	e001      	b.n	80095be <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f383 8811 	msr	BASEPRI, r3
}
 80095c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3738      	adds	r7, #56	@ 0x38
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10b      	bne.n	80095fa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	60bb      	str	r3, [r7, #8]
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	e7fd      	b.n	80095f6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80095fa:	f7ff fa9f 	bl	8008b3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009602:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009604:	f7ff faca 	bl	8008b9c <vPortExitCritical>

	return uxReturn;
 8009608:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009612:	b480      	push	{r7}
 8009614:	b087      	sub	sp, #28
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	60fb      	str	r3, [r7, #12]
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009640:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009642:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009644:	4618      	mov	r0, r3
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b086      	sub	sp, #24
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10d      	bne.n	8009688 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d14d      	bne.n	8009710 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f869 	bl	800a750 <xTaskPriorityDisinherit>
 800967e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	609a      	str	r2, [r3, #8]
 8009686:	e043      	b.n	8009710 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d119      	bne.n	80096c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6858      	ldr	r0, [r3, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009696:	461a      	mov	r2, r3
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	f003 ffed 	bl	800d678 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	441a      	add	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d32b      	bcc.n	8009710 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	605a      	str	r2, [r3, #4]
 80096c0:	e026      	b.n	8009710 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68d8      	ldr	r0, [r3, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	461a      	mov	r2, r3
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	f003 ffd3 	bl	800d678 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096da:	425b      	negs	r3, r3
 80096dc:	441a      	add	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d207      	bcs.n	80096fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	425b      	negs	r3, r3
 80096f8:	441a      	add	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d105      	bne.n	8009710 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3b01      	subs	r3, #1
 800970e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009718:	697b      	ldr	r3, [r7, #20]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d018      	beq.n	8009766 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973c:	441a      	add	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	429a      	cmp	r2, r3
 800974c:	d303      	bcc.n	8009756 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68d9      	ldr	r1, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	461a      	mov	r2, r3
 8009760:	6838      	ldr	r0, [r7, #0]
 8009762:	f003 ff89 	bl	800d678 <memcpy>
	}
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009776:	f7ff f9e1 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009780:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009782:	e011      	b.n	80097a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	d012      	beq.n	80097b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3324      	adds	r3, #36	@ 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fd95 	bl	800a2c0 <xTaskRemoveFromEventList>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800979c:	f000 fed2 	bl	800a544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dce9      	bgt.n	8009784 <prvUnlockQueue+0x16>
 80097b0:	e000      	b.n	80097b4 <prvUnlockQueue+0x46>
					break;
 80097b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	22ff      	movs	r2, #255	@ 0xff
 80097b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80097bc:	f7ff f9ee 	bl	8008b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097c0:	f7ff f9bc 	bl	8008b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097cc:	e011      	b.n	80097f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d012      	beq.n	80097fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3310      	adds	r3, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fd70 	bl	800a2c0 <xTaskRemoveFromEventList>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097e6:	f000 fead 	bl	800a544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dce9      	bgt.n	80097ce <prvUnlockQueue+0x60>
 80097fa:	e000      	b.n	80097fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	22ff      	movs	r2, #255	@ 0xff
 8009802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009806:	f7ff f9c9 	bl	8008b9c <vPortExitCritical>
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800981a:	f7ff f98f 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009826:	2301      	movs	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	e001      	b.n	8009830 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009830:	f7ff f9b4 	bl	8008b9c <vPortExitCritical>

	return xReturn;
 8009834:	68fb      	ldr	r3, [r7, #12]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009846:	f7ff f979 	bl	8008b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009852:	429a      	cmp	r2, r3
 8009854:	d102      	bne.n	800985c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009856:	2301      	movs	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	e001      	b.n	8009860 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009860:	f7ff f99c 	bl	8008b9c <vPortExitCritical>

	return xReturn;
 8009864:	68fb      	ldr	r3, [r7, #12]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e014      	b.n	80098aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009880:	4a0e      	ldr	r2, [pc, #56]	@ (80098bc <vQueueAddToRegistry+0x4c>)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800988c:	490b      	ldr	r1, [pc, #44]	@ (80098bc <vQueueAddToRegistry+0x4c>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009896:	4a09      	ldr	r2, [pc, #36]	@ (80098bc <vQueueAddToRegistry+0x4c>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	4413      	add	r3, r2
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098a2:	e006      	b.n	80098b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b07      	cmp	r3, #7
 80098ae:	d9e7      	bls.n	8009880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bc80      	pop	{r7}
 80098ba:	4770      	bx	lr
 80098bc:	20002ad0 	.word	0x20002ad0

080098c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098d0:	f7ff f934 	bl	8008b3c <vPortEnterCritical>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d103      	bne.n	80098ea <vQueueWaitForMessageRestricted+0x2a>
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098f0:	b25b      	sxtb	r3, r3
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d103      	bne.n	8009900 <vQueueWaitForMessageRestricted+0x40>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009900:	f7ff f94c 	bl	8008b9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	3324      	adds	r3, #36	@ 0x24
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fca7 	bl	800a268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800991a:	6978      	ldr	r0, [r7, #20]
 800991c:	f7ff ff27 	bl	800976e <prvUnlockQueue>
	}
 8009920:	bf00      	nop
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	@ 0x38
 800992c:	af04      	add	r7, sp, #16
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <xTaskCreateStatic+0x2c>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	623b      	str	r3, [r7, #32]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <xTaskCreateStatic+0x4a>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61fb      	str	r3, [r7, #28]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009972:	23a8      	movs	r3, #168	@ 0xa8
 8009974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2ba8      	cmp	r3, #168	@ 0xa8
 800997a:	d00b      	beq.n	8009994 <xTaskCreateStatic+0x6c>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	61bb      	str	r3, [r7, #24]
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009994:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01e      	beq.n	80099da <xTaskCreateStatic+0xb2>
 800999c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099b4:	2300      	movs	r3, #0
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	9302      	str	r3, [sp, #8]
 80099bc:	f107 0314 	add.w	r3, r7, #20
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f851 	bl	8009a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099d4:	f000 f8f6 	bl	8009bc4 <prvAddNewTaskToReadyList>
 80099d8:	e001      	b.n	80099de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099de:	697b      	ldr	r3, [r7, #20]
	}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3728      	adds	r7, #40	@ 0x28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08c      	sub	sp, #48	@ 0x30
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fd11 	bl	8008424 <pvPortMalloc>
 8009a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a0a:	20a8      	movs	r0, #168	@ 0xa8
 8009a0c:	f7fe fd0a 	bl	8008424 <pvPortMalloc>
 8009a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a1e:	e005      	b.n	8009a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a20:	6978      	ldr	r0, [r7, #20]
 8009a22:	f7fe fdcd 	bl	80085c0 <vPortFree>
 8009a26:	e001      	b.n	8009a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d017      	beq.n	8009a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a3a:	88fa      	ldrh	r2, [r7, #6]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68b9      	ldr	r1, [r7, #8]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 f80f 	bl	8009a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a56:	69f8      	ldr	r0, [r7, #28]
 8009a58:	f000 f8b4 	bl	8009bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	e002      	b.n	8009a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a62:	f04f 33ff 	mov.w	r3, #4294967295
 8009a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a68:	69bb      	ldr	r3, [r7, #24]
	}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	21a5      	movs	r1, #165	@ 0xa5
 8009a8e:	f003 fd69 	bl	800d564 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	617b      	str	r3, [r7, #20]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01f      	beq.n	8009b14 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61fb      	str	r3, [r7, #28]
 8009ad8:	e012      	b.n	8009b00 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	4413      	add	r3, r2
 8009ae0:	7819      	ldrb	r1, [r3, #0]
 8009ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3334      	adds	r3, #52	@ 0x34
 8009aea:	460a      	mov	r2, r1
 8009aec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	4413      	add	r3, r2
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d006      	beq.n	8009b08 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	3301      	adds	r3, #1
 8009afe:	61fb      	str	r3, [r7, #28]
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	2b0f      	cmp	r3, #15
 8009b04:	d9e9      	bls.n	8009ada <prvInitialiseNewTask+0x66>
 8009b06:	e000      	b.n	8009b0a <prvInitialiseNewTask+0x96>
			{
				break;
 8009b08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b12:	e003      	b.n	8009b1c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	2b37      	cmp	r3, #55	@ 0x37
 8009b20:	d901      	bls.n	8009b26 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b22:	2337      	movs	r3, #55	@ 0x37
 8009b24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	2200      	movs	r2, #0
 8009b36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fe7c 	bl	800883a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	3318      	adds	r3, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fe77 	bl	800883a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	3354      	adds	r3, #84	@ 0x54
 8009b76:	224c      	movs	r2, #76	@ 0x4c
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f003 fcf2 	bl	800d564 <memset>
 8009b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b82:	4a0d      	ldr	r2, [pc, #52]	@ (8009bb8 <prvInitialiseNewTask+0x144>)
 8009b84:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	4a0c      	ldr	r2, [pc, #48]	@ (8009bbc <prvInitialiseNewTask+0x148>)
 8009b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009bc0 <prvInitialiseNewTask+0x14c>)
 8009b90:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	68f9      	ldr	r1, [r7, #12]
 8009b96:	69b8      	ldr	r0, [r7, #24]
 8009b98:	f7fe fee0 	bl	800895c <pxPortInitialiseStack>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bae:	bf00      	nop
 8009bb0:	3720      	adds	r7, #32
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20004358 	.word	0x20004358
 8009bbc:	200043c0 	.word	0x200043c0
 8009bc0:	20004428 	.word	0x20004428

08009bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bcc:	f7fe ffb6 	bl	8008b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bda:	4b2c      	ldr	r3, [pc, #176]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009be2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009be8:	4b27      	ldr	r3, [pc, #156]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d110      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bf0:	f000 fccc 	bl	800a58c <prvInitialiseTaskLists>
 8009bf4:	e00d      	b.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bfe:	4b23      	ldr	r3, [pc, #140]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d802      	bhi.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c12:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a1e      	ldr	r2, [pc, #120]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c28:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <prvAddNewTaskToReadyList+0x74>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c34:	4a18      	ldr	r2, [pc, #96]	@ (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a15      	ldr	r2, [pc, #84]	@ (8009c9c <prvAddNewTaskToReadyList+0xd8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fdff 	bl	8008852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c54:	f7fe ffa2 	bl	8008b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c58:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d207      	bcs.n	8009c7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <prvAddNewTaskToReadyList+0xdc>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20002fe4 	.word	0x20002fe4
 8009c8c:	20002b10 	.word	0x20002b10
 8009c90:	20002ff0 	.word	0x20002ff0
 8009c94:	20003000 	.word	0x20003000
 8009c98:	20002fec 	.word	0x20002fec
 8009c9c:	20002b14 	.word	0x20002b14
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	@ (8009d08 <vTaskDelay+0x64>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <vTaskDelay+0x32>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60bb      	str	r3, [r7, #8]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cd6:	f000 f88b 	bl	8009df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fdbf 	bl	800a860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ce2:	f000 f893 	bl	8009e0c <xTaskResumeAll>
 8009ce6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d107      	bne.n	8009cfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009cee:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <vTaskDelay+0x68>)
 8009cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000300c 	.word	0x2000300c
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08a      	sub	sp, #40	@ 0x28
 8009d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d1e:	463a      	mov	r2, r7
 8009d20:	1d39      	adds	r1, r7, #4
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe f956 	bl	8007fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	2300      	movs	r3, #0
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	460a      	mov	r2, r1
 8009d3e:	4924      	ldr	r1, [pc, #144]	@ (8009dd0 <vTaskStartScheduler+0xc0>)
 8009d40:	4824      	ldr	r0, [pc, #144]	@ (8009dd4 <vTaskStartScheduler+0xc4>)
 8009d42:	f7ff fdf1 	bl	8009928 <xTaskCreateStatic>
 8009d46:	4603      	mov	r3, r0
 8009d48:	4a23      	ldr	r2, [pc, #140]	@ (8009dd8 <vTaskStartScheduler+0xc8>)
 8009d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d4c:	4b22      	ldr	r3, [pc, #136]	@ (8009dd8 <vTaskStartScheduler+0xc8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d54:	2301      	movs	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e001      	b.n	8009d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d102      	bne.n	8009d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d64:	f000 fdd0 	bl	800a908 <xTimerCreateTimerTask>
 8009d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d11b      	bne.n	8009da8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	613b      	str	r3, [r7, #16]
}
 8009d82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d84:	4b15      	ldr	r3, [pc, #84]	@ (8009ddc <vTaskStartScheduler+0xcc>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3354      	adds	r3, #84	@ 0x54
 8009d8a:	4a15      	ldr	r2, [pc, #84]	@ (8009de0 <vTaskStartScheduler+0xd0>)
 8009d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d8e:	4b15      	ldr	r3, [pc, #84]	@ (8009de4 <vTaskStartScheduler+0xd4>)
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d96:	4b14      	ldr	r3, [pc, #80]	@ (8009de8 <vTaskStartScheduler+0xd8>)
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d9c:	4b13      	ldr	r3, [pc, #76]	@ (8009dec <vTaskStartScheduler+0xdc>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009da2:	f7fe fe59 	bl	8008a58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009da6:	e00f      	b.n	8009dc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dae:	d10b      	bne.n	8009dc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <vTaskStartScheduler+0xb4>
}
 8009dc8:	bf00      	nop
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	0800df70 	.word	0x0800df70
 8009dd4:	0800a55d 	.word	0x0800a55d
 8009dd8:	20003008 	.word	0x20003008
 8009ddc:	20002b10 	.word	0x20002b10
 8009de0:	20000180 	.word	0x20000180
 8009de4:	20003004 	.word	0x20003004
 8009de8:	20002ff0 	.word	0x20002ff0
 8009dec:	20002fe8 	.word	0x20002fe8

08009df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009df4:	4b04      	ldr	r3, [pc, #16]	@ (8009e08 <vTaskSuspendAll+0x18>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	4a03      	ldr	r2, [pc, #12]	@ (8009e08 <vTaskSuspendAll+0x18>)
 8009dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009dfe:	bf00      	nop
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	2000300c 	.word	0x2000300c

08009e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e1a:	4b42      	ldr	r3, [pc, #264]	@ (8009f24 <xTaskResumeAll+0x118>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10b      	bne.n	8009e3a <xTaskResumeAll+0x2e>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	603b      	str	r3, [r7, #0]
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	e7fd      	b.n	8009e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e3a:	f7fe fe7f 	bl	8008b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e3e:	4b39      	ldr	r3, [pc, #228]	@ (8009f24 <xTaskResumeAll+0x118>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4a37      	ldr	r2, [pc, #220]	@ (8009f24 <xTaskResumeAll+0x118>)
 8009e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e48:	4b36      	ldr	r3, [pc, #216]	@ (8009f24 <xTaskResumeAll+0x118>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d162      	bne.n	8009f16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e50:	4b35      	ldr	r3, [pc, #212]	@ (8009f28 <xTaskResumeAll+0x11c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d05e      	beq.n	8009f16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e58:	e02f      	b.n	8009eba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5a:	4b34      	ldr	r3, [pc, #208]	@ (8009f2c <xTaskResumeAll+0x120>)
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3318      	adds	r3, #24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fd4e 	bl	8008908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe fd49 	bl	8008908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f30 <xTaskResumeAll+0x124>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d903      	bls.n	8009e8a <xTaskResumeAll+0x7e>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e86:	4a2a      	ldr	r2, [pc, #168]	@ (8009f30 <xTaskResumeAll+0x124>)
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4a27      	ldr	r2, [pc, #156]	@ (8009f34 <xTaskResumeAll+0x128>)
 8009e98:	441a      	add	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f7fe fcd6 	bl	8008852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eaa:	4b23      	ldr	r3, [pc, #140]	@ (8009f38 <xTaskResumeAll+0x12c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d302      	bcc.n	8009eba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009eb4:	4b21      	ldr	r3, [pc, #132]	@ (8009f3c <xTaskResumeAll+0x130>)
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eba:	4b1c      	ldr	r3, [pc, #112]	@ (8009f2c <xTaskResumeAll+0x120>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1cb      	bne.n	8009e5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ec8:	f000 fc04 	bl	800a6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f40 <xTaskResumeAll+0x134>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d010      	beq.n	8009efa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ed8:	f000 f844 	bl	8009f64 <xTaskIncrementTick>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ee2:	4b16      	ldr	r3, [pc, #88]	@ (8009f3c <xTaskResumeAll+0x130>)
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f1      	bne.n	8009ed8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ef4:	4b12      	ldr	r3, [pc, #72]	@ (8009f40 <xTaskResumeAll+0x134>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009efa:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <xTaskResumeAll+0x130>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f02:	2301      	movs	r3, #1
 8009f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f06:	4b0f      	ldr	r3, [pc, #60]	@ (8009f44 <xTaskResumeAll+0x138>)
 8009f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f16:	f7fe fe41 	bl	8008b9c <vPortExitCritical>

	return xAlreadyYielded;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	2000300c 	.word	0x2000300c
 8009f28:	20002fe4 	.word	0x20002fe4
 8009f2c:	20002fa4 	.word	0x20002fa4
 8009f30:	20002fec 	.word	0x20002fec
 8009f34:	20002b14 	.word	0x20002b14
 8009f38:	20002b10 	.word	0x20002b10
 8009f3c:	20002ff8 	.word	0x20002ff8
 8009f40:	20002ff4 	.word	0x20002ff4
 8009f44:	e000ed04 	.word	0xe000ed04

08009f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <xTaskGetTickCount+0x18>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f54:	687b      	ldr	r3, [r7, #4]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bc80      	pop	{r7}
 8009f5e:	4770      	bx	lr
 8009f60:	20002fe8 	.word	0x20002fe8

08009f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f6e:	4b4f      	ldr	r3, [pc, #316]	@ (800a0ac <xTaskIncrementTick+0x148>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f040 8090 	bne.w	800a098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f78:	4b4d      	ldr	r3, [pc, #308]	@ (800a0b0 <xTaskIncrementTick+0x14c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f80:	4a4b      	ldr	r2, [pc, #300]	@ (800a0b0 <xTaskIncrementTick+0x14c>)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d121      	bne.n	8009fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f8c:	4b49      	ldr	r3, [pc, #292]	@ (800a0b4 <xTaskIncrementTick+0x150>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	603b      	str	r3, [r7, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <xTaskIncrementTick+0x46>
 8009fae:	4b41      	ldr	r3, [pc, #260]	@ (800a0b4 <xTaskIncrementTick+0x150>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	4b40      	ldr	r3, [pc, #256]	@ (800a0b8 <xTaskIncrementTick+0x154>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a3e      	ldr	r2, [pc, #248]	@ (800a0b4 <xTaskIncrementTick+0x150>)
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	4a3e      	ldr	r2, [pc, #248]	@ (800a0b8 <xTaskIncrementTick+0x154>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	4b3e      	ldr	r3, [pc, #248]	@ (800a0bc <xTaskIncrementTick+0x158>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	4a3c      	ldr	r2, [pc, #240]	@ (800a0bc <xTaskIncrementTick+0x158>)
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	f000 fb82 	bl	800a6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fd0:	4b3b      	ldr	r3, [pc, #236]	@ (800a0c0 <xTaskIncrementTick+0x15c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d349      	bcc.n	800a06e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fda:	4b36      	ldr	r3, [pc, #216]	@ (800a0b4 <xTaskIncrementTick+0x150>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d104      	bne.n	8009fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe4:	4b36      	ldr	r3, [pc, #216]	@ (800a0c0 <xTaskIncrementTick+0x15c>)
 8009fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fea:	601a      	str	r2, [r3, #0]
					break;
 8009fec:	e03f      	b.n	800a06e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fee:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <xTaskIncrementTick+0x150>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d203      	bcs.n	800a00e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a006:	4a2e      	ldr	r2, [pc, #184]	@ (800a0c0 <xTaskIncrementTick+0x15c>)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a00c:	e02f      	b.n	800a06e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	3304      	adds	r3, #4
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fc78 	bl	8008908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	3318      	adds	r3, #24
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fc6f 	bl	8008908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02e:	4b25      	ldr	r3, [pc, #148]	@ (800a0c4 <xTaskIncrementTick+0x160>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d903      	bls.n	800a03e <xTaskIncrementTick+0xda>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	4a22      	ldr	r2, [pc, #136]	@ (800a0c4 <xTaskIncrementTick+0x160>)
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4a1f      	ldr	r2, [pc, #124]	@ (800a0c8 <xTaskIncrementTick+0x164>)
 800a04c:	441a      	add	r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	3304      	adds	r3, #4
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f7fe fbfc 	bl	8008852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0cc <xTaskIncrementTick+0x168>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a064:	429a      	cmp	r2, r3
 800a066:	d3b8      	bcc.n	8009fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a068:	2301      	movs	r3, #1
 800a06a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a06c:	e7b5      	b.n	8009fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a06e:	4b17      	ldr	r3, [pc, #92]	@ (800a0cc <xTaskIncrementTick+0x168>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a074:	4914      	ldr	r1, [pc, #80]	@ (800a0c8 <xTaskIncrementTick+0x164>)
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d901      	bls.n	800a08a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a086:	2301      	movs	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a08a:	4b11      	ldr	r3, [pc, #68]	@ (800a0d0 <xTaskIncrementTick+0x16c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	617b      	str	r3, [r7, #20]
 800a096:	e004      	b.n	800a0a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a098:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d4 <xTaskIncrementTick+0x170>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	4a0d      	ldr	r2, [pc, #52]	@ (800a0d4 <xTaskIncrementTick+0x170>)
 800a0a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	2000300c 	.word	0x2000300c
 800a0b0:	20002fe8 	.word	0x20002fe8
 800a0b4:	20002f9c 	.word	0x20002f9c
 800a0b8:	20002fa0 	.word	0x20002fa0
 800a0bc:	20002ffc 	.word	0x20002ffc
 800a0c0:	20003004 	.word	0x20003004
 800a0c4:	20002fec 	.word	0x20002fec
 800a0c8:	20002b14 	.word	0x20002b14
 800a0cc:	20002b10 	.word	0x20002b10
 800a0d0:	20002ff8 	.word	0x20002ff8
 800a0d4:	20002ff4 	.word	0x20002ff4

0800a0d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0de:	4b2a      	ldr	r3, [pc, #168]	@ (800a188 <vTaskSwitchContext+0xb0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0e6:	4b29      	ldr	r3, [pc, #164]	@ (800a18c <vTaskSwitchContext+0xb4>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0ec:	e047      	b.n	800a17e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a0ee:	4b27      	ldr	r3, [pc, #156]	@ (800a18c <vTaskSwitchContext+0xb4>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f4:	4b26      	ldr	r3, [pc, #152]	@ (800a190 <vTaskSwitchContext+0xb8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	e011      	b.n	800a120 <vTaskSwitchContext+0x48>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10b      	bne.n	800a11a <vTaskSwitchContext+0x42>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	607b      	str	r3, [r7, #4]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <vTaskSwitchContext+0x3e>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	491c      	ldr	r1, [pc, #112]	@ (800a194 <vTaskSwitchContext+0xbc>)
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0e3      	beq.n	800a0fc <vTaskSwitchContext+0x24>
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4a15      	ldr	r2, [pc, #84]	@ (800a194 <vTaskSwitchContext+0xbc>)
 800a140:	4413      	add	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	3308      	adds	r3, #8
 800a156:	429a      	cmp	r2, r3
 800a158:	d104      	bne.n	800a164 <vTaskSwitchContext+0x8c>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	605a      	str	r2, [r3, #4]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	4a0b      	ldr	r2, [pc, #44]	@ (800a198 <vTaskSwitchContext+0xc0>)
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	4a08      	ldr	r2, [pc, #32]	@ (800a190 <vTaskSwitchContext+0xb8>)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a174:	4b08      	ldr	r3, [pc, #32]	@ (800a198 <vTaskSwitchContext+0xc0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3354      	adds	r3, #84	@ 0x54
 800a17a:	4a08      	ldr	r2, [pc, #32]	@ (800a19c <vTaskSwitchContext+0xc4>)
 800a17c:	6013      	str	r3, [r2, #0]
}
 800a17e:	bf00      	nop
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr
 800a188:	2000300c 	.word	0x2000300c
 800a18c:	20002ff8 	.word	0x20002ff8
 800a190:	20002fec 	.word	0x20002fec
 800a194:	20002b14 	.word	0x20002b14
 800a198:	20002b10 	.word	0x20002b10
 800a19c:	20000180 	.word	0x20000180

0800a1a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10b      	bne.n	800a1c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60fb      	str	r3, [r7, #12]
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1c8:	4b07      	ldr	r3, [pc, #28]	@ (800a1e8 <vTaskPlaceOnEventList+0x48>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3318      	adds	r3, #24
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fe fb61 	bl	8008898 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	6838      	ldr	r0, [r7, #0]
 800a1da:	f000 fb41 	bl	800a860 <prvAddCurrentTaskToDelayedList>
}
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20002b10 	.word	0x20002b10

0800a1ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10b      	bne.n	800a216 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	617b      	str	r3, [r7, #20]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a216:	4b12      	ldr	r3, [pc, #72]	@ (800a260 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10b      	bne.n	800a236 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	613b      	str	r3, [r7, #16]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a236:	4b0b      	ldr	r3, [pc, #44]	@ (800a264 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a240:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a242:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3318      	adds	r3, #24
 800a248:	4619      	mov	r1, r3
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7fe fb01 	bl	8008852 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a250:	2101      	movs	r1, #1
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fb04 	bl	800a860 <prvAddCurrentTaskToDelayedList>
}
 800a258:	bf00      	nop
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	2000300c 	.word	0x2000300c
 800a264:	20002b10 	.word	0x20002b10

0800a268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	617b      	str	r3, [r7, #20]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vTaskPlaceOnEventListRestricted+0x54>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3318      	adds	r3, #24
 800a298:	4619      	mov	r1, r3
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7fe fad9 	bl	8008852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	68b8      	ldr	r0, [r7, #8]
 800a2b0:	f000 fad6 	bl	800a860 <prvAddCurrentTaskToDelayedList>
	}
 800a2b4:	bf00      	nop
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20002b10 	.word	0x20002b10

0800a2c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10b      	bne.n	800a2ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	60fb      	str	r3, [r7, #12]
}
 800a2e8:	bf00      	nop
 800a2ea:	bf00      	nop
 800a2ec:	e7fd      	b.n	800a2ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	3318      	adds	r3, #24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fb08 	bl	8008908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a370 <xTaskRemoveFromEventList+0xb0>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11d      	bne.n	800a33c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	3304      	adds	r3, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe faff 	bl	8008908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a30e:	4b19      	ldr	r3, [pc, #100]	@ (800a374 <xTaskRemoveFromEventList+0xb4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d903      	bls.n	800a31e <xTaskRemoveFromEventList+0x5e>
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31a:	4a16      	ldr	r2, [pc, #88]	@ (800a374 <xTaskRemoveFromEventList+0xb4>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4a13      	ldr	r2, [pc, #76]	@ (800a378 <xTaskRemoveFromEventList+0xb8>)
 800a32c:	441a      	add	r2, r3
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe fa8c 	bl	8008852 <vListInsertEnd>
 800a33a:	e005      	b.n	800a348 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	3318      	adds	r3, #24
 800a340:	4619      	mov	r1, r3
 800a342:	480e      	ldr	r0, [pc, #56]	@ (800a37c <xTaskRemoveFromEventList+0xbc>)
 800a344:	f7fe fa85 	bl	8008852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34c:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <xTaskRemoveFromEventList+0xc0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a352:	429a      	cmp	r2, r3
 800a354:	d905      	bls.n	800a362 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a35a:	4b0a      	ldr	r3, [pc, #40]	@ (800a384 <xTaskRemoveFromEventList+0xc4>)
 800a35c:	2201      	movs	r2, #1
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	e001      	b.n	800a366 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a366:	697b      	ldr	r3, [r7, #20]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	2000300c 	.word	0x2000300c
 800a374:	20002fec 	.word	0x20002fec
 800a378:	20002b14 	.word	0x20002b14
 800a37c:	20002fa4 	.word	0x20002fa4
 800a380:	20002b10 	.word	0x20002b10
 800a384:	20002ff8 	.word	0x20002ff8

0800a388 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a392:	4b2a      	ldr	r3, [pc, #168]	@ (800a43c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	613b      	str	r3, [r7, #16]
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	e7fd      	b.n	800a3ae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	60fb      	str	r3, [r7, #12]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7fe fa91 	bl	8008908 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fa8c 	bl	8008908 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f4:	4b12      	ldr	r3, [pc, #72]	@ (800a440 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d903      	bls.n	800a404 <vTaskRemoveFromUnorderedEventList+0x7c>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	4a0f      	ldr	r2, [pc, #60]	@ (800a440 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4a0c      	ldr	r2, [pc, #48]	@ (800a444 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a412:	441a      	add	r2, r3
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f7fe fa19 	bl	8008852 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a424:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d902      	bls.n	800a434 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a42e:	4b07      	ldr	r3, [pc, #28]	@ (800a44c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a430:	2201      	movs	r2, #1
 800a432:	601a      	str	r2, [r3, #0]
	}
}
 800a434:	bf00      	nop
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	2000300c 	.word	0x2000300c
 800a440:	20002fec 	.word	0x20002fec
 800a444:	20002b14 	.word	0x20002b14
 800a448:	20002b10 	.word	0x20002b10
 800a44c:	20002ff8 	.word	0x20002ff8

0800a450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <vTaskInternalSetTimeOutState+0x24>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a460:	4b05      	ldr	r3, [pc, #20]	@ (800a478 <vTaskInternalSetTimeOutState+0x28>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	605a      	str	r2, [r3, #4]
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20002ffc 	.word	0x20002ffc
 800a478:	20002fe8 	.word	0x20002fe8

0800a47c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10b      	bne.n	800a4a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	613b      	str	r3, [r7, #16]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	60fb      	str	r3, [r7, #12]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a4c2:	f7fe fb3b 	bl	8008b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a53c <xTaskCheckForTimeOut+0xc0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d102      	bne.n	800a4e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e023      	b.n	800a52e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <xTaskCheckForTimeOut+0xc4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d007      	beq.n	800a502 <xTaskCheckForTimeOut+0x86>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d302      	bcc.n	800a502 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	e015      	b.n	800a52e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d20b      	bcs.n	800a524 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff ff99 	bl	800a450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a51e:	2300      	movs	r3, #0
 800a520:	61fb      	str	r3, [r7, #28]
 800a522:	e004      	b.n	800a52e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a52e:	f7fe fb35 	bl	8008b9c <vPortExitCritical>

	return xReturn;
 800a532:	69fb      	ldr	r3, [r7, #28]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20002fe8 	.word	0x20002fe8
 800a540:	20002ffc 	.word	0x20002ffc

0800a544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a548:	4b03      	ldr	r3, [pc, #12]	@ (800a558 <vTaskMissedYield+0x14>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
}
 800a54e:	bf00      	nop
 800a550:	46bd      	mov	sp, r7
 800a552:	bc80      	pop	{r7}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	20002ff8 	.word	0x20002ff8

0800a55c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a564:	f000 f852 	bl	800a60c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a568:	4b06      	ldr	r3, [pc, #24]	@ (800a584 <prvIdleTask+0x28>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d9f9      	bls.n	800a564 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a570:	4b05      	ldr	r3, [pc, #20]	@ (800a588 <prvIdleTask+0x2c>)
 800a572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a580:	e7f0      	b.n	800a564 <prvIdleTask+0x8>
 800a582:	bf00      	nop
 800a584:	20002b14 	.word	0x20002b14
 800a588:	e000ed04 	.word	0xe000ed04

0800a58c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a592:	2300      	movs	r3, #0
 800a594:	607b      	str	r3, [r7, #4]
 800a596:	e00c      	b.n	800a5b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4a12      	ldr	r2, [pc, #72]	@ (800a5ec <prvInitialiseTaskLists+0x60>)
 800a5a4:	4413      	add	r3, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe f928 	bl	80087fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b37      	cmp	r3, #55	@ 0x37
 800a5b6:	d9ef      	bls.n	800a598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5b8:	480d      	ldr	r0, [pc, #52]	@ (800a5f0 <prvInitialiseTaskLists+0x64>)
 800a5ba:	f7fe f91f 	bl	80087fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5be:	480d      	ldr	r0, [pc, #52]	@ (800a5f4 <prvInitialiseTaskLists+0x68>)
 800a5c0:	f7fe f91c 	bl	80087fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5c4:	480c      	ldr	r0, [pc, #48]	@ (800a5f8 <prvInitialiseTaskLists+0x6c>)
 800a5c6:	f7fe f919 	bl	80087fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ca:	480c      	ldr	r0, [pc, #48]	@ (800a5fc <prvInitialiseTaskLists+0x70>)
 800a5cc:	f7fe f916 	bl	80087fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5d0:	480b      	ldr	r0, [pc, #44]	@ (800a600 <prvInitialiseTaskLists+0x74>)
 800a5d2:	f7fe f913 	bl	80087fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a604 <prvInitialiseTaskLists+0x78>)
 800a5d8:	4a05      	ldr	r2, [pc, #20]	@ (800a5f0 <prvInitialiseTaskLists+0x64>)
 800a5da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a608 <prvInitialiseTaskLists+0x7c>)
 800a5de:	4a05      	ldr	r2, [pc, #20]	@ (800a5f4 <prvInitialiseTaskLists+0x68>)
 800a5e0:	601a      	str	r2, [r3, #0]
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20002b14 	.word	0x20002b14
 800a5f0:	20002f74 	.word	0x20002f74
 800a5f4:	20002f88 	.word	0x20002f88
 800a5f8:	20002fa4 	.word	0x20002fa4
 800a5fc:	20002fb8 	.word	0x20002fb8
 800a600:	20002fd0 	.word	0x20002fd0
 800a604:	20002f9c 	.word	0x20002f9c
 800a608:	20002fa0 	.word	0x20002fa0

0800a60c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a612:	e019      	b.n	800a648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a614:	f7fe fa92 	bl	8008b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a618:	4b10      	ldr	r3, [pc, #64]	@ (800a65c <prvCheckTasksWaitingTermination+0x50>)
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3304      	adds	r3, #4
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe f96f 	bl	8008908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <prvCheckTasksWaitingTermination+0x54>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3b01      	subs	r3, #1
 800a630:	4a0b      	ldr	r2, [pc, #44]	@ (800a660 <prvCheckTasksWaitingTermination+0x54>)
 800a632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a634:	4b0b      	ldr	r3, [pc, #44]	@ (800a664 <prvCheckTasksWaitingTermination+0x58>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3b01      	subs	r3, #1
 800a63a:	4a0a      	ldr	r2, [pc, #40]	@ (800a664 <prvCheckTasksWaitingTermination+0x58>)
 800a63c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a63e:	f7fe faad 	bl	8008b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f810 	bl	800a668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a648:	4b06      	ldr	r3, [pc, #24]	@ (800a664 <prvCheckTasksWaitingTermination+0x58>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e1      	bne.n	800a614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20002fb8 	.word	0x20002fb8
 800a660:	20002fe4 	.word	0x20002fe4
 800a664:	20002fcc 	.word	0x20002fcc

0800a668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3354      	adds	r3, #84	@ 0x54
 800a674:	4618      	mov	r0, r3
 800a676:	f002 ff7d 	bl	800d574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a680:	2b00      	cmp	r3, #0
 800a682:	d108      	bne.n	800a696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fd ff99 	bl	80085c0 <vPortFree>
				vPortFree( pxTCB );
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7fd ff96 	bl	80085c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a694:	e019      	b.n	800a6ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d103      	bne.n	800a6a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fd ff8d 	bl	80085c0 <vPortFree>
	}
 800a6a6:	e010      	b.n	800a6ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d00b      	beq.n	800a6ca <prvDeleteTCB+0x62>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60fb      	str	r3, [r7, #12]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <prvDeleteTCB+0x5e>
	}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <prvResetNextTaskUnblockTime+0x38>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a710 <prvResetNextTaskUnblockTime+0x3c>)
 800a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6ec:	e008      	b.n	800a700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ee:	4b07      	ldr	r3, [pc, #28]	@ (800a70c <prvResetNextTaskUnblockTime+0x38>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	4a04      	ldr	r2, [pc, #16]	@ (800a710 <prvResetNextTaskUnblockTime+0x3c>)
 800a6fe:	6013      	str	r3, [r2, #0]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	20002f9c 	.word	0x20002f9c
 800a710:	20003004 	.word	0x20003004

0800a714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a71a:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <xTaskGetSchedulerState+0x34>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a722:	2301      	movs	r3, #1
 800a724:	607b      	str	r3, [r7, #4]
 800a726:	e008      	b.n	800a73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a728:	4b08      	ldr	r3, [pc, #32]	@ (800a74c <xTaskGetSchedulerState+0x38>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a730:	2302      	movs	r3, #2
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e001      	b.n	800a73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a73a:	687b      	ldr	r3, [r7, #4]
	}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	bc80      	pop	{r7}
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20002ff0 	.word	0x20002ff0
 800a74c:	2000300c 	.word	0x2000300c

0800a750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d058      	beq.n	800a818 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a766:	4b2f      	ldr	r3, [pc, #188]	@ (800a824 <xTaskPriorityDisinherit+0xd4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d00b      	beq.n	800a788 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	60fb      	str	r3, [r7, #12]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10b      	bne.n	800a7a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60bb      	str	r3, [r7, #8]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	1e5a      	subs	r2, r3, #1
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d02c      	beq.n	800a818 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d128      	bne.n	800a818 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe f89c 	bl	8008908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a828 <xTaskPriorityDisinherit+0xd8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d903      	bls.n	800a7f8 <xTaskPriorityDisinherit+0xa8>
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a828 <xTaskPriorityDisinherit+0xd8>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4a09      	ldr	r2, [pc, #36]	@ (800a82c <xTaskPriorityDisinherit+0xdc>)
 800a806:	441a      	add	r2, r3
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe f81f 	bl	8008852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a818:	697b      	ldr	r3, [r7, #20]
	}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20002b10 	.word	0x20002b10
 800a828:	20002fec 	.word	0x20002fec
 800a82c:	20002b14 	.word	0x20002b14

0800a830 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a836:	4b09      	ldr	r3, [pc, #36]	@ (800a85c <uxTaskResetEventItemValue+0x2c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a83e:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <uxTaskResetEventItemValue+0x2c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <uxTaskResetEventItemValue+0x2c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a84c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a84e:	687b      	ldr	r3, [r7, #4]
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	20002b10 	.word	0x20002b10

0800a860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a86a:	4b21      	ldr	r3, [pc, #132]	@ (800a8f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a870:	4b20      	ldr	r3, [pc, #128]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3304      	adds	r3, #4
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe f846 	bl	8008908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a882:	d10a      	bne.n	800a89a <prvAddCurrentTaskToDelayedList+0x3a>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a88a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3304      	adds	r3, #4
 800a890:	4619      	mov	r1, r3
 800a892:	4819      	ldr	r0, [pc, #100]	@ (800a8f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a894:	f7fd ffdd 	bl	8008852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a898:	e026      	b.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d209      	bcs.n	800a8c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8b2:	4b12      	ldr	r3, [pc, #72]	@ (800a8fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7fd ffea 	bl	8008898 <vListInsert>
}
 800a8c4:	e010      	b.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a900 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7fd ffe0 	bl	8008898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d202      	bcs.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8e2:	4a08      	ldr	r2, [pc, #32]	@ (800a904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6013      	str	r3, [r2, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20002fe8 	.word	0x20002fe8
 800a8f4:	20002b10 	.word	0x20002b10
 800a8f8:	20002fd0 	.word	0x20002fd0
 800a8fc:	20002fa0 	.word	0x20002fa0
 800a900:	20002f9c 	.word	0x20002f9c
 800a904:	20003004 	.word	0x20003004

0800a908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	@ 0x28
 800a90c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a912:	f000 fb11 	bl	800af38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a916:	4b1d      	ldr	r3, [pc, #116]	@ (800a98c <xTimerCreateTimerTask+0x84>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d021      	beq.n	800a962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a926:	1d3a      	adds	r2, r7, #4
 800a928:	f107 0108 	add.w	r1, r7, #8
 800a92c:	f107 030c 	add.w	r3, r7, #12
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fb69 	bl	8008008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	9202      	str	r2, [sp, #8]
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	2302      	movs	r3, #2
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	2300      	movs	r3, #0
 800a946:	460a      	mov	r2, r1
 800a948:	4911      	ldr	r1, [pc, #68]	@ (800a990 <xTimerCreateTimerTask+0x88>)
 800a94a:	4812      	ldr	r0, [pc, #72]	@ (800a994 <xTimerCreateTimerTask+0x8c>)
 800a94c:	f7fe ffec 	bl	8009928 <xTaskCreateStatic>
 800a950:	4603      	mov	r3, r0
 800a952:	4a11      	ldr	r2, [pc, #68]	@ (800a998 <xTimerCreateTimerTask+0x90>)
 800a954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a956:	4b10      	ldr	r3, [pc, #64]	@ (800a998 <xTimerCreateTimerTask+0x90>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a95e:	2301      	movs	r3, #1
 800a960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	613b      	str	r3, [r7, #16]
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a980:	697b      	ldr	r3, [r7, #20]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20003040 	.word	0x20003040
 800a990:	0800df78 	.word	0x0800df78
 800a994:	0800aad5 	.word	0x0800aad5
 800a998:	20003044 	.word	0x20003044

0800a99c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08a      	sub	sp, #40	@ 0x28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10b      	bne.n	800a9cc <xTimerGenericCommand+0x30>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	623b      	str	r3, [r7, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	bf00      	nop
 800a9ca:	e7fd      	b.n	800a9c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9cc:	4b19      	ldr	r3, [pc, #100]	@ (800aa34 <xTimerGenericCommand+0x98>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d02a      	beq.n	800aa2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2b05      	cmp	r3, #5
 800a9e4:	dc18      	bgt.n	800aa18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9e6:	f7ff fe95 	bl	800a714 <xTaskGetSchedulerState>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d109      	bne.n	800aa04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9f0:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <xTimerGenericCommand+0x98>)
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	f107 0110 	add.w	r1, r7, #16
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9fc:	f7fe fae6 	bl	8008fcc <xQueueGenericSend>
 800aa00:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa02:	e012      	b.n	800aa2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa04:	4b0b      	ldr	r3, [pc, #44]	@ (800aa34 <xTimerGenericCommand+0x98>)
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	f107 0110 	add.w	r1, r7, #16
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f7fe fadc 	bl	8008fcc <xQueueGenericSend>
 800aa14:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa16:	e008      	b.n	800aa2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa18:	4b06      	ldr	r3, [pc, #24]	@ (800aa34 <xTimerGenericCommand+0x98>)
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	f107 0110 	add.w	r1, r7, #16
 800aa20:	2300      	movs	r3, #0
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	f7fe fbd4 	bl	80091d0 <xQueueGenericSendFromISR>
 800aa28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3728      	adds	r7, #40	@ 0x28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20003040 	.word	0x20003040

0800aa38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af02      	add	r7, sp, #8
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa42:	4b23      	ldr	r3, [pc, #140]	@ (800aad0 <prvProcessExpiredTimer+0x98>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fd ff59 	bl	8008908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d023      	beq.n	800aaac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	699a      	ldr	r2, [r3, #24]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	18d1      	adds	r1, r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	6978      	ldr	r0, [r7, #20]
 800aa72:	f000 f8d3 	bl	800ac1c <prvInsertTimerInActiveList>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d020      	beq.n	800aabe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	2300      	movs	r3, #0
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	2100      	movs	r1, #0
 800aa86:	6978      	ldr	r0, [r7, #20]
 800aa88:	f7ff ff88 	bl	800a99c <xTimerGenericCommand>
 800aa8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d114      	bne.n	800aabe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60fb      	str	r3, [r7, #12]
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	e7fd      	b.n	800aaa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aab2:	f023 0301 	bic.w	r3, r3, #1
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	6978      	ldr	r0, [r7, #20]
 800aac4:	4798      	blx	r3
}
 800aac6:	bf00      	nop
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20003038 	.word	0x20003038

0800aad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aadc:	f107 0308 	add.w	r3, r7, #8
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f859 	bl	800ab98 <prvGetNextExpireTime>
 800aae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4619      	mov	r1, r3
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f805 	bl	800aafc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aaf2:	f000 f8d5 	bl	800aca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaf6:	bf00      	nop
 800aaf8:	e7f0      	b.n	800aadc <prvTimerTask+0x8>
	...

0800aafc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab06:	f7ff f973 	bl	8009df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab0a:	f107 0308 	add.w	r3, r7, #8
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f864 	bl	800abdc <prvSampleTimeNow>
 800ab14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d130      	bne.n	800ab7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <prvProcessTimerOrBlockTask+0x3c>
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d806      	bhi.n	800ab38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab2a:	f7ff f96f 	bl	8009e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ff81 	bl	800aa38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab36:	e024      	b.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d008      	beq.n	800ab50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab3e:	4b13      	ldr	r3, [pc, #76]	@ (800ab8c <prvProcessTimerOrBlockTask+0x90>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <prvProcessTimerOrBlockTask+0x50>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e000      	b.n	800ab4e <prvProcessTimerOrBlockTask+0x52>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab50:	4b0f      	ldr	r3, [pc, #60]	@ (800ab90 <prvProcessTimerOrBlockTask+0x94>)
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f7fe feaf 	bl	80098c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab62:	f7ff f953 	bl	8009e0c <xTaskResumeAll>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab6c:	4b09      	ldr	r3, [pc, #36]	@ (800ab94 <prvProcessTimerOrBlockTask+0x98>)
 800ab6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	f3bf 8f6f 	isb	sy
}
 800ab7c:	e001      	b.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab7e:	f7ff f945 	bl	8009e0c <xTaskResumeAll>
}
 800ab82:	bf00      	nop
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2000303c 	.word	0x2000303c
 800ab90:	20003040 	.word	0x20003040
 800ab94:	e000ed04 	.word	0xe000ed04

0800ab98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aba0:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <prvGetNextExpireTime+0x40>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <prvGetNextExpireTime+0x16>
 800abaa:	2201      	movs	r2, #1
 800abac:	e000      	b.n	800abb0 <prvGetNextExpireTime+0x18>
 800abae:	2200      	movs	r2, #0
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abbc:	4b06      	ldr	r3, [pc, #24]	@ (800abd8 <prvGetNextExpireTime+0x40>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e001      	b.n	800abcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abcc:	68fb      	ldr	r3, [r7, #12]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bc80      	pop	{r7}
 800abd6:	4770      	bx	lr
 800abd8:	20003038 	.word	0x20003038

0800abdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abe4:	f7ff f9b0 	bl	8009f48 <xTaskGetTickCount>
 800abe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abea:	4b0b      	ldr	r3, [pc, #44]	@ (800ac18 <prvSampleTimeNow+0x3c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d205      	bcs.n	800ac00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abf4:	f000 f93a 	bl	800ae6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e002      	b.n	800ac06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac06:	4a04      	ldr	r2, [pc, #16]	@ (800ac18 <prvSampleTimeNow+0x3c>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20003048 	.word	0x20003048

0800ac1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d812      	bhi.n	800ac68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d302      	bcc.n	800ac56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	e01b      	b.n	800ac8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac56:	4b10      	ldr	r3, [pc, #64]	@ (800ac98 <prvInsertTimerInActiveList+0x7c>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4610      	mov	r0, r2
 800ac62:	f7fd fe19 	bl	8008898 <vListInsert>
 800ac66:	e012      	b.n	800ac8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d206      	bcs.n	800ac7e <prvInsertTimerInActiveList+0x62>
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d302      	bcc.n	800ac7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	e007      	b.n	800ac8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac7e:	4b07      	ldr	r3, [pc, #28]	@ (800ac9c <prvInsertTimerInActiveList+0x80>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3304      	adds	r3, #4
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fd fe05 	bl	8008898 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac8e:	697b      	ldr	r3, [r7, #20]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	2000303c 	.word	0x2000303c
 800ac9c:	20003038 	.word	0x20003038

0800aca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b08e      	sub	sp, #56	@ 0x38
 800aca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aca6:	e0ce      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da19      	bge.n	800ace2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acae:	1d3b      	adds	r3, r7, #4
 800acb0:	3304      	adds	r3, #4
 800acb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10b      	bne.n	800acd2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61fb      	str	r3, [r7, #28]
}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	e7fd      	b.n	800acce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acd8:	6850      	ldr	r0, [r2, #4]
 800acda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acdc:	6892      	ldr	r2, [r2, #8]
 800acde:	4611      	mov	r1, r2
 800ace0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f2c0 80ae 	blt.w	800ae46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf8:	3304      	adds	r3, #4
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fd fe04 	bl	8008908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad00:	463b      	mov	r3, r7
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff ff6a 	bl	800abdc <prvSampleTimeNow>
 800ad08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b09      	cmp	r3, #9
 800ad0e:	f200 8097 	bhi.w	800ae40 <prvProcessReceivedCommands+0x1a0>
 800ad12:	a201      	add	r2, pc, #4	@ (adr r2, 800ad18 <prvProcessReceivedCommands+0x78>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad41 	.word	0x0800ad41
 800ad1c:	0800ad41 	.word	0x0800ad41
 800ad20:	0800ad41 	.word	0x0800ad41
 800ad24:	0800adb7 	.word	0x0800adb7
 800ad28:	0800adcb 	.word	0x0800adcb
 800ad2c:	0800ae17 	.word	0x0800ae17
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad41 	.word	0x0800ad41
 800ad38:	0800adb7 	.word	0x0800adb7
 800ad3c:	0800adcb 	.word	0x0800adcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	18d1      	adds	r1, r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad60:	f7ff ff5c 	bl	800ac1c <prvInsertTimerInActiveList>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d06c      	beq.n	800ae44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d061      	beq.n	800ae44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	441a      	add	r2, r3
 800ad88:	2300      	movs	r3, #0
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2100      	movs	r1, #0
 800ad90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad92:	f7ff fe03 	bl	800a99c <xTimerGenericCommand>
 800ad96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d152      	bne.n	800ae44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	61bb      	str	r3, [r7, #24]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adbc:	f023 0301 	bic.w	r3, r3, #1
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800adc8:	e03d      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800add0:	f043 0301 	orr.w	r3, r3, #1
 800add4:	b2da      	uxtb	r2, r3
 800add6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	617b      	str	r3, [r7, #20]
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	18d1      	adds	r1, r2, r3
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae10:	f7ff ff04 	bl	800ac1c <prvInsertTimerInActiveList>
					break;
 800ae14:	e017      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae26:	f7fd fbcb 	bl	80085c0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae2a:	e00c      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae32:	f023 0301 	bic.w	r3, r3, #1
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae3e:	e002      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae40:	bf00      	nop
 800ae42:	e000      	b.n	800ae46 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae46:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <prvProcessReceivedCommands+0x1c8>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	1d39      	adds	r1, r7, #4
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fa5c 	bl	800930c <xQueueReceive>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f47f af26 	bne.w	800aca8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	3730      	adds	r7, #48	@ 0x30
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20003040 	.word	0x20003040

0800ae6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae72:	e049      	b.n	800af08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae74:	4b2e      	ldr	r3, [pc, #184]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7e:	4b2c      	ldr	r3, [pc, #176]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fd fd3b 	bl	8008908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d02f      	beq.n	800af08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4413      	add	r3, r2
 800aeb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d90e      	bls.n	800aed8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aec6:	4b1a      	ldr	r3, [pc, #104]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3304      	adds	r3, #4
 800aece:	4619      	mov	r1, r3
 800aed0:	4610      	mov	r0, r2
 800aed2:	f7fd fce1 	bl	8008898 <vListInsert>
 800aed6:	e017      	b.n	800af08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aed8:	2300      	movs	r3, #0
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	2300      	movs	r3, #0
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	2100      	movs	r1, #0
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f7ff fd5a 	bl	800a99c <xTimerGenericCommand>
 800aee8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10b      	bne.n	800af08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	603b      	str	r3, [r7, #0]
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af08:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1b0      	bne.n	800ae74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af12:	4b07      	ldr	r3, [pc, #28]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af18:	4b06      	ldr	r3, [pc, #24]	@ (800af34 <prvSwitchTimerLists+0xc8>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a04      	ldr	r2, [pc, #16]	@ (800af30 <prvSwitchTimerLists+0xc4>)
 800af1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af20:	4a04      	ldr	r2, [pc, #16]	@ (800af34 <prvSwitchTimerLists+0xc8>)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	6013      	str	r3, [r2, #0]
}
 800af26:	bf00      	nop
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20003038 	.word	0x20003038
 800af34:	2000303c 	.word	0x2000303c

0800af38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af3e:	f7fd fdfd 	bl	8008b3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af42:	4b15      	ldr	r3, [pc, #84]	@ (800af98 <prvCheckForValidListAndQueue+0x60>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d120      	bne.n	800af8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af4a:	4814      	ldr	r0, [pc, #80]	@ (800af9c <prvCheckForValidListAndQueue+0x64>)
 800af4c:	f7fd fc56 	bl	80087fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af50:	4813      	ldr	r0, [pc, #76]	@ (800afa0 <prvCheckForValidListAndQueue+0x68>)
 800af52:	f7fd fc53 	bl	80087fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af56:	4b13      	ldr	r3, [pc, #76]	@ (800afa4 <prvCheckForValidListAndQueue+0x6c>)
 800af58:	4a10      	ldr	r2, [pc, #64]	@ (800af9c <prvCheckForValidListAndQueue+0x64>)
 800af5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af5c:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <prvCheckForValidListAndQueue+0x70>)
 800af5e:	4a10      	ldr	r2, [pc, #64]	@ (800afa0 <prvCheckForValidListAndQueue+0x68>)
 800af60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af62:	2300      	movs	r3, #0
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	4b11      	ldr	r3, [pc, #68]	@ (800afac <prvCheckForValidListAndQueue+0x74>)
 800af68:	4a11      	ldr	r2, [pc, #68]	@ (800afb0 <prvCheckForValidListAndQueue+0x78>)
 800af6a:	2110      	movs	r1, #16
 800af6c:	200a      	movs	r0, #10
 800af6e:	f7fd ff51 	bl	8008e14 <xQueueGenericCreateStatic>
 800af72:	4603      	mov	r3, r0
 800af74:	4a08      	ldr	r2, [pc, #32]	@ (800af98 <prvCheckForValidListAndQueue+0x60>)
 800af76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af78:	4b07      	ldr	r3, [pc, #28]	@ (800af98 <prvCheckForValidListAndQueue+0x60>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af80:	4b05      	ldr	r3, [pc, #20]	@ (800af98 <prvCheckForValidListAndQueue+0x60>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	490b      	ldr	r1, [pc, #44]	@ (800afb4 <prvCheckForValidListAndQueue+0x7c>)
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fc72 	bl	8009870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af8c:	f7fd fe06 	bl	8008b9c <vPortExitCritical>
}
 800af90:	bf00      	nop
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20003040 	.word	0x20003040
 800af9c:	20003010 	.word	0x20003010
 800afa0:	20003024 	.word	0x20003024
 800afa4:	20003038 	.word	0x20003038
 800afa8:	2000303c 	.word	0x2000303c
 800afac:	200030ec 	.word	0x200030ec
 800afb0:	2000304c 	.word	0x2000304c
 800afb4:	0800df80 	.word	0x0800df80

0800afb8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08a      	sub	sp, #40	@ 0x28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800afc6:	f06f 0301 	mvn.w	r3, #1
 800afca:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800afd8:	4b06      	ldr	r3, [pc, #24]	@ (800aff4 <xTimerPendFunctionCallFromISR+0x3c>)
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	f107 0114 	add.w	r1, r7, #20
 800afe0:	2300      	movs	r3, #0
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	f7fe f8f4 	bl	80091d0 <xQueueGenericSendFromISR>
 800afe8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800afec:	4618      	mov	r0, r3
 800afee:	3728      	adds	r7, #40	@ 0x28
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20003040 	.word	0x20003040

0800aff8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7c1b      	ldrb	r3, [r3, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d115      	bne.n	800b03c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b014:	2202      	movs	r2, #2
 800b016:	2181      	movs	r1, #129	@ 0x81
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fe2c 	bl	800cc76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b028:	2202      	movs	r2, #2
 800b02a:	2101      	movs	r1, #1
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fe22 	bl	800cc76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b03a:	e012      	b.n	800b062 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b03c:	2340      	movs	r3, #64	@ 0x40
 800b03e:	2202      	movs	r2, #2
 800b040:	2181      	movs	r1, #129	@ 0x81
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 fe17 	bl	800cc76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b04e:	2340      	movs	r3, #64	@ 0x40
 800b050:	2202      	movs	r2, #2
 800b052:	2101      	movs	r1, #1
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f001 fe0e 	bl	800cc76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b062:	2308      	movs	r3, #8
 800b064:	2203      	movs	r2, #3
 800b066:	2182      	movs	r1, #130	@ 0x82
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 fe04 	bl	800cc76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b074:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b078:	f001 ff24 	bl	800cec4 <USBD_static_malloc>
 800b07c:	4602      	mov	r2, r0
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b08e:	2301      	movs	r3, #1
 800b090:	73fb      	strb	r3, [r7, #15]
 800b092:	e026      	b.n	800b0e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7c1b      	ldrb	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fec3 	bl	800ce56 <USBD_LL_PrepareReceive>
 800b0d0:	e007      	b.n	800b0e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d8:	2340      	movs	r3, #64	@ 0x40
 800b0da:	2101      	movs	r1, #1
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 feba 	bl	800ce56 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b0fc:	2181      	movs	r1, #129	@ 0x81
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 fddf 	bl	800ccc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b10a:	2101      	movs	r1, #1
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 fdd8 	bl	800ccc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b11a:	2182      	movs	r1, #130	@ 0x82
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f001 fdd0 	bl	800ccc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00e      	beq.n	800b150 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b142:	4618      	mov	r0, r3
 800b144:	f001 feca 	bl	800cedc <USBD_static_free>
    pdev->pClassData = NULL;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b086      	sub	sp, #24
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b16a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b180:	2b00      	cmp	r3, #0
 800b182:	d039      	beq.n	800b1f8 <USBD_CDC_Setup+0x9e>
 800b184:	2b20      	cmp	r3, #32
 800b186:	d17f      	bne.n	800b288 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	88db      	ldrh	r3, [r3, #6]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d029      	beq.n	800b1e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	b25b      	sxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	da11      	bge.n	800b1be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b1a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	88d2      	ldrh	r2, [r2, #6]
 800b1ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1ae:	6939      	ldr	r1, [r7, #16]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	88db      	ldrh	r3, [r3, #6]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 f9d6 	bl	800c568 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b1bc:	e06b      	b.n	800b296 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	785a      	ldrb	r2, [r3, #1]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	88db      	ldrh	r3, [r3, #6]
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1d4:	6939      	ldr	r1, [r7, #16]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f9f1 	bl	800c5c4 <USBD_CtlPrepareRx>
      break;
 800b1e2:	e058      	b.n	800b296 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	7850      	ldrb	r0, [r2, #1]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	4798      	blx	r3
      break;
 800b1f6:	e04e      	b.n	800b296 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	785b      	ldrb	r3, [r3, #1]
 800b1fc:	2b0b      	cmp	r3, #11
 800b1fe:	d02e      	beq.n	800b25e <USBD_CDC_Setup+0x104>
 800b200:	2b0b      	cmp	r3, #11
 800b202:	dc38      	bgt.n	800b276 <USBD_CDC_Setup+0x11c>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <USBD_CDC_Setup+0xb4>
 800b208:	2b0a      	cmp	r3, #10
 800b20a:	d014      	beq.n	800b236 <USBD_CDC_Setup+0xdc>
 800b20c:	e033      	b.n	800b276 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b214:	2b03      	cmp	r3, #3
 800b216:	d107      	bne.n	800b228 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b218:	f107 030c 	add.w	r3, r7, #12
 800b21c:	2202      	movs	r2, #2
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 f9a1 	bl	800c568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b226:	e02e      	b.n	800b286 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f932 	bl	800c494 <USBD_CtlError>
            ret = USBD_FAIL;
 800b230:	2302      	movs	r3, #2
 800b232:	75fb      	strb	r3, [r7, #23]
          break;
 800b234:	e027      	b.n	800b286 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d107      	bne.n	800b250 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b240:	f107 030f 	add.w	r3, r7, #15
 800b244:	2201      	movs	r2, #1
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 f98d 	bl	800c568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b24e:	e01a      	b.n	800b286 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 f91e 	bl	800c494 <USBD_CtlError>
            ret = USBD_FAIL;
 800b258:	2302      	movs	r3, #2
 800b25a:	75fb      	strb	r3, [r7, #23]
          break;
 800b25c:	e013      	b.n	800b286 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b264:	2b03      	cmp	r3, #3
 800b266:	d00d      	beq.n	800b284 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f912 	bl	800c494 <USBD_CtlError>
            ret = USBD_FAIL;
 800b270:	2302      	movs	r3, #2
 800b272:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b274:	e006      	b.n	800b284 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 f90b 	bl	800c494 <USBD_CtlError>
          ret = USBD_FAIL;
 800b27e:	2302      	movs	r3, #2
 800b280:	75fb      	strb	r3, [r7, #23]
          break;
 800b282:	e000      	b.n	800b286 <USBD_CDC_Setup+0x12c>
          break;
 800b284:	bf00      	nop
      }
      break;
 800b286:	e006      	b.n	800b296 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f001 f902 	bl	800c494 <USBD_CtlError>
      ret = USBD_FAIL;
 800b290:	2302      	movs	r3, #2
 800b292:	75fb      	strb	r3, [r7, #23]
      break;
 800b294:	bf00      	nop
  }

  return ret;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2ba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03a      	beq.n	800b33c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	6879      	ldr	r1, [r7, #4]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	331c      	adds	r3, #28
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d029      	beq.n	800b330 <USBD_CDC_DataIn+0x90>
 800b2dc:	78fa      	ldrb	r2, [r7, #3]
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	440b      	add	r3, r1
 800b2ea:	331c      	adds	r3, #28
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	78f9      	ldrb	r1, [r7, #3]
 800b2f0:	68b8      	ldr	r0, [r7, #8]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	440b      	add	r3, r1
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	4403      	add	r3, r0
 800b2fc:	3320      	adds	r3, #32
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	fbb2 f1f3 	udiv	r1, r2, r3
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d110      	bne.n	800b330 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	331c      	adds	r3, #28
 800b31e:	2200      	movs	r2, #0
 800b320:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b322:	78f9      	ldrb	r1, [r7, #3]
 800b324:	2300      	movs	r3, #0
 800b326:	2200      	movs	r2, #0
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 fd71 	bl	800ce10 <USBD_LL_Transmit>
 800b32e:	e003      	b.n	800b338 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b338:	2300      	movs	r3, #0
 800b33a:	e000      	b.n	800b33e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b33c:	2302      	movs	r3, #2
  }
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b358:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f001 fd9c 	bl	800ce9c <USBD_LL_GetRxDataSize>
 800b364:	4602      	mov	r2, r0
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00d      	beq.n	800b392 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b38a:	4611      	mov	r1, r2
 800b38c:	4798      	blx	r3

    return USBD_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	e000      	b.n	800b394 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b392:	2302      	movs	r3, #2
  }
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d014      	beq.n	800b3e0 <USBD_CDC_EP0_RxReady+0x44>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b3bc:	2bff      	cmp	r3, #255	@ 0xff
 800b3be:	d00f      	beq.n	800b3e0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b3ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b3d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	22ff      	movs	r2, #255	@ 0xff
 800b3dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2243      	movs	r2, #67	@ 0x43
 800b3f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b3fa:	4b03      	ldr	r3, [pc, #12]	@ (800b408 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000098 	.word	0x20000098

0800b40c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2243      	movs	r2, #67	@ 0x43
 800b418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b41a:	4b03      	ldr	r3, [pc, #12]	@ (800b428 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	bc80      	pop	{r7}
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20000054 	.word	0x20000054

0800b42c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2243      	movs	r2, #67	@ 0x43
 800b438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b43a:	4b03      	ldr	r3, [pc, #12]	@ (800b448 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	200000dc 	.word	0x200000dc

0800b44c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	220a      	movs	r2, #10
 800b458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b45a:	4b03      	ldr	r3, [pc, #12]	@ (800b468 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20000010 	.word	0x20000010

0800b46c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b476:	2302      	movs	r3, #2
 800b478:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	bc80      	pop	{r7}
 800b496:	4770      	bx	lr

0800b498 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b4b6:	88fa      	ldrh	r2, [r7, #6]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr

0800b4ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bc80      	pop	{r7}
 800b4ee:	4770      	bx	lr

0800b4f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b506:	2b00      	cmp	r3, #0
 800b508:	d017      	beq.n	800b53a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7c1b      	ldrb	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d109      	bne.n	800b526 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b51c:	2101      	movs	r1, #1
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 fc99 	bl	800ce56 <USBD_LL_PrepareReceive>
 800b524:	e007      	b.n	800b536 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	2101      	movs	r1, #1
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f001 fc90 	bl	800ce56 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	e000      	b.n	800b53c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b53a:	2302      	movs	r3, #2
  }
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b558:	2302      	movs	r3, #2
 800b55a:	e01a      	b.n	800b592 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	79fa      	ldrb	r2, [r7, #7]
 800b588:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f001 fafe 	bl	800cb8c <USBD_LL_Init>

  return USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d006      	beq.n	800b5bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	e001      	b.n	800b5c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b5bc:	2302      	movs	r3, #2
 800b5be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 fb33 	bl	800cc40 <USBD_LL_Start>

  return USBD_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b604:	2302      	movs	r3, #2
 800b606:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00c      	beq.n	800b62c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	78fa      	ldrb	r2, [r7, #3]
 800b61c:	4611      	mov	r1, r2
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	4798      	blx	r3
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	460b      	mov	r3, r1
 800b640:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	4611      	mov	r1, r2
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	4798      	blx	r3

  return USBD_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fed7 	bl	800c422 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	2b02      	cmp	r3, #2
 800b696:	d016      	beq.n	800b6c6 <USBD_LL_SetupStage+0x6a>
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d81c      	bhi.n	800b6d6 <USBD_LL_SetupStage+0x7a>
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <USBD_LL_SetupStage+0x4a>
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d008      	beq.n	800b6b6 <USBD_LL_SetupStage+0x5a>
 800b6a4:	e017      	b.n	800b6d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f9ca 	bl	800ba48 <USBD_StdDevReq>
      break;
 800b6b4:	e01a      	b.n	800b6ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa2c 	bl	800bb1c <USBD_StdItfReq>
      break;
 800b6c4:	e012      	b.n	800b6ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fa6c 	bl	800bbac <USBD_StdEPReq>
      break;
 800b6d4:	e00a      	b.n	800b6ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b6dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fb0b 	bl	800cd00 <USBD_LL_StallEP>
      break;
 800b6ea:	bf00      	nop
  }

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	460b      	mov	r3, r1
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d14b      	bne.n	800b7a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b710:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d134      	bne.n	800b786 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	429a      	cmp	r2, r3
 800b726:	d919      	bls.n	800b75c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	1ad2      	subs	r2, r2, r3
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b73e:	429a      	cmp	r2, r3
 800b740:	d203      	bcs.n	800b74a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b746:	b29b      	uxth	r3, r3
 800b748:	e002      	b.n	800b750 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b74e:	b29b      	uxth	r3, r3
 800b750:	461a      	mov	r2, r3
 800b752:	6879      	ldr	r1, [r7, #4]
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 ff53 	bl	800c600 <USBD_CtlContinueRx>
 800b75a:	e038      	b.n	800b7ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00a      	beq.n	800b77e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d105      	bne.n	800b77e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f000 ff50 	bl	800c624 <USBD_CtlSendStatus>
 800b784:	e023      	b.n	800b7ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b78c:	2b05      	cmp	r3, #5
 800b78e:	d11e      	bne.n	800b7ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b798:	2100      	movs	r1, #0
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f001 fab0 	bl	800cd00 <USBD_LL_StallEP>
 800b7a0:	e015      	b.n	800b7ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00d      	beq.n	800b7ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d108      	bne.n	800b7ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	7afa      	ldrb	r2, [r7, #11]
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	4798      	blx	r3
 800b7c8:	e001      	b.n	800b7ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e000      	b.n	800b7d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d17f      	bne.n	800b8ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3314      	adds	r3, #20
 800b7f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d15c      	bne.n	800b8b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	429a      	cmp	r2, r3
 800b806:	d915      	bls.n	800b834 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	1ad2      	subs	r2, r2, r3
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	461a      	mov	r2, r3
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 febd 	bl	800c5a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b826:	2300      	movs	r3, #0
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f001 fb12 	bl	800ce56 <USBD_LL_PrepareReceive>
 800b832:	e04e      	b.n	800b8d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	6912      	ldr	r2, [r2, #16]
 800b83c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b840:	fb01 f202 	mul.w	r2, r1, r2
 800b844:	1a9b      	subs	r3, r3, r2
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11c      	bne.n	800b884 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b852:	429a      	cmp	r2, r3
 800b854:	d316      	bcc.n	800b884 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	689a      	ldr	r2, [r3, #8]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b860:	429a      	cmp	r2, r3
 800b862:	d20f      	bcs.n	800b884 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b864:	2200      	movs	r2, #0
 800b866:	2100      	movs	r1, #0
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 fe99 	bl	800c5a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b876:	2300      	movs	r3, #0
 800b878:	2200      	movs	r2, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f001 faea 	bl	800ce56 <USBD_LL_PrepareReceive>
 800b882:	e026      	b.n	800b8d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00a      	beq.n	800b8a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b896:	2b03      	cmp	r3, #3
 800b898:	d105      	bne.n	800b8a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b8a6:	2180      	movs	r1, #128	@ 0x80
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f001 fa29 	bl	800cd00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 fecb 	bl	800c64a <USBD_CtlReceiveStatus>
 800b8b4:	e00d      	b.n	800b8d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	d004      	beq.n	800b8ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d103      	bne.n	800b8d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b8ca:	2180      	movs	r1, #128	@ 0x80
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f001 fa17 	bl	800cd00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d11d      	bne.n	800b918 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fe81 	bl	800b5e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8ea:	e015      	b.n	800b918 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00d      	beq.n	800b914 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d108      	bne.n	800b914 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	7afa      	ldrb	r2, [r7, #11]
 800b90c:	4611      	mov	r1, r2
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	4798      	blx	r3
 800b912:	e001      	b.n	800b918 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b914:	2302      	movs	r3, #2
 800b916:	e000      	b.n	800b91a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b92a:	2340      	movs	r3, #64	@ 0x40
 800b92c:	2200      	movs	r2, #0
 800b92e:	2100      	movs	r1, #0
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 f9a0 	bl	800cc76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2240      	movs	r2, #64	@ 0x40
 800b942:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b946:	2340      	movs	r3, #64	@ 0x40
 800b948:	2200      	movs	r2, #0
 800b94a:	2180      	movs	r1, #128	@ 0x80
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 f992 	bl	800cc76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2240      	movs	r2, #64	@ 0x40
 800b95c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6852      	ldr	r2, [r2, #4]
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	4611      	mov	r1, r2
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
  }

  return USBD_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	78fa      	ldrb	r2, [r7, #3]
 800b9b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bc80      	pop	{r7}
 800b9c0:	4770      	bx	lr

0800b9c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2204      	movs	r2, #4
 800b9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bc80      	pop	{r7}
 800b9e8:	4770      	bx	lr

0800b9ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9f8:	2b04      	cmp	r3, #4
 800b9fa:	d105      	bne.n	800ba08 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bc80      	pop	{r7}
 800ba12:	4770      	bx	lr

0800ba14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d10b      	bne.n	800ba3e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d005      	beq.n	800ba3e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba5e:	2b40      	cmp	r3, #64	@ 0x40
 800ba60:	d005      	beq.n	800ba6e <USBD_StdDevReq+0x26>
 800ba62:	2b40      	cmp	r3, #64	@ 0x40
 800ba64:	d84f      	bhi.n	800bb06 <USBD_StdDevReq+0xbe>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <USBD_StdDevReq+0x36>
 800ba6a:	2b20      	cmp	r3, #32
 800ba6c:	d14b      	bne.n	800bb06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	4798      	blx	r3
      break;
 800ba7c:	e048      	b.n	800bb10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	2b09      	cmp	r3, #9
 800ba84:	d839      	bhi.n	800bafa <USBD_StdDevReq+0xb2>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <USBD_StdDevReq+0x44>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800badd 	.word	0x0800badd
 800ba90:	0800baf1 	.word	0x0800baf1
 800ba94:	0800bafb 	.word	0x0800bafb
 800ba98:	0800bae7 	.word	0x0800bae7
 800ba9c:	0800bafb 	.word	0x0800bafb
 800baa0:	0800babf 	.word	0x0800babf
 800baa4:	0800bab5 	.word	0x0800bab5
 800baa8:	0800bafb 	.word	0x0800bafb
 800baac:	0800bad3 	.word	0x0800bad3
 800bab0:	0800bac9 	.word	0x0800bac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9dc 	bl	800be74 <USBD_GetDescriptor>
          break;
 800babc:	e022      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fb3f 	bl	800c144 <USBD_SetAddress>
          break;
 800bac6:	e01d      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fb7e 	bl	800c1cc <USBD_SetConfig>
          break;
 800bad0:	e018      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fc07 	bl	800c2e8 <USBD_GetConfig>
          break;
 800bada:	e013      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fc37 	bl	800c352 <USBD_GetStatus>
          break;
 800bae4:	e00e      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fc65 	bl	800c3b8 <USBD_SetFeature>
          break;
 800baee:	e009      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fc74 	bl	800c3e0 <USBD_ClrFeature>
          break;
 800baf8:	e004      	b.n	800bb04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fcc9 	bl	800c494 <USBD_CtlError>
          break;
 800bb02:	bf00      	nop
      }
      break;
 800bb04:	e004      	b.n	800bb10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fcc3 	bl	800c494 <USBD_CtlError>
      break;
 800bb0e:	bf00      	nop
  }

  return ret;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop

0800bb1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb32:	2b40      	cmp	r3, #64	@ 0x40
 800bb34:	d005      	beq.n	800bb42 <USBD_StdItfReq+0x26>
 800bb36:	2b40      	cmp	r3, #64	@ 0x40
 800bb38:	d82e      	bhi.n	800bb98 <USBD_StdItfReq+0x7c>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <USBD_StdItfReq+0x26>
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d12a      	bne.n	800bb98 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d81d      	bhi.n	800bb8a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	889b      	ldrh	r3, [r3, #4]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d813      	bhi.n	800bb80 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	4798      	blx	r3
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	88db      	ldrh	r3, [r3, #6]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d110      	bne.n	800bb94 <USBD_StdItfReq+0x78>
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10d      	bne.n	800bb94 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd53 	bl	800c624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb7e:	e009      	b.n	800bb94 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fc86 	bl	800c494 <USBD_CtlError>
          break;
 800bb88:	e004      	b.n	800bb94 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fc81 	bl	800c494 <USBD_CtlError>
          break;
 800bb92:	e000      	b.n	800bb96 <USBD_StdItfReq+0x7a>
          break;
 800bb94:	bf00      	nop
      }
      break;
 800bb96:	e004      	b.n	800bba2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fc7a 	bl	800c494 <USBD_CtlError>
      break;
 800bba0:	bf00      	nop
  }

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	889b      	ldrh	r3, [r3, #4]
 800bbbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbc8:	2b40      	cmp	r3, #64	@ 0x40
 800bbca:	d007      	beq.n	800bbdc <USBD_StdEPReq+0x30>
 800bbcc:	2b40      	cmp	r3, #64	@ 0x40
 800bbce:	f200 8146 	bhi.w	800be5e <USBD_StdEPReq+0x2b2>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <USBD_StdEPReq+0x40>
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	f040 8141 	bne.w	800be5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	4798      	blx	r3
      break;
 800bbea:	e13d      	b.n	800be68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d10a      	bne.n	800bc0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	e12d      	b.n	800be6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d007      	beq.n	800bc26 <USBD_StdEPReq+0x7a>
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	f300 811b 	bgt.w	800be52 <USBD_StdEPReq+0x2a6>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d072      	beq.n	800bd06 <USBD_StdEPReq+0x15a>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d03a      	beq.n	800bc9a <USBD_StdEPReq+0xee>
 800bc24:	e115      	b.n	800be52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d002      	beq.n	800bc36 <USBD_StdEPReq+0x8a>
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d015      	beq.n	800bc60 <USBD_StdEPReq+0xb4>
 800bc34:	e02b      	b.n	800bc8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00c      	beq.n	800bc56 <USBD_StdEPReq+0xaa>
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	2b80      	cmp	r3, #128	@ 0x80
 800bc40:	d009      	beq.n	800bc56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f001 f85a 	bl	800cd00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bc4c:	2180      	movs	r1, #128	@ 0x80
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 f856 	bl	800cd00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc54:	e020      	b.n	800bc98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fc1b 	bl	800c494 <USBD_CtlError>
              break;
 800bc5e:	e01b      	b.n	800bc98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10e      	bne.n	800bc86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00b      	beq.n	800bc86 <USBD_StdEPReq+0xda>
 800bc6e:	7bbb      	ldrb	r3, [r7, #14]
 800bc70:	2b80      	cmp	r3, #128	@ 0x80
 800bc72:	d008      	beq.n	800bc86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	88db      	ldrh	r3, [r3, #6]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f001 f83d 	bl	800cd00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fccc 	bl	800c624 <USBD_CtlSendStatus>

              break;
 800bc8c:	e004      	b.n	800bc98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fbff 	bl	800c494 <USBD_CtlError>
              break;
 800bc96:	bf00      	nop
          }
          break;
 800bc98:	e0e0      	b.n	800be5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d002      	beq.n	800bcaa <USBD_StdEPReq+0xfe>
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d015      	beq.n	800bcd4 <USBD_StdEPReq+0x128>
 800bca8:	e026      	b.n	800bcf8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00c      	beq.n	800bcca <USBD_StdEPReq+0x11e>
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b80      	cmp	r3, #128	@ 0x80
 800bcb4:	d009      	beq.n	800bcca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 f820 	bl	800cd00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bcc0:	2180      	movs	r1, #128	@ 0x80
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f001 f81c 	bl	800cd00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcc8:	e01c      	b.n	800bd04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fbe1 	bl	800c494 <USBD_CtlError>
              break;
 800bcd2:	e017      	b.n	800bd04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	885b      	ldrh	r3, [r3, #2]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d112      	bne.n	800bd02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d004      	beq.n	800bcf0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f001 f827 	bl	800cd3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fc97 	bl	800c624 <USBD_CtlSendStatus>
              }
              break;
 800bcf6:	e004      	b.n	800bd02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fbca 	bl	800c494 <USBD_CtlError>
              break;
 800bd00:	e000      	b.n	800bd04 <USBD_StdEPReq+0x158>
              break;
 800bd02:	bf00      	nop
          }
          break;
 800bd04:	e0aa      	b.n	800be5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d002      	beq.n	800bd16 <USBD_StdEPReq+0x16a>
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d032      	beq.n	800bd7a <USBD_StdEPReq+0x1ce>
 800bd14:	e097      	b.n	800be46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d007      	beq.n	800bd2c <USBD_StdEPReq+0x180>
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b80      	cmp	r3, #128	@ 0x80
 800bd20:	d004      	beq.n	800bd2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fbb5 	bl	800c494 <USBD_CtlError>
                break;
 800bd2a:	e091      	b.n	800be50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	da0b      	bge.n	800bd4c <USBD_StdEPReq+0x1a0>
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	3310      	adds	r3, #16
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	4413      	add	r3, r2
 800bd48:	3304      	adds	r3, #4
 800bd4a:	e00b      	b.n	800bd64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4413      	add	r3, r2
 800bd62:	3304      	adds	r3, #4
 800bd64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fbf8 	bl	800c568 <USBD_CtlSendData>
              break;
 800bd78:	e06a      	b.n	800be50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da11      	bge.n	800bda6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	f003 020f 	and.w	r2, r3, #15
 800bd88:	6879      	ldr	r1, [r7, #4]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	440b      	add	r3, r1
 800bd94:	3318      	adds	r3, #24
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d117      	bne.n	800bdcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fb78 	bl	800c494 <USBD_CtlError>
                  break;
 800bda4:	e054      	b.n	800be50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	f003 020f 	and.w	r2, r3, #15
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d104      	bne.n	800bdcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fb65 	bl	800c494 <USBD_CtlError>
                  break;
 800bdca:	e041      	b.n	800be50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	da0b      	bge.n	800bdec <USBD_StdEPReq+0x240>
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	3310      	adds	r3, #16
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	4413      	add	r3, r2
 800bde8:	3304      	adds	r3, #4
 800bdea:	e00b      	b.n	800be04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	3304      	adds	r3, #4
 800be04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <USBD_StdEPReq+0x266>
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	2b80      	cmp	r3, #128	@ 0x80
 800be10:	d103      	bne.n	800be1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e00e      	b.n	800be38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 ffac 	bl	800cd7c <USBD_LL_IsStallEP>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2201      	movs	r2, #1
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	e002      	b.n	800be38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	2202      	movs	r2, #2
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fb92 	bl	800c568 <USBD_CtlSendData>
              break;
 800be44:	e004      	b.n	800be50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fb23 	bl	800c494 <USBD_CtlError>
              break;
 800be4e:	bf00      	nop
          }
          break;
 800be50:	e004      	b.n	800be5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fb1d 	bl	800c494 <USBD_CtlError>
          break;
 800be5a:	bf00      	nop
      }
      break;
 800be5c:	e004      	b.n	800be68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fb17 	bl	800c494 <USBD_CtlError>
      break;
 800be66:	bf00      	nop
  }

  return ret;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be86:	2300      	movs	r3, #0
 800be88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	885b      	ldrh	r3, [r3, #2]
 800be8e:	0a1b      	lsrs	r3, r3, #8
 800be90:	b29b      	uxth	r3, r3
 800be92:	3b01      	subs	r3, #1
 800be94:	2b06      	cmp	r3, #6
 800be96:	f200 8128 	bhi.w	800c0ea <USBD_GetDescriptor+0x276>
 800be9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bea0 <USBD_GetDescriptor+0x2c>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800bebd 	.word	0x0800bebd
 800bea4:	0800bed5 	.word	0x0800bed5
 800bea8:	0800bf15 	.word	0x0800bf15
 800beac:	0800c0eb 	.word	0x0800c0eb
 800beb0:	0800c0eb 	.word	0x0800c0eb
 800beb4:	0800c08b 	.word	0x0800c08b
 800beb8:	0800c0b7 	.word	0x0800c0b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	7c12      	ldrb	r2, [r2, #16]
 800bec8:	f107 0108 	add.w	r1, r7, #8
 800becc:	4610      	mov	r0, r2
 800bece:	4798      	blx	r3
 800bed0:	60f8      	str	r0, [r7, #12]
      break;
 800bed2:	e112      	b.n	800c0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7c1b      	ldrb	r3, [r3, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10d      	bne.n	800bef8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee4:	f107 0208 	add.w	r2, r7, #8
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
 800beec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	3301      	adds	r3, #1
 800bef2:	2202      	movs	r2, #2
 800bef4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bef6:	e100      	b.n	800c0fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf00:	f107 0208 	add.w	r2, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	2202      	movs	r2, #2
 800bf10:	701a      	strb	r2, [r3, #0]
      break;
 800bf12:	e0f2      	b.n	800c0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	885b      	ldrh	r3, [r3, #2]
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b05      	cmp	r3, #5
 800bf1c:	f200 80ac 	bhi.w	800c078 <USBD_GetDescriptor+0x204>
 800bf20:	a201      	add	r2, pc, #4	@ (adr r2, 800bf28 <USBD_GetDescriptor+0xb4>)
 800bf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf26:	bf00      	nop
 800bf28:	0800bf41 	.word	0x0800bf41
 800bf2c:	0800bf75 	.word	0x0800bf75
 800bf30:	0800bfa9 	.word	0x0800bfa9
 800bf34:	0800bfdd 	.word	0x0800bfdd
 800bf38:	0800c011 	.word	0x0800c011
 800bf3c:	0800c045 	.word	0x0800c045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e091      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa94 	bl	800c494 <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e089      	b.n	800c088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e077      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa7a 	bl	800c494 <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e06f      	b.n	800c088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	7c12      	ldrb	r2, [r2, #16]
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfca:	e05d      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa60 	bl	800c494 <USBD_CtlError>
            err++;
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfda:	e055      	b.n	800c088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	7c12      	ldrb	r2, [r2, #16]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
 800bffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffe:	e043      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa46 	bl	800c494 <USBD_CtlError>
            err++;
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	3301      	adds	r3, #1
 800c00c:	72fb      	strb	r3, [r7, #11]
          break;
 800c00e:	e03b      	b.n	800c088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7c12      	ldrb	r2, [r2, #16]
 800c028:	f107 0108 	add.w	r1, r7, #8
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
 800c030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c032:	e029      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fa2c 	bl	800c494 <USBD_CtlError>
            err++;
 800c03c:	7afb      	ldrb	r3, [r7, #11]
 800c03e:	3301      	adds	r3, #1
 800c040:	72fb      	strb	r3, [r7, #11]
          break;
 800c042:	e021      	b.n	800c088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c056:	699b      	ldr	r3, [r3, #24]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7c12      	ldrb	r2, [r2, #16]
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
 800c064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c066:	e00f      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa12 	bl	800c494 <USBD_CtlError>
            err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
          break;
 800c076:	e007      	b.n	800c088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fa0a 	bl	800c494 <USBD_CtlError>
          err++;
 800c080:	7afb      	ldrb	r3, [r7, #11]
 800c082:	3301      	adds	r3, #1
 800c084:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c086:	e038      	b.n	800c0fa <USBD_GetDescriptor+0x286>
 800c088:	e037      	b.n	800c0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7c1b      	ldrb	r3, [r3, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d109      	bne.n	800c0a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c09a:	f107 0208 	add.w	r2, r7, #8
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4798      	blx	r3
 800c0a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a4:	e029      	b.n	800c0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f9f3 	bl	800c494 <USBD_CtlError>
        err++;
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0b4:	e021      	b.n	800c0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10d      	bne.n	800c0da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c6:	f107 0208 	add.w	r2, r7, #8
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	4798      	blx	r3
 800c0ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	2207      	movs	r2, #7
 800c0d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0d8:	e00f      	b.n	800c0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f9d9 	bl	800c494 <USBD_CtlError>
        err++;
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0e8:	e007      	b.n	800c0fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f9d1 	bl	800c494 <USBD_CtlError>
      err++;
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f8:	bf00      	nop
  }

  if (err != 0U)
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d11c      	bne.n	800c13a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c100:	893b      	ldrh	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d011      	beq.n	800c12a <USBD_GetDescriptor+0x2b6>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	88db      	ldrh	r3, [r3, #6]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00d      	beq.n	800c12a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	88da      	ldrh	r2, [r3, #6]
 800c112:	893b      	ldrh	r3, [r7, #8]
 800c114:	4293      	cmp	r3, r2
 800c116:	bf28      	it	cs
 800c118:	4613      	movcs	r3, r2
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c11e:	893b      	ldrh	r3, [r7, #8]
 800c120:	461a      	mov	r2, r3
 800c122:	68f9      	ldr	r1, [r7, #12]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fa1f 	bl	800c568 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	88db      	ldrh	r3, [r3, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d104      	bne.n	800c13c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fa76 	bl	800c624 <USBD_CtlSendStatus>
 800c138:	e000      	b.n	800c13c <USBD_GetDescriptor+0x2c8>
    return;
 800c13a:	bf00      	nop
    }
  }
}
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop

0800c144 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	889b      	ldrh	r3, [r3, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d130      	bne.n	800c1b8 <USBD_SetAddress+0x74>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	88db      	ldrh	r3, [r3, #6]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d12c      	bne.n	800c1b8 <USBD_SetAddress+0x74>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	885b      	ldrh	r3, [r3, #2]
 800c162:	2b7f      	cmp	r3, #127	@ 0x7f
 800c164:	d828      	bhi.n	800c1b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c170:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c178:	2b03      	cmp	r3, #3
 800c17a:	d104      	bne.n	800c186 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c17c:	6839      	ldr	r1, [r7, #0]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f988 	bl	800c494 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c184:	e01d      	b.n	800c1c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7bfa      	ldrb	r2, [r7, #15]
 800c18a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fe1d 	bl	800cdd2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fa43 	bl	800c624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ac:	e009      	b.n	800c1c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b6:	e004      	b.n	800c1c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f96a 	bl	800c494 <USBD_CtlError>
  }
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	885b      	ldrh	r3, [r3, #2]
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	4b41      	ldr	r3, [pc, #260]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c1de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1e0:	4b40      	ldr	r3, [pc, #256]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d904      	bls.n	800c1f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f952 	bl	800c494 <USBD_CtlError>
 800c1f0:	e075      	b.n	800c2de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d002      	beq.n	800c202 <USBD_SetConfig+0x36>
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d023      	beq.n	800c248 <USBD_SetConfig+0x7c>
 800c200:	e062      	b.n	800c2c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c202:	4b38      	ldr	r3, [pc, #224]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01a      	beq.n	800c240 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c20a:	4b36      	ldr	r3, [pc, #216]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2203      	movs	r2, #3
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c21c:	4b31      	ldr	r3, [pc, #196]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff f9e8 	bl	800b5f8 <USBD_SetClassConfig>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d104      	bne.n	800c238 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f92f 	bl	800c494 <USBD_CtlError>
            return;
 800c236:	e052      	b.n	800c2de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f9f3 	bl	800c624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c23e:	e04e      	b.n	800c2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f9ef 	bl	800c624 <USBD_CtlSendStatus>
        break;
 800c246:	e04a      	b.n	800c2de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c248:	4b26      	ldr	r3, [pc, #152]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d112      	bne.n	800c276 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c258:	4b22      	ldr	r3, [pc, #136]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	461a      	mov	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c262:	4b20      	ldr	r3, [pc, #128]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff f9e4 	bl	800b636 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f9d8 	bl	800c624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c274:	e033      	b.n	800c2de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c276:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	429a      	cmp	r2, r3
 800c282:	d01d      	beq.n	800c2c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff f9d2 	bl	800b636 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c292:	4b14      	ldr	r3, [pc, #80]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c29c:	4b11      	ldr	r3, [pc, #68]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff f9a8 	bl	800b5f8 <USBD_SetClassConfig>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d104      	bne.n	800c2b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f8ef 	bl	800c494 <USBD_CtlError>
            return;
 800c2b6:	e012      	b.n	800c2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9b3 	bl	800c624 <USBD_CtlSendStatus>
        break;
 800c2be:	e00e      	b.n	800c2de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f9af 	bl	800c624 <USBD_CtlSendStatus>
        break;
 800c2c6:	e00a      	b.n	800c2de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f8e2 	bl	800c494 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c2d0:	4b04      	ldr	r3, [pc, #16]	@ (800c2e4 <USBD_SetConfig+0x118>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff f9ad 	bl	800b636 <USBD_ClrClassConfig>
        break;
 800c2dc:	bf00      	nop
    }
  }
}
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	2000313c 	.word	0x2000313c

0800c2e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	88db      	ldrh	r3, [r3, #6]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d004      	beq.n	800c304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f8c9 	bl	800c494 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c302:	e022      	b.n	800c34a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	dc02      	bgt.n	800c314 <USBD_GetConfig+0x2c>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dc03      	bgt.n	800c31a <USBD_GetConfig+0x32>
 800c312:	e015      	b.n	800c340 <USBD_GetConfig+0x58>
 800c314:	2b03      	cmp	r3, #3
 800c316:	d00b      	beq.n	800c330 <USBD_GetConfig+0x48>
 800c318:	e012      	b.n	800c340 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3308      	adds	r3, #8
 800c324:	2201      	movs	r2, #1
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f91d 	bl	800c568 <USBD_CtlSendData>
        break;
 800c32e:	e00c      	b.n	800c34a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3304      	adds	r3, #4
 800c334:	2201      	movs	r2, #1
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f915 	bl	800c568 <USBD_CtlSendData>
        break;
 800c33e:	e004      	b.n	800c34a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f8a6 	bl	800c494 <USBD_CtlError>
        break;
 800c348:	bf00      	nop
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c362:	3b01      	subs	r3, #1
 800c364:	2b02      	cmp	r3, #2
 800c366:	d81e      	bhi.n	800c3a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	88db      	ldrh	r3, [r3, #6]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d004      	beq.n	800c37a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f88e 	bl	800c494 <USBD_CtlError>
        break;
 800c378:	e01a      	b.n	800c3b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f043 0202 	orr.w	r2, r3, #2
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	330c      	adds	r3, #12
 800c39a:	2202      	movs	r2, #2
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f8e2 	bl	800c568 <USBD_CtlSendData>
      break;
 800c3a4:	e004      	b.n	800c3b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 f873 	bl	800c494 <USBD_CtlError>
      break;
 800c3ae:	bf00      	nop
  }
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d106      	bne.n	800c3d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f926 	bl	800c624 <USBD_CtlSendStatus>
  }
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d80b      	bhi.n	800c40e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	885b      	ldrh	r3, [r3, #2]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d10c      	bne.n	800c418 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f90c 	bl	800c624 <USBD_CtlSendStatus>
      }
      break;
 800c40c:	e004      	b.n	800c418 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f83f 	bl	800c494 <USBD_CtlError>
      break;
 800c416:	e000      	b.n	800c41a <USBD_ClrFeature+0x3a>
      break;
 800c418:	bf00      	nop
  }
}
 800c41a:	bf00      	nop
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	785a      	ldrb	r2, [r3, #1]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3302      	adds	r3, #2
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	3303      	adds	r3, #3
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	4413      	add	r3, r2
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	3304      	adds	r3, #4
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	461a      	mov	r2, r3
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	3305      	adds	r3, #5
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	021b      	lsls	r3, r3, #8
 800c466:	b29b      	uxth	r3, r3
 800c468:	4413      	add	r3, r2
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	3306      	adds	r3, #6
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	3307      	adds	r3, #7
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	021b      	lsls	r3, r3, #8
 800c480:	b29b      	uxth	r3, r3
 800c482:	4413      	add	r3, r2
 800c484:	b29a      	uxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	80da      	strh	r2, [r3, #6]

}
 800c48a:	bf00      	nop
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	bc80      	pop	{r7}
 800c492:	4770      	bx	lr

0800c494 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c49e:	2180      	movs	r1, #128	@ 0x80
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fc2d 	bl	800cd00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fc29 	bl	800cd00 <USBD_LL_StallEP>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d032      	beq.n	800c532 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f834 	bl	800c53a <USBD_GetLen>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	75fa      	strb	r2, [r7, #23]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	7812      	ldrb	r2, [r2, #0]
 800c4f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	75fa      	strb	r2, [r7, #23]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	2203      	movs	r2, #3
 800c500:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c502:	e012      	b.n	800c52a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	60fa      	str	r2, [r7, #12]
 800c50a:	7dfa      	ldrb	r2, [r7, #23]
 800c50c:	1c51      	adds	r1, r2, #1
 800c50e:	75f9      	strb	r1, [r7, #23]
 800c510:	4611      	mov	r1, r2
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	440a      	add	r2, r1
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	75fa      	strb	r2, [r7, #23]
 800c520:	461a      	mov	r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	4413      	add	r3, r2
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e8      	bne.n	800c504 <USBD_GetString+0x4e>
    }
  }
}
 800c532:	bf00      	nop
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b085      	sub	sp, #20
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c546:	e005      	b.n	800c554 <USBD_GetLen+0x1a>
  {
    len++;
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	3301      	adds	r3, #1
 800c54c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3301      	adds	r3, #1
 800c552:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f5      	bne.n	800c548 <USBD_GetLen+0xe>
  }

  return len;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	bc80      	pop	{r7}
 800c566:	4770      	bx	lr

0800c568 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	4613      	mov	r3, r2
 800c574:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2202      	movs	r2, #2
 800c57a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c57e:	88fa      	ldrh	r2, [r7, #6]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c584:	88fa      	ldrh	r2, [r7, #6]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c58a:	88fb      	ldrh	r3, [r7, #6]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	2100      	movs	r1, #0
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 fc3d 	bl	800ce10 <USBD_LL_Transmit>

  return USBD_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5ae:	88fb      	ldrh	r3, [r7, #6]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 fc2b 	bl	800ce10 <USBD_LL_Transmit>

  return USBD_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c5e2:	88fa      	ldrh	r2, [r7, #6]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ea:	88fb      	ldrh	r3, [r7, #6]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 fc30 	bl	800ce56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c60e:	88fb      	ldrh	r3, [r7, #6]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fc1e 	bl	800ce56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c634:	2300      	movs	r3, #0
 800c636:	2200      	movs	r2, #0
 800c638:	2100      	movs	r1, #0
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fbe8 	bl	800ce10 <USBD_LL_Transmit>

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2205      	movs	r2, #5
 800c656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c65a:	2300      	movs	r3, #0
 800c65c:	2200      	movs	r2, #0
 800c65e:	2100      	movs	r1, #0
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fbf8 	bl	800ce56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c674:	2200      	movs	r2, #0
 800c676:	4912      	ldr	r1, [pc, #72]	@ (800c6c0 <MX_USB_DEVICE_Init+0x50>)
 800c678:	4812      	ldr	r0, [pc, #72]	@ (800c6c4 <MX_USB_DEVICE_Init+0x54>)
 800c67a:	f7fe ff63 	bl	800b544 <USBD_Init>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c684:	f7f4 f93a 	bl	80008fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c688:	490f      	ldr	r1, [pc, #60]	@ (800c6c8 <MX_USB_DEVICE_Init+0x58>)
 800c68a:	480e      	ldr	r0, [pc, #56]	@ (800c6c4 <MX_USB_DEVICE_Init+0x54>)
 800c68c:	f7fe ff85 	bl	800b59a <USBD_RegisterClass>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c696:	f7f4 f931 	bl	80008fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c69a:	490c      	ldr	r1, [pc, #48]	@ (800c6cc <MX_USB_DEVICE_Init+0x5c>)
 800c69c:	4809      	ldr	r0, [pc, #36]	@ (800c6c4 <MX_USB_DEVICE_Init+0x54>)
 800c69e:	f7fe fee5 	bl	800b46c <USBD_CDC_RegisterInterface>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6a8:	f7f4 f928 	bl	80008fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6ac:	4805      	ldr	r0, [pc, #20]	@ (800c6c4 <MX_USB_DEVICE_Init+0x54>)
 800c6ae:	f7fe ff8d 	bl	800b5cc <USBD_Start>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6b8:	f7f4 f920 	bl	80008fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6bc:	bf00      	nop
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	20000130 	.word	0x20000130
 800c6c4:	20003140 	.word	0x20003140
 800c6c8:	2000001c 	.word	0x2000001c
 800c6cc:	20000120 	.word	0x20000120

0800c6d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4905      	ldr	r1, [pc, #20]	@ (800c6ec <CDC_Init_FS+0x1c>)
 800c6d8:	4805      	ldr	r0, [pc, #20]	@ (800c6f0 <CDC_Init_FS+0x20>)
 800c6da:	f7fe fedd 	bl	800b498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6de:	4905      	ldr	r1, [pc, #20]	@ (800c6f4 <CDC_Init_FS+0x24>)
 800c6e0:	4803      	ldr	r0, [pc, #12]	@ (800c6f0 <CDC_Init_FS+0x20>)
 800c6e2:	f7fe fef2 	bl	800b4ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20003804 	.word	0x20003804
 800c6f0:	20003140 	.word	0x20003140
 800c6f4:	20003404 	.word	0x20003404

0800c6f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	46bd      	mov	sp, r7
 800c702:	bc80      	pop	{r7}
 800c704:	4770      	bx	lr
	...

0800c708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
 800c714:	4613      	mov	r3, r2
 800c716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	2b23      	cmp	r3, #35	@ 0x23
 800c71c:	d84a      	bhi.n	800c7b4 <CDC_Control_FS+0xac>
 800c71e:	a201      	add	r2, pc, #4	@ (adr r2, 800c724 <CDC_Control_FS+0x1c>)
 800c720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c724:	0800c7b5 	.word	0x0800c7b5
 800c728:	0800c7b5 	.word	0x0800c7b5
 800c72c:	0800c7b5 	.word	0x0800c7b5
 800c730:	0800c7b5 	.word	0x0800c7b5
 800c734:	0800c7b5 	.word	0x0800c7b5
 800c738:	0800c7b5 	.word	0x0800c7b5
 800c73c:	0800c7b5 	.word	0x0800c7b5
 800c740:	0800c7b5 	.word	0x0800c7b5
 800c744:	0800c7b5 	.word	0x0800c7b5
 800c748:	0800c7b5 	.word	0x0800c7b5
 800c74c:	0800c7b5 	.word	0x0800c7b5
 800c750:	0800c7b5 	.word	0x0800c7b5
 800c754:	0800c7b5 	.word	0x0800c7b5
 800c758:	0800c7b5 	.word	0x0800c7b5
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7b5 	.word	0x0800c7b5
 800c764:	0800c7b5 	.word	0x0800c7b5
 800c768:	0800c7b5 	.word	0x0800c7b5
 800c76c:	0800c7b5 	.word	0x0800c7b5
 800c770:	0800c7b5 	.word	0x0800c7b5
 800c774:	0800c7b5 	.word	0x0800c7b5
 800c778:	0800c7b5 	.word	0x0800c7b5
 800c77c:	0800c7b5 	.word	0x0800c7b5
 800c780:	0800c7b5 	.word	0x0800c7b5
 800c784:	0800c7b5 	.word	0x0800c7b5
 800c788:	0800c7b5 	.word	0x0800c7b5
 800c78c:	0800c7b5 	.word	0x0800c7b5
 800c790:	0800c7b5 	.word	0x0800c7b5
 800c794:	0800c7b5 	.word	0x0800c7b5
 800c798:	0800c7b5 	.word	0x0800c7b5
 800c79c:	0800c7b5 	.word	0x0800c7b5
 800c7a0:	0800c7b5 	.word	0x0800c7b5
 800c7a4:	0800c7b5 	.word	0x0800c7b5
 800c7a8:	0800c7b5 	.word	0x0800c7b5
 800c7ac:	0800c7b5 	.word	0x0800c7b5
 800c7b0:	0800c7b5 	.word	0x0800c7b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7b4:	bf00      	nop
  }

  return (USBD_OK);
 800c7b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop

0800c7c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	4805      	ldr	r0, [pc, #20]	@ (800c7e8 <CDC_Receive_FS+0x24>)
 800c7d2:	f7fe fe7a 	bl	800b4ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7d6:	4804      	ldr	r0, [pc, #16]	@ (800c7e8 <CDC_Receive_FS+0x24>)
 800c7d8:	f7fe fe8a 	bl	800b4f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20003140 	.word	0x20003140

0800c7ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6039      	str	r1, [r7, #0]
 800c7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2212      	movs	r2, #18
 800c7fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7fe:	4b03      	ldr	r3, [pc, #12]	@ (800c80c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	bc80      	pop	{r7}
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	2000014c 	.word	0x2000014c

0800c810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	6039      	str	r1, [r7, #0]
 800c81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2204      	movs	r2, #4
 800c820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c822:	4b03      	ldr	r3, [pc, #12]	@ (800c830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	20000160 	.word	0x20000160

0800c834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	6039      	str	r1, [r7, #0]
 800c83e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	4907      	ldr	r1, [pc, #28]	@ (800c868 <USBD_FS_ProductStrDescriptor+0x34>)
 800c84a:	4808      	ldr	r0, [pc, #32]	@ (800c86c <USBD_FS_ProductStrDescriptor+0x38>)
 800c84c:	f7ff fe33 	bl	800c4b6 <USBD_GetString>
 800c850:	e004      	b.n	800c85c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	4904      	ldr	r1, [pc, #16]	@ (800c868 <USBD_FS_ProductStrDescriptor+0x34>)
 800c856:	4805      	ldr	r0, [pc, #20]	@ (800c86c <USBD_FS_ProductStrDescriptor+0x38>)
 800c858:	f7ff fe2d 	bl	800c4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c85c:	4b02      	ldr	r3, [pc, #8]	@ (800c868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20003c04 	.word	0x20003c04
 800c86c:	0800df88 	.word	0x0800df88

0800c870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	6039      	str	r1, [r7, #0]
 800c87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	4904      	ldr	r1, [pc, #16]	@ (800c890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c880:	4804      	ldr	r0, [pc, #16]	@ (800c894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c882:	f7ff fe18 	bl	800c4b6 <USBD_GetString>
  return USBD_StrDesc;
 800c886:	4b02      	ldr	r3, [pc, #8]	@ (800c890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20003c04 	.word	0x20003c04
 800c894:	0800dfa0 	.word	0x0800dfa0

0800c898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	6039      	str	r1, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	221a      	movs	r2, #26
 800c8a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8aa:	f000 f843 	bl	800c934 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8ae:	4b02      	ldr	r3, [pc, #8]	@ (800c8b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	20000164 	.word	0x20000164

0800c8bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	6039      	str	r1, [r7, #0]
 800c8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d105      	bne.n	800c8da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	4907      	ldr	r1, [pc, #28]	@ (800c8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8d2:	4808      	ldr	r0, [pc, #32]	@ (800c8f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8d4:	f7ff fdef 	bl	800c4b6 <USBD_GetString>
 800c8d8:	e004      	b.n	800c8e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4904      	ldr	r1, [pc, #16]	@ (800c8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8de:	4805      	ldr	r0, [pc, #20]	@ (800c8f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8e0:	f7ff fde9 	bl	800c4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8e4:	4b02      	ldr	r3, [pc, #8]	@ (800c8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20003c04 	.word	0x20003c04
 800c8f4:	0800dfb4 	.word	0x0800dfb4

0800c8f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	6039      	str	r1, [r7, #0]
 800c902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	4907      	ldr	r1, [pc, #28]	@ (800c92c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c90e:	4808      	ldr	r0, [pc, #32]	@ (800c930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c910:	f7ff fdd1 	bl	800c4b6 <USBD_GetString>
 800c914:	e004      	b.n	800c920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	4904      	ldr	r1, [pc, #16]	@ (800c92c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c91a:	4805      	ldr	r0, [pc, #20]	@ (800c930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c91c:	f7ff fdcb 	bl	800c4b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c920:	4b02      	ldr	r3, [pc, #8]	@ (800c92c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c922:	4618      	mov	r0, r3
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20003c04 	.word	0x20003c04
 800c930:	0800dfc0 	.word	0x0800dfc0

0800c934 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c93a:	4b0f      	ldr	r3, [pc, #60]	@ (800c978 <Get_SerialNum+0x44>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c940:	4b0e      	ldr	r3, [pc, #56]	@ (800c97c <Get_SerialNum+0x48>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c946:	4b0e      	ldr	r3, [pc, #56]	@ (800c980 <Get_SerialNum+0x4c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4413      	add	r3, r2
 800c952:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d009      	beq.n	800c96e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c95a:	2208      	movs	r2, #8
 800c95c:	4909      	ldr	r1, [pc, #36]	@ (800c984 <Get_SerialNum+0x50>)
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f000 f814 	bl	800c98c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c964:	2204      	movs	r2, #4
 800c966:	4908      	ldr	r1, [pc, #32]	@ (800c988 <Get_SerialNum+0x54>)
 800c968:	68b8      	ldr	r0, [r7, #8]
 800c96a:	f000 f80f 	bl	800c98c <IntToUnicode>
  }
}
 800c96e:	bf00      	nop
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	1ffff7e8 	.word	0x1ffff7e8
 800c97c:	1ffff7ec 	.word	0x1ffff7ec
 800c980:	1ffff7f0 	.word	0x1ffff7f0
 800c984:	20000166 	.word	0x20000166
 800c988:	20000176 	.word	0x20000176

0800c98c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4613      	mov	r3, r2
 800c998:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c99e:	2300      	movs	r3, #0
 800c9a0:	75fb      	strb	r3, [r7, #23]
 800c9a2:	e027      	b.n	800c9f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	0f1b      	lsrs	r3, r3, #28
 800c9a8:	2b09      	cmp	r3, #9
 800c9aa:	d80b      	bhi.n	800c9c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	0f1b      	lsrs	r3, r3, #28
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	440b      	add	r3, r1
 800c9bc:	3230      	adds	r2, #48	@ 0x30
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	e00a      	b.n	800c9da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	0f1b      	lsrs	r3, r3, #28
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3237      	adds	r2, #55	@ 0x37
 800c9d6:	b2d2      	uxtb	r2, r2
 800c9d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	011b      	lsls	r3, r3, #4
 800c9de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]
 800c9f4:	7dfa      	ldrb	r2, [r7, #23]
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d3d3      	bcc.n	800c9a4 <IntToUnicode+0x18>
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	bf00      	nop
 800ca00:	371c      	adds	r7, #28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bc80      	pop	{r7}
 800ca06:	4770      	bx	lr

0800ca08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a0d      	ldr	r2, [pc, #52]	@ (800ca4c <HAL_PCD_MspInit+0x44>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d113      	bne.n	800ca42 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca50 <HAL_PCD_MspInit+0x48>)
 800ca1c:	69db      	ldr	r3, [r3, #28]
 800ca1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ca50 <HAL_PCD_MspInit+0x48>)
 800ca20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca24:	61d3      	str	r3, [r2, #28]
 800ca26:	4b0a      	ldr	r3, [pc, #40]	@ (800ca50 <HAL_PCD_MspInit+0x48>)
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800ca32:	2200      	movs	r2, #0
 800ca34:	2105      	movs	r1, #5
 800ca36:	2014      	movs	r0, #20
 800ca38:	f7f4 fddf 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca3c:	2014      	movs	r0, #20
 800ca3e:	f7f4 fdf8 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca42:	bf00      	nop
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40005c00 	.word	0x40005c00
 800ca50:	40021000 	.word	0x40021000

0800ca54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ca68:	4619      	mov	r1, r3
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	f7fe fdf6 	bl	800b65c <USBD_LL_SetupStage>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ca8a:	78fa      	ldrb	r2, [r7, #3]
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	440b      	add	r3, r1
 800ca98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	78fb      	ldrb	r3, [r7, #3]
 800caa0:	4619      	mov	r1, r3
 800caa2:	f7fe fe28 	bl	800b6f6 <USBD_LL_DataOutStage>
}
 800caa6:	bf00      	nop
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	460b      	mov	r3, r1
 800cab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800cac0:	78fa      	ldrb	r2, [r7, #3]
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	00db      	lsls	r3, r3, #3
 800cacc:	440b      	add	r3, r1
 800cace:	3324      	adds	r3, #36	@ 0x24
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	78fb      	ldrb	r3, [r7, #3]
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7fe fe7f 	bl	800b7d8 <USBD_LL_DataInStage>
}
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe ff8f 	bl	800ba14 <USBD_LL_SOF>
}
 800caf6:	bf00      	nop
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb06:	2301      	movs	r3, #1
 800cb08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	799b      	ldrb	r3, [r3, #6]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d001      	beq.n	800cb16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb12:	f7f3 fef3 	bl	80008fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb1c:	7bfa      	ldrb	r2, [r7, #15]
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe ff3f 	bl	800b9a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fe fef8 	bl	800b922 <USBD_LL_Reset>
}
 800cb32:	bf00      	nop
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe ff39 	bl	800b9c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7a9b      	ldrb	r3, [r3, #10]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb58:	4b04      	ldr	r3, [pc, #16]	@ (800cb6c <HAL_PCD_SuspendCallback+0x30>)
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	4a03      	ldr	r2, [pc, #12]	@ (800cb6c <HAL_PCD_SuspendCallback+0x30>)
 800cb5e:	f043 0306 	orr.w	r3, r3, #6
 800cb62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	e000ed00 	.word	0xe000ed00

0800cb70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe ff33 	bl	800b9ea <USBD_LL_Resume>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cb94:	4a28      	ldr	r2, [pc, #160]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a26      	ldr	r2, [pc, #152]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cba0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cba4:	4b24      	ldr	r3, [pc, #144]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cba6:	4a25      	ldr	r2, [pc, #148]	@ (800cc3c <USBD_LL_Init+0xb0>)
 800cba8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbaa:	4b23      	ldr	r3, [pc, #140]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbac:	2208      	movs	r2, #8
 800cbae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cbb0:	4b21      	ldr	r3, [pc, #132]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cbb6:	4b20      	ldr	r3, [pc, #128]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cbbc:	4b1e      	ldr	r3, [pc, #120]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cbc2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cbc8:	481b      	ldr	r0, [pc, #108]	@ (800cc38 <USBD_LL_Init+0xac>)
 800cbca:	f7f5 f8c5 	bl	8001d58 <HAL_PCD_Init>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cbd4:	f7f3 fe92 	bl	80008fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbde:	2318      	movs	r3, #24
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	f7f6 fdd6 	bl	8003794 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbee:	2358      	movs	r3, #88	@ 0x58
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2180      	movs	r1, #128	@ 0x80
 800cbf4:	f7f6 fdce 	bl	8003794 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbfe:	23c0      	movs	r3, #192	@ 0xc0
 800cc00:	2200      	movs	r2, #0
 800cc02:	2181      	movs	r1, #129	@ 0x81
 800cc04:	f7f6 fdc6 	bl	8003794 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc0e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc12:	2200      	movs	r2, #0
 800cc14:	2101      	movs	r1, #1
 800cc16:	f7f6 fdbd 	bl	8003794 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc24:	2200      	movs	r2, #0
 800cc26:	2182      	movs	r1, #130	@ 0x82
 800cc28:	f7f6 fdb4 	bl	8003794 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20003e04 	.word	0x20003e04
 800cc3c:	40005c00 	.word	0x40005c00

0800cc40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f5 f974 	bl	8001f44 <HAL_PCD_Start>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f94e 	bl	800cf04 <USBD_Get_USB_Status>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	4608      	mov	r0, r1
 800cc80:	4611      	mov	r1, r2
 800cc82:	461a      	mov	r2, r3
 800cc84:	4603      	mov	r3, r0
 800cc86:	70fb      	strb	r3, [r7, #3]
 800cc88:	460b      	mov	r3, r1
 800cc8a:	70bb      	strb	r3, [r7, #2]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc9e:	78bb      	ldrb	r3, [r7, #2]
 800cca0:	883a      	ldrh	r2, [r7, #0]
 800cca2:	78f9      	ldrb	r1, [r7, #3]
 800cca4:	f7f5 fac8 	bl	8002238 <HAL_PCD_EP_Open>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 f928 	bl	800cf04 <USBD_Get_USB_Status>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccdc:	78fa      	ldrb	r2, [r7, #3]
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7f5 fb06 	bl	80022f2 <HAL_PCD_EP_Close>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 f909 	bl	800cf04 <USBD_Get_USB_Status>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd1a:	78fa      	ldrb	r2, [r7, #3]
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7f5 fbae 	bl	8002480 <HAL_PCD_EP_SetStall>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 f8ea 	bl	800cf04 <USBD_Get_USB_Status>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	460b      	mov	r3, r1
 800cd48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd58:	78fa      	ldrb	r2, [r7, #3]
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f5 fbef 	bl	8002540 <HAL_PCD_EP_ClrStall>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 f8cb 	bl	800cf04 <USBD_Get_USB_Status>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	da0b      	bge.n	800cdb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd98:	78fb      	ldrb	r3, [r7, #3]
 800cd9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd9e:	68f9      	ldr	r1, [r7, #12]
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	440b      	add	r3, r1
 800cdaa:	3312      	adds	r3, #18
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	e00b      	b.n	800cdc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdb6:	68f9      	ldr	r1, [r7, #12]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	440b      	add	r3, r1
 800cdc2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cdc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bc80      	pop	{r7}
 800cdd0:	4770      	bx	lr

0800cdd2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	460b      	mov	r3, r1
 800cddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdec:	78fa      	ldrb	r2, [r7, #3]
 800cdee:	4611      	mov	r1, r2
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f5 f9fd 	bl	80021f0 <HAL_PCD_SetAddress>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 f881 	bl	800cf04 <USBD_Get_USB_Status>
 800ce02:	4603      	mov	r3, r0
 800ce04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
 800ce20:	4613      	mov	r3, r2
 800ce22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce32:	893b      	ldrh	r3, [r7, #8]
 800ce34:	7af9      	ldrb	r1, [r7, #11]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f7f5 faeb 	bl	8002412 <HAL_PCD_EP_Transmit>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f85e 	bl	800cf04 <USBD_Get_USB_Status>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b086      	sub	sp, #24
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	461a      	mov	r2, r3
 800ce62:	460b      	mov	r3, r1
 800ce64:	72fb      	strb	r3, [r7, #11]
 800ce66:	4613      	mov	r3, r2
 800ce68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce78:	893b      	ldrh	r3, [r7, #8]
 800ce7a:	7af9      	ldrb	r1, [r7, #11]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	f7f5 fa80 	bl	8002382 <HAL_PCD_EP_Receive>
 800ce82:	4603      	mov	r3, r0
 800ce84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 f83b 	bl	800cf04 <USBD_Get_USB_Status>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce92:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3718      	adds	r7, #24
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ceae:	78fa      	ldrb	r2, [r7, #3]
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7f5 fa96 	bl	80023e4 <HAL_PCD_EP_GetRxCount>
 800ceb8:	4603      	mov	r3, r0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
	...

0800cec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cecc:	4b02      	ldr	r3, [pc, #8]	@ (800ced8 <USBD_static_malloc+0x14>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bc80      	pop	{r7}
 800ced6:	4770      	bx	lr
 800ced8:	200040dc 	.word	0x200040dc

0800cedc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]

}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bc80      	pop	{r7}
 800ceec:	4770      	bx	lr

0800ceee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr

0800cf04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	2b03      	cmp	r3, #3
 800cf16:	d817      	bhi.n	800cf48 <USBD_Get_USB_Status+0x44>
 800cf18:	a201      	add	r2, pc, #4	@ (adr r2, 800cf20 <USBD_Get_USB_Status+0x1c>)
 800cf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1e:	bf00      	nop
 800cf20:	0800cf31 	.word	0x0800cf31
 800cf24:	0800cf37 	.word	0x0800cf37
 800cf28:	0800cf3d 	.word	0x0800cf3d
 800cf2c:	0800cf43 	.word	0x0800cf43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]
    break;
 800cf34:	e00b      	b.n	800cf4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf36:	2302      	movs	r3, #2
 800cf38:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3a:	e008      	b.n	800cf4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf40:	e005      	b.n	800cf4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf42:	2302      	movs	r3, #2
 800cf44:	73fb      	strb	r3, [r7, #15]
    break;
 800cf46:	e002      	b.n	800cf4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf48:	2302      	movs	r3, #2
 800cf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4c:	bf00      	nop
  }
  return usb_status;
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bc80      	pop	{r7}
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop

0800cf5c <_send_message_to_console>:
/**
 * \brief
 *
 */
static osStatus_t _send_message_to_console(uint8_t *p_str)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60fb      	str	r3, [r7, #12]
	osMessageQueueId_t message_id = get_print_msg_queue_id();
 800cf68:	f000 fa46 	bl	800d3f8 <get_print_msg_queue_id>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	60bb      	str	r3, [r7, #8]

	status = osMessageQueuePut(message_id, p_str, 0U, 0U);
 800cf70:	2300      	movs	r3, #0
 800cf72:	2200      	movs	r2, #0
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	68b8      	ldr	r0, [r7, #8]
 800cf78:	f7fa ff50 	bl	8007e1c <osMessageQueuePut>
 800cf7c:	60f8      	str	r0, [r7, #12]

	return status;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <print_to_console>:
 * \brief Print some msg to the console.
 * \detaled Print some msg to the console with the next format string - [MSG]
 *
 */
osStatus_t print_to_console(const char *const p_msg)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b0a4      	sub	sp, #144	@ 0x90
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	uint8_t print_buffer[PRINT_BUFFER_SIZE];

	/// \todo Check p_thread_name + p_msg size. We have a 64-byte buffer.

	sprintf(print_buffer, "[%s]\n\r", p_msg);
 800cf96:	f107 030c 	add.w	r3, r7, #12
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	4908      	ldr	r1, [pc, #32]	@ (800cfc0 <print_to_console+0x38>)
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fac0 	bl	800d524 <siprintf>
	status = _send_message_to_console(print_buffer);
 800cfa4:	f107 030c 	add.w	r3, r7, #12
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff ffd7 	bl	800cf5c <_send_message_to_console>
 800cfae:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

	return status;
 800cfb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3790      	adds	r7, #144	@ 0x90
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	0800dfd0 	.word	0x0800dfd0

0800cfc4 <delay_us>:
/**
 * \brief
 *
 */
void delay_us(uint32_t us)
{
 800cfc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfc8:	b086      	sub	sp, #24
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
	uint32_t tick = osKernelSysTick();
 800cfce:	f7fa fcdb 	bl	8007988 <osKernelGetSysTimerCount>
 800cfd2:	6178      	str	r0, [r7, #20]

	while ((osKernelSysTick() - tick) < osKernelSysTickMicroSec(us));
 800cfd4:	bf00      	nop
 800cfd6:	f7fa fcd7 	bl	8007988 <osKernelGetSysTimerCount>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	603b      	str	r3, [r7, #0]
 800cfe4:	607a      	str	r2, [r7, #4]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	469a      	mov	sl, r3
 800cfec:	4693      	mov	fp, r2
 800cfee:	f7fa fd05 	bl	80079fc <osKernelGetSysTimerFreq>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2200      	movs	r2, #0
 800cff6:	4698      	mov	r8, r3
 800cff8:	4691      	mov	r9, r2
 800cffa:	fb08 f20b 	mul.w	r2, r8, fp
 800cffe:	fb0a f309 	mul.w	r3, sl, r9
 800d002:	4413      	add	r3, r2
 800d004:	fbaa 4508 	umull	r4, r5, sl, r8
 800d008:	442b      	add	r3, r5
 800d00a:	461d      	mov	r5, r3
 800d00c:	4a0a      	ldr	r2, [pc, #40]	@ (800d038 <delay_us+0x74>)
 800d00e:	f04f 0300 	mov.w	r3, #0
 800d012:	4620      	mov	r0, r4
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 f8a3 	bl	8000160 <__aeabi_uldivmod>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d022:	4684      	mov	ip, r0
 800d024:	4594      	cmp	ip, r2
 800d026:	eb71 0303 	sbcs.w	r3, r1, r3
 800d02a:	d3d4      	bcc.n	800cfd6 <delay_us+0x12>
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d038:	000f4240 	.word	0x000f4240

0800d03c <HAL_UART_RxCpltCallback>:
#ifdef HAL_UART_MODULE_ENABLED
/**
 *
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 800d044:	2300      	movs	r3, #0
 800d046:	60fb      	str	r3, [r7, #12]

	p_hal_uart_handle = (UART_HandleTypeDef *)get_hard_uart_interface_handle(1);
 800d048:	2001      	movs	r0, #1
 800d04a:	f000 f8d9 	bl	800d200 <get_hard_uart_interface_handle>
 800d04e:	60f8      	str	r0, [r7, #12]

	if(huart == p_hal_uart_handle)
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	429a      	cmp	r2, r3
 800d056:	d105      	bne.n	800d064 <HAL_UART_RxCpltCallback+0x28>
	{
		osEventFlagsSet(_periph_event_id, UART2_MCU_IO_RX_DONE);
 800d058:	4b04      	ldr	r3, [pc, #16]	@ (800d06c <HAL_UART_RxCpltCallback+0x30>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2110      	movs	r1, #16
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fa fdc2 	bl	8007be8 <osEventFlagsSet>
	}
	else
	{
		///callback for printf uart
	}
}
 800d064:	bf00      	nop
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	200042fc 	.word	0x200042fc

0800d070 <HAL_UART_TxCpltCallback>:

/**
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *p_hal_uart_handle = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]

	p_hal_uart_handle = (UART_HandleTypeDef *)get_hard_uart_interface_handle(1);
 800d07c:	2001      	movs	r0, #1
 800d07e:	f000 f8bf 	bl	800d200 <get_hard_uart_interface_handle>
 800d082:	60f8      	str	r0, [r7, #12]

	if(huart == p_hal_uart_handle)
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d106      	bne.n	800d09a <HAL_UART_TxCpltCallback+0x2a>
	{
		osEventFlagsSet(_periph_event_id, UART2_MCU_IO_TX_DONE);
 800d08c:	4b08      	ldr	r3, [pc, #32]	@ (800d0b0 <HAL_UART_TxCpltCallback+0x40>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2108      	movs	r1, #8
 800d092:	4618      	mov	r0, r3
 800d094:	f7fa fda8 	bl	8007be8 <osEventFlagsSet>
	}
	else
	{
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
	}
}
 800d098:	e005      	b.n	800d0a6 <HAL_UART_TxCpltCallback+0x36>
		osEventFlagsSet(_periph_event_id, UART1_PRINTF_TX_DONE);
 800d09a:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <HAL_UART_TxCpltCallback+0x40>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2104      	movs	r1, #4
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fa fda1 	bl	8007be8 <osEventFlagsSet>
}
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	200042fc 	.word	0x200042fc

0800d0b4 <set_cb_periph_event_id>:

/**
 *
 */
void set_cb_periph_event_id(osEventFlagsId_t event_id)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
	_periph_event_id = event_id;
 800d0bc:	4a03      	ldr	r2, [pc, #12]	@ (800d0cc <set_cb_periph_event_id+0x18>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bc80      	pop	{r7}
 800d0ca:	4770      	bx	lr
 800d0cc:	200042fc 	.word	0x200042fc

0800d0d0 <gpio_set>:
/**
 * \brief
 *
 */
void gpio_set(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label, gpio_value_td gpio_value)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
	if (/*(uint32_t)gpio_brd_label*/ pin_label <  MAX_GPIO_NUM)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b06      	cmp	r3, #6
 800d0e0:	d822      	bhi.n	800d128 <gpio_set+0x58>
	{
		switch(gpio_value)
 800d0e2:	78fb      	ldrb	r3, [r7, #3]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d010      	beq.n	800d10a <gpio_set+0x3a>
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d11d      	bne.n	800d128 <gpio_set+0x58>
		{
			case GPIO_TRUE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_SET);
 800d0ec:	4a10      	ldr	r2, [pc, #64]	@ (800d130 <gpio_set+0x60>)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d134 <gpio_set+0x64>)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	2201      	movs	r2, #1
 800d102:	4619      	mov	r1, r3
 800d104:	f7f4 fccb 	bl	8001a9e <HAL_GPIO_WritePin>
				break;
 800d108:	e00e      	b.n	800d128 <gpio_set+0x58>

			case GPIO_FALSE:
				HAL_GPIO_WritePin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label], GPIO_PIN_RESET);
 800d10a:	4a09      	ldr	r2, [pc, #36]	@ (800d130 <gpio_set+0x60>)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d112:	4618      	mov	r0, r3
 800d114:	4a07      	ldr	r2, [pc, #28]	@ (800d134 <gpio_set+0x64>)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	2200      	movs	r2, #0
 800d120:	4619      	mov	r1, r3
 800d122:	f7f4 fcbc 	bl	8001a9e <HAL_GPIO_WritePin>
				break;
 800d126:	bf00      	nop
	}
	else
	{
		/// \\todo PRINTF
	}
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	0800e09c 	.word	0x0800e09c
 800d134:	0800e0b8 	.word	0x0800e0b8

0800d138 <gpio_get>:
/**
 * \brief
 *
 */
gpio_value_td gpio_get(/*gpio_brd_label_td gpio_brd_label*/ const uint32_t pin_label)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	gpio_value_td gpio_pin_state = GPIO_FALSE;
 800d140:	2300      	movs	r3, #0
 800d142:	73fb      	strb	r3, [r7, #15]

	if (/*(uint32_t)gpio_brd_label*/pin_label < MAX_GPIO_NUM)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b06      	cmp	r3, #6
 800d148:	d814      	bhi.n	800d174 <gpio_get+0x3c>
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)_gpio_port_array[/*gpio_brd_label*/pin_label], _gpio_pin_array[/*gpio_brd_label*/pin_label]) == (uint8_t)GPIO_PIN_SET)
 800d14a:	4a0d      	ldr	r2, [pc, #52]	@ (800d180 <gpio_get+0x48>)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d152:	4618      	mov	r0, r3
 800d154:	4a0b      	ldr	r2, [pc, #44]	@ (800d184 <gpio_get+0x4c>)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	4619      	mov	r1, r3
 800d160:	f7f4 fc86 	bl	8001a70 <HAL_GPIO_ReadPin>
 800d164:	4603      	mov	r3, r0
 800d166:	2b01      	cmp	r3, #1
 800d168:	d102      	bne.n	800d170 <gpio_get+0x38>
		{
			gpio_pin_state = GPIO_TRUE;
 800d16a:	2301      	movs	r3, #1
 800d16c:	73fb      	strb	r3, [r7, #15]
 800d16e:	e001      	b.n	800d174 <gpio_get+0x3c>
		}
		else
		{
			gpio_pin_state = GPIO_FALSE;
 800d170:	2300      	movs	r3, #0
 800d172:	73fb      	strb	r3, [r7, #15]
	else
	{
		/// \todo PRINTF
	}

	return gpio_pin_state;
 800d174:	7bfb      	ldrb	r3, [r7, #15]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	0800e09c 	.word	0x0800e09c
 800d184:	0800e0b8 	.word	0x0800e0b8

0800d188 <link_periph_interface>:
							interface_ic_addr_type_td ic_addr_type,
							void * const p_low_lvl_interface_handle,
							p_interface_write_ftd write_func,
							p_interface_read_ftd read_func,
							p_delay_us_ftd delay_func)
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
	p_periph_interface->console_send = NULL;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	621a      	str	r2, [r3, #32]
	p_periph_interface->delay_us = delay_func;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1a0:	61da      	str	r2, [r3, #28]
	p_periph_interface->params.interface_type = interface_type;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	7e3a      	ldrb	r2, [r7, #24]
 800d1a6:	701a      	strb	r2, [r3, #0]
	p_periph_interface->params.ic_addr_type = ic_addr_type;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	7f3a      	ldrb	r2, [r7, #28]
 800d1ac:	705a      	strb	r2, [r3, #1]
	p_periph_interface->params.p_interface_handle = p_low_lvl_interface_handle;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6a3a      	ldr	r2, [r7, #32]
 800d1b2:	605a      	str	r2, [r3, #4]
	p_periph_interface->read = read_func;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1b8:	619a      	str	r2, [r3, #24]
	p_periph_interface->write = write_func;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1be:	615a      	str	r2, [r3, #20]

	p_periph_interface->interface_events_handle.p_interface_events_handle = p_interface_events_handle;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	609a      	str	r2, [r3, #8]
	p_periph_interface->interface_events_handle.tx_done_events_flags = tx_done_event_flag;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	60da      	str	r2, [r3, #12]
	p_periph_interface->interface_events_handle.rx_done_events_flags = rx_done_event_flag;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	611a      	str	r2, [r3, #16]
}
 800d1d2:	bf00      	nop
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bc80      	pop	{r7}
 800d1da:	4770      	bx	lr

0800d1dc <link_gpio_interface>:
/**
 * \brief
 *
 */
void link_gpio_interface(gpio_interface_td *p_gpio_interface, p_gpio_set_ftd set_func, p_gpio_get_ftd get_func)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	p_gpio_interface->gpio_get = get_func;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	605a      	str	r2, [r3, #4]
	p_gpio_interface->gpio_set = set_func;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	601a      	str	r2, [r3, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bc80      	pop	{r7}
 800d1fc:	4770      	bx	lr
	...

0800d200 <get_hard_uart_interface_handle>:
/**
 * \brief
 *
 */
periph_interface_td *get_hard_uart_interface_handle(const uint8_t handle_number)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	4603      	mov	r3, r0
 800d208:	71fb      	strb	r3, [r7, #7]
	periph_interface_td *p_handle = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]

	if(!(handle_number > (HW_UART_INTERFACE_HANDLE_SIZE - 1)))
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d807      	bhi.n	800d224 <get_hard_uart_interface_handle+0x24>
	{
		p_handle = &_hw_uart_interface_handle_array[handle_number];
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	4613      	mov	r3, r2
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4a04      	ldr	r2, [pc, #16]	@ (800d230 <get_hard_uart_interface_handle+0x30>)
 800d220:	4413      	add	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]
	}

	return p_handle;
 800d224:	68fb      	ldr	r3, [r7, #12]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bc80      	pop	{r7}
 800d22e:	4770      	bx	lr
 800d230:	20004300 	.word	0x20004300

0800d234 <uart_write_dma>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_write_dma(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3308      	adds	r3, #8
 800d248:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	72fb      	strb	r3, [r7, #11]

	user_uart_tx_dma(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	6819      	ldr	r1, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	2300      	movs	r3, #0
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f000 f84a 	bl	800d2f8 <user_uart_tx_dma>

	/// if we have an event for this interface
	if(p_interface_events_handle != NULL)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00f      	beq.n	800d28a <uart_write_dma+0x56>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->tx_done_events_flags);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f000 f86b 	bl	800d350 <user_wait_event_flags>
 800d27a:	4603      	mov	r3, r0
 800d27c:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 800d27e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <uart_write_dma+0x56>
		{
			periph_io_status = IO_ERROR;
 800d286:	23fe      	movs	r3, #254	@ 0xfe
 800d288:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800d28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <uart_read_dma>:

/**
 * \brief UART write function
 */
periph_io_status_td uart_read_dma(void *p_periph_interface, interface_data_info_td *p_interface_data_info)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
	void *p_interface_handle = ((periph_interface_td *) p_periph_interface)->params.p_interface_handle;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	613b      	str	r3, [r7, #16]
	interface_events_td *p_interface_events_handle = &((periph_interface_td *) p_periph_interface)->interface_events_handle;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	60fb      	str	r3, [r7, #12]
	periph_io_status_td periph_io_status = IO_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75fb      	strb	r3, [r7, #23]
	user_hw_abstr_status_td user_status = USER_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	72fb      	strb	r3, [r7, #11]

	user_uart_rx_dma(p_interface_handle, p_interface_data_info->p_data, p_interface_data_info->data_size, TIMEOUT_NONE);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	6819      	ldr	r1, [r3, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	2300      	movs	r3, #0
 800d2c0:	6938      	ldr	r0, [r7, #16]
 800d2c2:	f000 f82f 	bl	800d324 <user_uart_rx_dma>

	/// if we have an event for this interface
	if(p_interface_events_handle != NULL)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00f      	beq.n	800d2ec <uart_read_dma+0x56>
	{
		user_status = user_wait_event_flags(p_interface_events_handle->p_interface_events_handle, p_interface_events_handle->rx_done_events_flags);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	f000 f83a 	bl	800d350 <user_wait_event_flags>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	72fb      	strb	r3, [r7, #11]

		if(user_status != USER_OK)
 800d2e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <uart_read_dma+0x56>
		{
			periph_io_status = IO_ERROR;
 800d2e8:	23fe      	movs	r3, #254	@ 0xfe
 800d2ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	return periph_io_status;
 800d2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <user_uart_tx_dma>:
#endif

#ifdef HAL_UART_MODULE_ENABLED

user_hw_abstr_status_td user_uart_tx_dma(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Transmit_DMA((UART_HandleTypeDef *)p_interface_handle, p_data, data_size);
 800d30c:	88fb      	ldrh	r3, [r7, #6]
 800d30e:	461a      	mov	r2, r3
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7f7 faca 	bl	80048ac <HAL_UART_Transmit_DMA>

	return user_status;
 800d318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <user_uart_rx_dma>:

user_hw_abstr_status_td user_uart_rx_dma(void *const p_interface_handle, const uint8_t *const p_data, const uint16_t data_size, uint32_t timeout)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	603b      	str	r3, [r7, #0]
 800d330:	4613      	mov	r3, r2
 800d332:	80fb      	strh	r3, [r7, #6]
	user_hw_abstr_status_td user_status = USER_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Receive_DMA((UART_HandleTypeDef *)p_interface_handle, p_data, data_size);
 800d338:	88fb      	ldrh	r3, [r7, #6]
 800d33a:	461a      	mov	r2, r3
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7f7 fb24 	bl	800498c <HAL_UART_Receive_DMA>

	return user_status;
 800d344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <user_wait_event_flags>:

#endif

user_hw_abstr_status_td user_wait_event_flags(void *const p_interface_events_handle, const uint32_t tx_done_event_flag)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
	user_hw_abstr_status_td user_status = USER_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	75fb      	strb	r3, [r7, #23]
	uint32_t event_status = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	613b      	str	r3, [r7, #16]
	osEventFlagsId_t evt_id = p_interface_events_handle;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	60fb      	str	r3, [r7, #12]

	event_status = osEventFlagsWait(evt_id, tx_done_event_flag, osFlagsWaitAny, osWaitForever); // wait for complete sending data
 800d366:	f04f 33ff 	mov.w	r3, #4294967295
 800d36a:	2200      	movs	r2, #0
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f7fa fc7c 	bl	8007c6c <osEventFlagsWait>
 800d374:	6138      	str	r0, [r7, #16]
	if((event_status & tx_done_event_flag) == 0)
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <user_wait_event_flags+0x34>
	{
		user_status = USER_ERROR;
 800d380:	23ff      	movs	r3, #255	@ 0xff
 800d382:	75fb      	strb	r3, [r7, #23]
	}

	return user_status;
 800d384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <init_periph_events>:
/**
 * \brief
 *
 */
void init_periph_events(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
	_periph_event_id = osEventFlagsNew(NULL);
 800d394:	2000      	movs	r0, #0
 800d396:	f7fa fbe8 	bl	8007b6a <osEventFlagsNew>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a06      	ldr	r2, [pc, #24]	@ (800d3b8 <init_periph_events+0x28>)
 800d39e:	6013      	str	r3, [r2, #0]
	if (_periph_event_id == NULL)
 800d3a0:	4b05      	ldr	r3, [pc, #20]	@ (800d3b8 <init_periph_events+0x28>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d004      	beq.n	800d3b2 <init_periph_events+0x22>
	{
		/// \\todo printf
	}
	else
	{
		set_cb_periph_event_id(_periph_event_id);
 800d3a8:	4b03      	ldr	r3, [pc, #12]	@ (800d3b8 <init_periph_events+0x28>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff fe81 	bl	800d0b4 <set_cb_periph_event_id>
	}
}
 800d3b2:	bf00      	nop
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20004348 	.word	0x20004348

0800d3bc <get_periph_event_id>:
/**
 * \brief
 *
 */
osEventFlagsId_t * get_periph_event_id(void)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	af00      	add	r7, sp, #0
	return _periph_event_id;
 800d3c0:	4b02      	ldr	r3, [pc, #8]	@ (800d3cc <get_periph_event_id+0x10>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bc80      	pop	{r7}
 800d3ca:	4770      	bx	lr
 800d3cc:	20004348 	.word	0x20004348

0800d3d0 <print_msg_queue_init>:
/**
 * \brief
 *
 */
void print_msg_queue_init(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	af00      	add	r7, sp, #0
	_print_msg_queue_id = osMessageQueueNew(PRINT_MSGQUEUE_OBJECTS, PRINT_MSGQUEUE_OBJECT_SIZE, NULL);
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	2180      	movs	r1, #128	@ 0x80
 800d3d8:	2010      	movs	r0, #16
 800d3da:	f7fa fcac 	bl	8007d36 <osMessageQueueNew>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4a04      	ldr	r2, [pc, #16]	@ (800d3f4 <print_msg_queue_init+0x24>)
 800d3e2:	6013      	str	r3, [r2, #0]

	if (_print_msg_queue_id == NULL)
 800d3e4:	4b03      	ldr	r3, [pc, #12]	@ (800d3f4 <print_msg_queue_init+0x24>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <print_msg_queue_init+0x20>
	{
	 // Message Queue object not created, handle failure
	  /// \todo printf
		while(1){}
 800d3ec:	bf00      	nop
 800d3ee:	e7fd      	b.n	800d3ec <print_msg_queue_init+0x1c>
	}
}
 800d3f0:	bf00      	nop
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	2000434c 	.word	0x2000434c

0800d3f8 <get_print_msg_queue_id>:
/**
 * \brief
 *
 */
osMessageQueueId_t get_print_msg_queue_id(void)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	af00      	add	r7, sp, #0
	return _print_msg_queue_id;
 800d3fc:	4b02      	ldr	r3, [pc, #8]	@ (800d408 <get_print_msg_queue_id+0x10>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
}
 800d400:	4618      	mov	r0, r3
 800d402:	46bd      	mov	sp, r7
 800d404:	bc80      	pop	{r7}
 800d406:	4770      	bx	lr
 800d408:	2000434c 	.word	0x2000434c

0800d40c <button_thread_init>:
/**
 * \brief
 *
 */
void button_thread_init(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0
	_button_thread_id = osThreadNew(button_thread, NULL, &_button_thread_attributes);
 800d410:	4a04      	ldr	r2, [pc, #16]	@ (800d424 <button_thread_init+0x18>)
 800d412:	2100      	movs	r1, #0
 800d414:	4804      	ldr	r0, [pc, #16]	@ (800d428 <button_thread_init+0x1c>)
 800d416:	f7fa fafb 	bl	8007a10 <osThreadNew>
 800d41a:	4603      	mov	r3, r0
 800d41c:	4a03      	ldr	r2, [pc, #12]	@ (800d42c <button_thread_init+0x20>)
 800d41e:	6013      	str	r3, [r2, #0]

	if(_button_thread_id == NULL)
	{
		/// \todo pprintf
	}
}
 800d420:	bf00      	nop
 800d422:	bd80      	pop	{r7, pc}
 800d424:	0800e0d4 	.word	0x0800e0d4
 800d428:	0800d431 	.word	0x0800d431
 800d42c:	20004350 	.word	0x20004350

0800d430 <button_thread>:
/**
 * \brief
 *
 */
void button_thread (void *argument)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	print_to_console("Buttons thread was started!");
 800d438:	480c      	ldr	r0, [pc, #48]	@ (800d46c <button_thread+0x3c>)
 800d43a:	f7ff fda5 	bl	800cf88 <print_to_console>

	while(1)
	{
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 800d43e:	4b0c      	ldr	r3, [pc, #48]	@ (800d470 <button_thread+0x40>)
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f003 0302 	and.w	r3, r3, #2
 800d446:	2b00      	cmp	r3, #0
 800d448:	d102      	bne.n	800d450 <button_thread+0x20>
		{
			print_to_console("User button 0 was pushed!");
 800d44a:	480a      	ldr	r0, [pc, #40]	@ (800d474 <button_thread+0x44>)
 800d44c:	f7ff fd9c 	bl	800cf88 <print_to_console>
		}

		if(!(GPIOA->IDR & GPIO_IDR_IDR15))
 800d450:	4b09      	ldr	r3, [pc, #36]	@ (800d478 <button_thread+0x48>)
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <button_thread+0x32>
		{
			print_to_console("User button 1 was pushed!");
 800d45c:	4807      	ldr	r0, [pc, #28]	@ (800d47c <button_thread+0x4c>)
 800d45e:	f7ff fd93 	bl	800cf88 <print_to_console>
		}

		osDelay(10);
 800d462:	200a      	movs	r0, #10
 800d464:	f7fa fb66 	bl	8007b34 <osDelay>
		if(!(GPIOB->IDR & GPIO_IDR_IDR1))
 800d468:	e7e9      	b.n	800d43e <button_thread+0xe>
 800d46a:	bf00      	nop
 800d46c:	0800dfe4 	.word	0x0800dfe4
 800d470:	40010c00 	.word	0x40010c00
 800d474:	0800e000 	.word	0x0800e000
 800d478:	40010800 	.word	0x40010800
 800d47c:	0800e01c 	.word	0x0800e01c

0800d480 <print_msg_thread_init>:

/**
 * \brief
 */
void print_msg_thread_init(void)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	af00      	add	r7, sp, #0
	_print_msg_thread_id = osThreadNew(print_msg_thread, NULL, &_print_msg_thread_attributes);
 800d484:	4a07      	ldr	r2, [pc, #28]	@ (800d4a4 <print_msg_thread_init+0x24>)
 800d486:	2100      	movs	r1, #0
 800d488:	4807      	ldr	r0, [pc, #28]	@ (800d4a8 <print_msg_thread_init+0x28>)
 800d48a:	f7fa fac1 	bl	8007a10 <osThreadNew>
 800d48e:	4603      	mov	r3, r0
 800d490:	4a06      	ldr	r2, [pc, #24]	@ (800d4ac <print_msg_thread_init+0x2c>)
 800d492:	6013      	str	r3, [r2, #0]

	if(_print_msg_thread_id == NULL)
 800d494:	4b05      	ldr	r3, [pc, #20]	@ (800d4ac <print_msg_thread_init+0x2c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d101      	bne.n	800d4a0 <print_msg_thread_init+0x20>
	{
		/// \todo pprintf
		while(1){}
 800d49c:	bf00      	nop
 800d49e:	e7fd      	b.n	800d49c <print_msg_thread_init+0x1c>
	}
}
 800d4a0:	bf00      	nop
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	0800e0f8 	.word	0x0800e0f8
 800d4a8:	0800d4b1 	.word	0x0800d4b1
 800d4ac:	20004354 	.word	0x20004354

0800d4b0 <print_msg_thread>:
/**
 * \brief
 *
 */
void print_msg_thread(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b0a2      	sub	sp, #136	@ 0x88
 800d4b4:	af00      	add	r7, sp, #0
	osStatus_t status = osOK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	osMessageQueueId_t print_msg_message_id = get_print_msg_queue_id();
 800d4bc:	f7ff ff9c 	bl	800d3f8 <get_print_msg_queue_id>
 800d4c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	uint8_t print_buffer[128] = {[0] = 0};
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	603b      	str	r3, [r7, #0]
 800d4c8:	1d3b      	adds	r3, r7, #4
 800d4ca:	227c      	movs	r2, #124	@ 0x7c
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f000 f848 	bl	800d564 <memset>

	while(1)
	{
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d4d4:	e019      	b.n	800d50a <print_msg_thread+0x5a>
	    {
			status = osMessageQueueGet(print_msg_message_id, print_buffer, NULL, osWaitForever);   // wait for message
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d4e2:	f7fa fcfb 	bl	8007edc <osMessageQueueGet>
 800d4e6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		    if (status == osOK)
 800d4ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10b      	bne.n	800d50a <print_msg_thread+0x5a>
		    {
		    	//printf(&print_buffer);
		        HAL_UART_Transmit(&huart1, print_buffer, strlen(print_buffer), 0xFFFF);
 800d4f2:	463b      	mov	r3, r7
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7f2 fe2b 	bl	8000150 <strlen>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	4639      	mov	r1, r7
 800d500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d504:	4806      	ldr	r0, [pc, #24]	@ (800d520 <print_msg_thread+0x70>)
 800d506:	f7f7 f945 	bl	8004794 <HAL_UART_Transmit>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d50a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d50e:	f7fa fd43 	bl	8007f98 <osMessageQueueGetCount>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1de      	bne.n	800d4d6 <print_msg_thread+0x26>
		    }
	    }

		osDelay(100);
 800d518:	2064      	movs	r0, #100	@ 0x64
 800d51a:	f7fa fb0b 	bl	8007b34 <osDelay>
	    while(osMessageQueueGetCount(print_msg_message_id) > 0)
 800d51e:	e7f4      	b.n	800d50a <print_msg_thread+0x5a>
 800d520:	20000268 	.word	0x20000268

0800d524 <siprintf>:
 800d524:	b40e      	push	{r1, r2, r3}
 800d526:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d52a:	b500      	push	{lr}
 800d52c:	b09c      	sub	sp, #112	@ 0x70
 800d52e:	ab1d      	add	r3, sp, #116	@ 0x74
 800d530:	9002      	str	r0, [sp, #8]
 800d532:	9006      	str	r0, [sp, #24]
 800d534:	9107      	str	r1, [sp, #28]
 800d536:	9104      	str	r1, [sp, #16]
 800d538:	4808      	ldr	r0, [pc, #32]	@ (800d55c <siprintf+0x38>)
 800d53a:	4909      	ldr	r1, [pc, #36]	@ (800d560 <siprintf+0x3c>)
 800d53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d540:	9105      	str	r1, [sp, #20]
 800d542:	6800      	ldr	r0, [r0, #0]
 800d544:	a902      	add	r1, sp, #8
 800d546:	9301      	str	r3, [sp, #4]
 800d548:	f000 f9f6 	bl	800d938 <_svfiprintf_r>
 800d54c:	2200      	movs	r2, #0
 800d54e:	9b02      	ldr	r3, [sp, #8]
 800d550:	701a      	strb	r2, [r3, #0]
 800d552:	b01c      	add	sp, #112	@ 0x70
 800d554:	f85d eb04 	ldr.w	lr, [sp], #4
 800d558:	b003      	add	sp, #12
 800d55a:	4770      	bx	lr
 800d55c:	20000180 	.word	0x20000180
 800d560:	ffff0208 	.word	0xffff0208

0800d564 <memset>:
 800d564:	4603      	mov	r3, r0
 800d566:	4402      	add	r2, r0
 800d568:	4293      	cmp	r3, r2
 800d56a:	d100      	bne.n	800d56e <memset+0xa>
 800d56c:	4770      	bx	lr
 800d56e:	f803 1b01 	strb.w	r1, [r3], #1
 800d572:	e7f9      	b.n	800d568 <memset+0x4>

0800d574 <_reclaim_reent>:
 800d574:	4b29      	ldr	r3, [pc, #164]	@ (800d61c <_reclaim_reent+0xa8>)
 800d576:	b570      	push	{r4, r5, r6, lr}
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4604      	mov	r4, r0
 800d57c:	4283      	cmp	r3, r0
 800d57e:	d04b      	beq.n	800d618 <_reclaim_reent+0xa4>
 800d580:	69c3      	ldr	r3, [r0, #28]
 800d582:	b1ab      	cbz	r3, 800d5b0 <_reclaim_reent+0x3c>
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	b16b      	cbz	r3, 800d5a4 <_reclaim_reent+0x30>
 800d588:	2500      	movs	r5, #0
 800d58a:	69e3      	ldr	r3, [r4, #28]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	5959      	ldr	r1, [r3, r5]
 800d590:	2900      	cmp	r1, #0
 800d592:	d13b      	bne.n	800d60c <_reclaim_reent+0x98>
 800d594:	3504      	adds	r5, #4
 800d596:	2d80      	cmp	r5, #128	@ 0x80
 800d598:	d1f7      	bne.n	800d58a <_reclaim_reent+0x16>
 800d59a:	69e3      	ldr	r3, [r4, #28]
 800d59c:	4620      	mov	r0, r4
 800d59e:	68d9      	ldr	r1, [r3, #12]
 800d5a0:	f000 f878 	bl	800d694 <_free_r>
 800d5a4:	69e3      	ldr	r3, [r4, #28]
 800d5a6:	6819      	ldr	r1, [r3, #0]
 800d5a8:	b111      	cbz	r1, 800d5b0 <_reclaim_reent+0x3c>
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 f872 	bl	800d694 <_free_r>
 800d5b0:	6961      	ldr	r1, [r4, #20]
 800d5b2:	b111      	cbz	r1, 800d5ba <_reclaim_reent+0x46>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 f86d 	bl	800d694 <_free_r>
 800d5ba:	69e1      	ldr	r1, [r4, #28]
 800d5bc:	b111      	cbz	r1, 800d5c4 <_reclaim_reent+0x50>
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 f868 	bl	800d694 <_free_r>
 800d5c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d5c6:	b111      	cbz	r1, 800d5ce <_reclaim_reent+0x5a>
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 f863 	bl	800d694 <_free_r>
 800d5ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5d0:	b111      	cbz	r1, 800d5d8 <_reclaim_reent+0x64>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 f85e 	bl	800d694 <_free_r>
 800d5d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d5da:	b111      	cbz	r1, 800d5e2 <_reclaim_reent+0x6e>
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f000 f859 	bl	800d694 <_free_r>
 800d5e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d5e4:	b111      	cbz	r1, 800d5ec <_reclaim_reent+0x78>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f854 	bl	800d694 <_free_r>
 800d5ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d5ee:	b111      	cbz	r1, 800d5f6 <_reclaim_reent+0x82>
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 f84f 	bl	800d694 <_free_r>
 800d5f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d5f8:	b111      	cbz	r1, 800d600 <_reclaim_reent+0x8c>
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f000 f84a 	bl	800d694 <_free_r>
 800d600:	6a23      	ldr	r3, [r4, #32]
 800d602:	b14b      	cbz	r3, 800d618 <_reclaim_reent+0xa4>
 800d604:	4620      	mov	r0, r4
 800d606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d60a:	4718      	bx	r3
 800d60c:	680e      	ldr	r6, [r1, #0]
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 f840 	bl	800d694 <_free_r>
 800d614:	4631      	mov	r1, r6
 800d616:	e7bb      	b.n	800d590 <_reclaim_reent+0x1c>
 800d618:	bd70      	pop	{r4, r5, r6, pc}
 800d61a:	bf00      	nop
 800d61c:	20000180 	.word	0x20000180

0800d620 <__errno>:
 800d620:	4b01      	ldr	r3, [pc, #4]	@ (800d628 <__errno+0x8>)
 800d622:	6818      	ldr	r0, [r3, #0]
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	20000180 	.word	0x20000180

0800d62c <__libc_init_array>:
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	2600      	movs	r6, #0
 800d630:	4d0c      	ldr	r5, [pc, #48]	@ (800d664 <__libc_init_array+0x38>)
 800d632:	4c0d      	ldr	r4, [pc, #52]	@ (800d668 <__libc_init_array+0x3c>)
 800d634:	1b64      	subs	r4, r4, r5
 800d636:	10a4      	asrs	r4, r4, #2
 800d638:	42a6      	cmp	r6, r4
 800d63a:	d109      	bne.n	800d650 <__libc_init_array+0x24>
 800d63c:	f000 fc78 	bl	800df30 <_init>
 800d640:	2600      	movs	r6, #0
 800d642:	4d0a      	ldr	r5, [pc, #40]	@ (800d66c <__libc_init_array+0x40>)
 800d644:	4c0a      	ldr	r4, [pc, #40]	@ (800d670 <__libc_init_array+0x44>)
 800d646:	1b64      	subs	r4, r4, r5
 800d648:	10a4      	asrs	r4, r4, #2
 800d64a:	42a6      	cmp	r6, r4
 800d64c:	d105      	bne.n	800d65a <__libc_init_array+0x2e>
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	f855 3b04 	ldr.w	r3, [r5], #4
 800d654:	4798      	blx	r3
 800d656:	3601      	adds	r6, #1
 800d658:	e7ee      	b.n	800d638 <__libc_init_array+0xc>
 800d65a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d65e:	4798      	blx	r3
 800d660:	3601      	adds	r6, #1
 800d662:	e7f2      	b.n	800d64a <__libc_init_array+0x1e>
 800d664:	0800e158 	.word	0x0800e158
 800d668:	0800e158 	.word	0x0800e158
 800d66c:	0800e158 	.word	0x0800e158
 800d670:	0800e15c 	.word	0x0800e15c

0800d674 <__retarget_lock_acquire_recursive>:
 800d674:	4770      	bx	lr

0800d676 <__retarget_lock_release_recursive>:
 800d676:	4770      	bx	lr

0800d678 <memcpy>:
 800d678:	440a      	add	r2, r1
 800d67a:	4291      	cmp	r1, r2
 800d67c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d680:	d100      	bne.n	800d684 <memcpy+0xc>
 800d682:	4770      	bx	lr
 800d684:	b510      	push	{r4, lr}
 800d686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d68a:	4291      	cmp	r1, r2
 800d68c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d690:	d1f9      	bne.n	800d686 <memcpy+0xe>
 800d692:	bd10      	pop	{r4, pc}

0800d694 <_free_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4605      	mov	r5, r0
 800d698:	2900      	cmp	r1, #0
 800d69a:	d040      	beq.n	800d71e <_free_r+0x8a>
 800d69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a0:	1f0c      	subs	r4, r1, #4
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	bfb8      	it	lt
 800d6a6:	18e4      	addlt	r4, r4, r3
 800d6a8:	f000 f8de 	bl	800d868 <__malloc_lock>
 800d6ac:	4a1c      	ldr	r2, [pc, #112]	@ (800d720 <_free_r+0x8c>)
 800d6ae:	6813      	ldr	r3, [r2, #0]
 800d6b0:	b933      	cbnz	r3, 800d6c0 <_free_r+0x2c>
 800d6b2:	6063      	str	r3, [r4, #4]
 800d6b4:	6014      	str	r4, [r2, #0]
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6bc:	f000 b8da 	b.w	800d874 <__malloc_unlock>
 800d6c0:	42a3      	cmp	r3, r4
 800d6c2:	d908      	bls.n	800d6d6 <_free_r+0x42>
 800d6c4:	6820      	ldr	r0, [r4, #0]
 800d6c6:	1821      	adds	r1, r4, r0
 800d6c8:	428b      	cmp	r3, r1
 800d6ca:	bf01      	itttt	eq
 800d6cc:	6819      	ldreq	r1, [r3, #0]
 800d6ce:	685b      	ldreq	r3, [r3, #4]
 800d6d0:	1809      	addeq	r1, r1, r0
 800d6d2:	6021      	streq	r1, [r4, #0]
 800d6d4:	e7ed      	b.n	800d6b2 <_free_r+0x1e>
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	b10b      	cbz	r3, 800d6e0 <_free_r+0x4c>
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	d9fa      	bls.n	800d6d6 <_free_r+0x42>
 800d6e0:	6811      	ldr	r1, [r2, #0]
 800d6e2:	1850      	adds	r0, r2, r1
 800d6e4:	42a0      	cmp	r0, r4
 800d6e6:	d10b      	bne.n	800d700 <_free_r+0x6c>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	1850      	adds	r0, r2, r1
 800d6ee:	4283      	cmp	r3, r0
 800d6f0:	6011      	str	r1, [r2, #0]
 800d6f2:	d1e0      	bne.n	800d6b6 <_free_r+0x22>
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	4408      	add	r0, r1
 800d6fa:	6010      	str	r0, [r2, #0]
 800d6fc:	6053      	str	r3, [r2, #4]
 800d6fe:	e7da      	b.n	800d6b6 <_free_r+0x22>
 800d700:	d902      	bls.n	800d708 <_free_r+0x74>
 800d702:	230c      	movs	r3, #12
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	e7d6      	b.n	800d6b6 <_free_r+0x22>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	1821      	adds	r1, r4, r0
 800d70c:	428b      	cmp	r3, r1
 800d70e:	bf01      	itttt	eq
 800d710:	6819      	ldreq	r1, [r3, #0]
 800d712:	685b      	ldreq	r3, [r3, #4]
 800d714:	1809      	addeq	r1, r1, r0
 800d716:	6021      	streq	r1, [r4, #0]
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	6054      	str	r4, [r2, #4]
 800d71c:	e7cb      	b.n	800d6b6 <_free_r+0x22>
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	2000449c 	.word	0x2000449c

0800d724 <sbrk_aligned>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	4e0f      	ldr	r6, [pc, #60]	@ (800d764 <sbrk_aligned+0x40>)
 800d728:	460c      	mov	r4, r1
 800d72a:	6831      	ldr	r1, [r6, #0]
 800d72c:	4605      	mov	r5, r0
 800d72e:	b911      	cbnz	r1, 800d736 <sbrk_aligned+0x12>
 800d730:	f000 fbaa 	bl	800de88 <_sbrk_r>
 800d734:	6030      	str	r0, [r6, #0]
 800d736:	4621      	mov	r1, r4
 800d738:	4628      	mov	r0, r5
 800d73a:	f000 fba5 	bl	800de88 <_sbrk_r>
 800d73e:	1c43      	adds	r3, r0, #1
 800d740:	d103      	bne.n	800d74a <sbrk_aligned+0x26>
 800d742:	f04f 34ff 	mov.w	r4, #4294967295
 800d746:	4620      	mov	r0, r4
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d0f8      	beq.n	800d746 <sbrk_aligned+0x22>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 fb96 	bl	800de88 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d1f2      	bne.n	800d746 <sbrk_aligned+0x22>
 800d760:	e7ef      	b.n	800d742 <sbrk_aligned+0x1e>
 800d762:	bf00      	nop
 800d764:	20004498 	.word	0x20004498

0800d768 <_malloc_r>:
 800d768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d76c:	1ccd      	adds	r5, r1, #3
 800d76e:	f025 0503 	bic.w	r5, r5, #3
 800d772:	3508      	adds	r5, #8
 800d774:	2d0c      	cmp	r5, #12
 800d776:	bf38      	it	cc
 800d778:	250c      	movcc	r5, #12
 800d77a:	2d00      	cmp	r5, #0
 800d77c:	4606      	mov	r6, r0
 800d77e:	db01      	blt.n	800d784 <_malloc_r+0x1c>
 800d780:	42a9      	cmp	r1, r5
 800d782:	d904      	bls.n	800d78e <_malloc_r+0x26>
 800d784:	230c      	movs	r3, #12
 800d786:	6033      	str	r3, [r6, #0]
 800d788:	2000      	movs	r0, #0
 800d78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d78e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d864 <_malloc_r+0xfc>
 800d792:	f000 f869 	bl	800d868 <__malloc_lock>
 800d796:	f8d8 3000 	ldr.w	r3, [r8]
 800d79a:	461c      	mov	r4, r3
 800d79c:	bb44      	cbnz	r4, 800d7f0 <_malloc_r+0x88>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7ff ffbf 	bl	800d724 <sbrk_aligned>
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	d158      	bne.n	800d85e <_malloc_r+0xf6>
 800d7ac:	f8d8 4000 	ldr.w	r4, [r8]
 800d7b0:	4627      	mov	r7, r4
 800d7b2:	2f00      	cmp	r7, #0
 800d7b4:	d143      	bne.n	800d83e <_malloc_r+0xd6>
 800d7b6:	2c00      	cmp	r4, #0
 800d7b8:	d04b      	beq.n	800d852 <_malloc_r+0xea>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4630      	mov	r0, r6
 800d7c0:	eb04 0903 	add.w	r9, r4, r3
 800d7c4:	f000 fb60 	bl	800de88 <_sbrk_r>
 800d7c8:	4581      	cmp	r9, r0
 800d7ca:	d142      	bne.n	800d852 <_malloc_r+0xea>
 800d7cc:	6821      	ldr	r1, [r4, #0]
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	1a6d      	subs	r5, r5, r1
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	f7ff ffa6 	bl	800d724 <sbrk_aligned>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d03a      	beq.n	800d852 <_malloc_r+0xea>
 800d7dc:	6823      	ldr	r3, [r4, #0]
 800d7de:	442b      	add	r3, r5
 800d7e0:	6023      	str	r3, [r4, #0]
 800d7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d7e6:	685a      	ldr	r2, [r3, #4]
 800d7e8:	bb62      	cbnz	r2, 800d844 <_malloc_r+0xdc>
 800d7ea:	f8c8 7000 	str.w	r7, [r8]
 800d7ee:	e00f      	b.n	800d810 <_malloc_r+0xa8>
 800d7f0:	6822      	ldr	r2, [r4, #0]
 800d7f2:	1b52      	subs	r2, r2, r5
 800d7f4:	d420      	bmi.n	800d838 <_malloc_r+0xd0>
 800d7f6:	2a0b      	cmp	r2, #11
 800d7f8:	d917      	bls.n	800d82a <_malloc_r+0xc2>
 800d7fa:	1961      	adds	r1, r4, r5
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	6025      	str	r5, [r4, #0]
 800d800:	bf18      	it	ne
 800d802:	6059      	strne	r1, [r3, #4]
 800d804:	6863      	ldr	r3, [r4, #4]
 800d806:	bf08      	it	eq
 800d808:	f8c8 1000 	streq.w	r1, [r8]
 800d80c:	5162      	str	r2, [r4, r5]
 800d80e:	604b      	str	r3, [r1, #4]
 800d810:	4630      	mov	r0, r6
 800d812:	f000 f82f 	bl	800d874 <__malloc_unlock>
 800d816:	f104 000b 	add.w	r0, r4, #11
 800d81a:	1d23      	adds	r3, r4, #4
 800d81c:	f020 0007 	bic.w	r0, r0, #7
 800d820:	1ac2      	subs	r2, r0, r3
 800d822:	bf1c      	itt	ne
 800d824:	1a1b      	subne	r3, r3, r0
 800d826:	50a3      	strne	r3, [r4, r2]
 800d828:	e7af      	b.n	800d78a <_malloc_r+0x22>
 800d82a:	6862      	ldr	r2, [r4, #4]
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	bf0c      	ite	eq
 800d830:	f8c8 2000 	streq.w	r2, [r8]
 800d834:	605a      	strne	r2, [r3, #4]
 800d836:	e7eb      	b.n	800d810 <_malloc_r+0xa8>
 800d838:	4623      	mov	r3, r4
 800d83a:	6864      	ldr	r4, [r4, #4]
 800d83c:	e7ae      	b.n	800d79c <_malloc_r+0x34>
 800d83e:	463c      	mov	r4, r7
 800d840:	687f      	ldr	r7, [r7, #4]
 800d842:	e7b6      	b.n	800d7b2 <_malloc_r+0x4a>
 800d844:	461a      	mov	r2, r3
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	42a3      	cmp	r3, r4
 800d84a:	d1fb      	bne.n	800d844 <_malloc_r+0xdc>
 800d84c:	2300      	movs	r3, #0
 800d84e:	6053      	str	r3, [r2, #4]
 800d850:	e7de      	b.n	800d810 <_malloc_r+0xa8>
 800d852:	230c      	movs	r3, #12
 800d854:	4630      	mov	r0, r6
 800d856:	6033      	str	r3, [r6, #0]
 800d858:	f000 f80c 	bl	800d874 <__malloc_unlock>
 800d85c:	e794      	b.n	800d788 <_malloc_r+0x20>
 800d85e:	6005      	str	r5, [r0, #0]
 800d860:	e7d6      	b.n	800d810 <_malloc_r+0xa8>
 800d862:	bf00      	nop
 800d864:	2000449c 	.word	0x2000449c

0800d868 <__malloc_lock>:
 800d868:	4801      	ldr	r0, [pc, #4]	@ (800d870 <__malloc_lock+0x8>)
 800d86a:	f7ff bf03 	b.w	800d674 <__retarget_lock_acquire_recursive>
 800d86e:	bf00      	nop
 800d870:	20004494 	.word	0x20004494

0800d874 <__malloc_unlock>:
 800d874:	4801      	ldr	r0, [pc, #4]	@ (800d87c <__malloc_unlock+0x8>)
 800d876:	f7ff befe 	b.w	800d676 <__retarget_lock_release_recursive>
 800d87a:	bf00      	nop
 800d87c:	20004494 	.word	0x20004494

0800d880 <__ssputs_r>:
 800d880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d884:	461f      	mov	r7, r3
 800d886:	688e      	ldr	r6, [r1, #8]
 800d888:	4682      	mov	sl, r0
 800d88a:	42be      	cmp	r6, r7
 800d88c:	460c      	mov	r4, r1
 800d88e:	4690      	mov	r8, r2
 800d890:	680b      	ldr	r3, [r1, #0]
 800d892:	d82d      	bhi.n	800d8f0 <__ssputs_r+0x70>
 800d894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d89c:	d026      	beq.n	800d8ec <__ssputs_r+0x6c>
 800d89e:	6965      	ldr	r5, [r4, #20]
 800d8a0:	6909      	ldr	r1, [r1, #16]
 800d8a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8a6:	eba3 0901 	sub.w	r9, r3, r1
 800d8aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8ae:	1c7b      	adds	r3, r7, #1
 800d8b0:	444b      	add	r3, r9
 800d8b2:	106d      	asrs	r5, r5, #1
 800d8b4:	429d      	cmp	r5, r3
 800d8b6:	bf38      	it	cc
 800d8b8:	461d      	movcc	r5, r3
 800d8ba:	0553      	lsls	r3, r2, #21
 800d8bc:	d527      	bpl.n	800d90e <__ssputs_r+0x8e>
 800d8be:	4629      	mov	r1, r5
 800d8c0:	f7ff ff52 	bl	800d768 <_malloc_r>
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	b360      	cbz	r0, 800d922 <__ssputs_r+0xa2>
 800d8c8:	464a      	mov	r2, r9
 800d8ca:	6921      	ldr	r1, [r4, #16]
 800d8cc:	f7ff fed4 	bl	800d678 <memcpy>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	6126      	str	r6, [r4, #16]
 800d8de:	444e      	add	r6, r9
 800d8e0:	6026      	str	r6, [r4, #0]
 800d8e2:	463e      	mov	r6, r7
 800d8e4:	6165      	str	r5, [r4, #20]
 800d8e6:	eba5 0509 	sub.w	r5, r5, r9
 800d8ea:	60a5      	str	r5, [r4, #8]
 800d8ec:	42be      	cmp	r6, r7
 800d8ee:	d900      	bls.n	800d8f2 <__ssputs_r+0x72>
 800d8f0:	463e      	mov	r6, r7
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	6820      	ldr	r0, [r4, #0]
 800d8f8:	f000 faac 	bl	800de54 <memmove>
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	68a3      	ldr	r3, [r4, #8]
 800d900:	1b9b      	subs	r3, r3, r6
 800d902:	60a3      	str	r3, [r4, #8]
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	4433      	add	r3, r6
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90e:	462a      	mov	r2, r5
 800d910:	f000 fad8 	bl	800dec4 <_realloc_r>
 800d914:	4606      	mov	r6, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d1e0      	bne.n	800d8dc <__ssputs_r+0x5c>
 800d91a:	4650      	mov	r0, sl
 800d91c:	6921      	ldr	r1, [r4, #16]
 800d91e:	f7ff feb9 	bl	800d694 <_free_r>
 800d922:	230c      	movs	r3, #12
 800d924:	f8ca 3000 	str.w	r3, [sl]
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	f04f 30ff 	mov.w	r0, #4294967295
 800d92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	e7e9      	b.n	800d90a <__ssputs_r+0x8a>
	...

0800d938 <_svfiprintf_r>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	4698      	mov	r8, r3
 800d93e:	898b      	ldrh	r3, [r1, #12]
 800d940:	4607      	mov	r7, r0
 800d942:	061b      	lsls	r3, r3, #24
 800d944:	460d      	mov	r5, r1
 800d946:	4614      	mov	r4, r2
 800d948:	b09d      	sub	sp, #116	@ 0x74
 800d94a:	d510      	bpl.n	800d96e <_svfiprintf_r+0x36>
 800d94c:	690b      	ldr	r3, [r1, #16]
 800d94e:	b973      	cbnz	r3, 800d96e <_svfiprintf_r+0x36>
 800d950:	2140      	movs	r1, #64	@ 0x40
 800d952:	f7ff ff09 	bl	800d768 <_malloc_r>
 800d956:	6028      	str	r0, [r5, #0]
 800d958:	6128      	str	r0, [r5, #16]
 800d95a:	b930      	cbnz	r0, 800d96a <_svfiprintf_r+0x32>
 800d95c:	230c      	movs	r3, #12
 800d95e:	603b      	str	r3, [r7, #0]
 800d960:	f04f 30ff 	mov.w	r0, #4294967295
 800d964:	b01d      	add	sp, #116	@ 0x74
 800d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96a:	2340      	movs	r3, #64	@ 0x40
 800d96c:	616b      	str	r3, [r5, #20]
 800d96e:	2300      	movs	r3, #0
 800d970:	9309      	str	r3, [sp, #36]	@ 0x24
 800d972:	2320      	movs	r3, #32
 800d974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d978:	2330      	movs	r3, #48	@ 0x30
 800d97a:	f04f 0901 	mov.w	r9, #1
 800d97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d982:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800db1c <_svfiprintf_r+0x1e4>
 800d986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d98a:	4623      	mov	r3, r4
 800d98c:	469a      	mov	sl, r3
 800d98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d992:	b10a      	cbz	r2, 800d998 <_svfiprintf_r+0x60>
 800d994:	2a25      	cmp	r2, #37	@ 0x25
 800d996:	d1f9      	bne.n	800d98c <_svfiprintf_r+0x54>
 800d998:	ebba 0b04 	subs.w	fp, sl, r4
 800d99c:	d00b      	beq.n	800d9b6 <_svfiprintf_r+0x7e>
 800d99e:	465b      	mov	r3, fp
 800d9a0:	4622      	mov	r2, r4
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff ff6b 	bl	800d880 <__ssputs_r>
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f000 80a7 	beq.w	800dafe <_svfiprintf_r+0x1c6>
 800d9b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9b2:	445a      	add	r2, fp
 800d9b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 809f 	beq.w	800dafe <_svfiprintf_r+0x1c6>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9ca:	f10a 0a01 	add.w	sl, sl, #1
 800d9ce:	9304      	str	r3, [sp, #16]
 800d9d0:	9307      	str	r3, [sp, #28]
 800d9d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9d8:	4654      	mov	r4, sl
 800d9da:	2205      	movs	r2, #5
 800d9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e0:	484e      	ldr	r0, [pc, #312]	@ (800db1c <_svfiprintf_r+0x1e4>)
 800d9e2:	f000 fa61 	bl	800dea8 <memchr>
 800d9e6:	9a04      	ldr	r2, [sp, #16]
 800d9e8:	b9d8      	cbnz	r0, 800da22 <_svfiprintf_r+0xea>
 800d9ea:	06d0      	lsls	r0, r2, #27
 800d9ec:	bf44      	itt	mi
 800d9ee:	2320      	movmi	r3, #32
 800d9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9f4:	0711      	lsls	r1, r2, #28
 800d9f6:	bf44      	itt	mi
 800d9f8:	232b      	movmi	r3, #43	@ 0x2b
 800d9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800da02:	2b2a      	cmp	r3, #42	@ 0x2a
 800da04:	d015      	beq.n	800da32 <_svfiprintf_r+0xfa>
 800da06:	4654      	mov	r4, sl
 800da08:	2000      	movs	r0, #0
 800da0a:	f04f 0c0a 	mov.w	ip, #10
 800da0e:	9a07      	ldr	r2, [sp, #28]
 800da10:	4621      	mov	r1, r4
 800da12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da16:	3b30      	subs	r3, #48	@ 0x30
 800da18:	2b09      	cmp	r3, #9
 800da1a:	d94b      	bls.n	800dab4 <_svfiprintf_r+0x17c>
 800da1c:	b1b0      	cbz	r0, 800da4c <_svfiprintf_r+0x114>
 800da1e:	9207      	str	r2, [sp, #28]
 800da20:	e014      	b.n	800da4c <_svfiprintf_r+0x114>
 800da22:	eba0 0308 	sub.w	r3, r0, r8
 800da26:	fa09 f303 	lsl.w	r3, r9, r3
 800da2a:	4313      	orrs	r3, r2
 800da2c:	46a2      	mov	sl, r4
 800da2e:	9304      	str	r3, [sp, #16]
 800da30:	e7d2      	b.n	800d9d8 <_svfiprintf_r+0xa0>
 800da32:	9b03      	ldr	r3, [sp, #12]
 800da34:	1d19      	adds	r1, r3, #4
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	9103      	str	r1, [sp, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	bfbb      	ittet	lt
 800da3e:	425b      	neglt	r3, r3
 800da40:	f042 0202 	orrlt.w	r2, r2, #2
 800da44:	9307      	strge	r3, [sp, #28]
 800da46:	9307      	strlt	r3, [sp, #28]
 800da48:	bfb8      	it	lt
 800da4a:	9204      	strlt	r2, [sp, #16]
 800da4c:	7823      	ldrb	r3, [r4, #0]
 800da4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800da50:	d10a      	bne.n	800da68 <_svfiprintf_r+0x130>
 800da52:	7863      	ldrb	r3, [r4, #1]
 800da54:	2b2a      	cmp	r3, #42	@ 0x2a
 800da56:	d132      	bne.n	800dabe <_svfiprintf_r+0x186>
 800da58:	9b03      	ldr	r3, [sp, #12]
 800da5a:	3402      	adds	r4, #2
 800da5c:	1d1a      	adds	r2, r3, #4
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	9203      	str	r2, [sp, #12]
 800da62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800db20 <_svfiprintf_r+0x1e8>
 800da6c:	2203      	movs	r2, #3
 800da6e:	4650      	mov	r0, sl
 800da70:	7821      	ldrb	r1, [r4, #0]
 800da72:	f000 fa19 	bl	800dea8 <memchr>
 800da76:	b138      	cbz	r0, 800da88 <_svfiprintf_r+0x150>
 800da78:	2240      	movs	r2, #64	@ 0x40
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	eba0 000a 	sub.w	r0, r0, sl
 800da80:	4082      	lsls	r2, r0
 800da82:	4313      	orrs	r3, r2
 800da84:	3401      	adds	r4, #1
 800da86:	9304      	str	r3, [sp, #16]
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	2206      	movs	r2, #6
 800da8e:	4825      	ldr	r0, [pc, #148]	@ (800db24 <_svfiprintf_r+0x1ec>)
 800da90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da94:	f000 fa08 	bl	800dea8 <memchr>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d036      	beq.n	800db0a <_svfiprintf_r+0x1d2>
 800da9c:	4b22      	ldr	r3, [pc, #136]	@ (800db28 <_svfiprintf_r+0x1f0>)
 800da9e:	bb1b      	cbnz	r3, 800dae8 <_svfiprintf_r+0x1b0>
 800daa0:	9b03      	ldr	r3, [sp, #12]
 800daa2:	3307      	adds	r3, #7
 800daa4:	f023 0307 	bic.w	r3, r3, #7
 800daa8:	3308      	adds	r3, #8
 800daaa:	9303      	str	r3, [sp, #12]
 800daac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daae:	4433      	add	r3, r6
 800dab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab2:	e76a      	b.n	800d98a <_svfiprintf_r+0x52>
 800dab4:	460c      	mov	r4, r1
 800dab6:	2001      	movs	r0, #1
 800dab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dabc:	e7a8      	b.n	800da10 <_svfiprintf_r+0xd8>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f04f 0c0a 	mov.w	ip, #10
 800dac4:	4619      	mov	r1, r3
 800dac6:	3401      	adds	r4, #1
 800dac8:	9305      	str	r3, [sp, #20]
 800daca:	4620      	mov	r0, r4
 800dacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad0:	3a30      	subs	r2, #48	@ 0x30
 800dad2:	2a09      	cmp	r2, #9
 800dad4:	d903      	bls.n	800dade <_svfiprintf_r+0x1a6>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0c6      	beq.n	800da68 <_svfiprintf_r+0x130>
 800dada:	9105      	str	r1, [sp, #20]
 800dadc:	e7c4      	b.n	800da68 <_svfiprintf_r+0x130>
 800dade:	4604      	mov	r4, r0
 800dae0:	2301      	movs	r3, #1
 800dae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae6:	e7f0      	b.n	800daca <_svfiprintf_r+0x192>
 800dae8:	ab03      	add	r3, sp, #12
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	462a      	mov	r2, r5
 800daee:	4638      	mov	r0, r7
 800daf0:	4b0e      	ldr	r3, [pc, #56]	@ (800db2c <_svfiprintf_r+0x1f4>)
 800daf2:	a904      	add	r1, sp, #16
 800daf4:	f3af 8000 	nop.w
 800daf8:	1c42      	adds	r2, r0, #1
 800dafa:	4606      	mov	r6, r0
 800dafc:	d1d6      	bne.n	800daac <_svfiprintf_r+0x174>
 800dafe:	89ab      	ldrh	r3, [r5, #12]
 800db00:	065b      	lsls	r3, r3, #25
 800db02:	f53f af2d 	bmi.w	800d960 <_svfiprintf_r+0x28>
 800db06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db08:	e72c      	b.n	800d964 <_svfiprintf_r+0x2c>
 800db0a:	ab03      	add	r3, sp, #12
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	462a      	mov	r2, r5
 800db10:	4638      	mov	r0, r7
 800db12:	4b06      	ldr	r3, [pc, #24]	@ (800db2c <_svfiprintf_r+0x1f4>)
 800db14:	a904      	add	r1, sp, #16
 800db16:	f000 f87d 	bl	800dc14 <_printf_i>
 800db1a:	e7ed      	b.n	800daf8 <_svfiprintf_r+0x1c0>
 800db1c:	0800e11c 	.word	0x0800e11c
 800db20:	0800e122 	.word	0x0800e122
 800db24:	0800e126 	.word	0x0800e126
 800db28:	00000000 	.word	0x00000000
 800db2c:	0800d881 	.word	0x0800d881

0800db30 <_printf_common>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	4616      	mov	r6, r2
 800db36:	4698      	mov	r8, r3
 800db38:	688a      	ldr	r2, [r1, #8]
 800db3a:	690b      	ldr	r3, [r1, #16]
 800db3c:	4607      	mov	r7, r0
 800db3e:	4293      	cmp	r3, r2
 800db40:	bfb8      	it	lt
 800db42:	4613      	movlt	r3, r2
 800db44:	6033      	str	r3, [r6, #0]
 800db46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db4a:	460c      	mov	r4, r1
 800db4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db50:	b10a      	cbz	r2, 800db56 <_printf_common+0x26>
 800db52:	3301      	adds	r3, #1
 800db54:	6033      	str	r3, [r6, #0]
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	0699      	lsls	r1, r3, #26
 800db5a:	bf42      	ittt	mi
 800db5c:	6833      	ldrmi	r3, [r6, #0]
 800db5e:	3302      	addmi	r3, #2
 800db60:	6033      	strmi	r3, [r6, #0]
 800db62:	6825      	ldr	r5, [r4, #0]
 800db64:	f015 0506 	ands.w	r5, r5, #6
 800db68:	d106      	bne.n	800db78 <_printf_common+0x48>
 800db6a:	f104 0a19 	add.w	sl, r4, #25
 800db6e:	68e3      	ldr	r3, [r4, #12]
 800db70:	6832      	ldr	r2, [r6, #0]
 800db72:	1a9b      	subs	r3, r3, r2
 800db74:	42ab      	cmp	r3, r5
 800db76:	dc2b      	bgt.n	800dbd0 <_printf_common+0xa0>
 800db78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	3b00      	subs	r3, #0
 800db80:	bf18      	it	ne
 800db82:	2301      	movne	r3, #1
 800db84:	0692      	lsls	r2, r2, #26
 800db86:	d430      	bmi.n	800dbea <_printf_common+0xba>
 800db88:	4641      	mov	r1, r8
 800db8a:	4638      	mov	r0, r7
 800db8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db90:	47c8      	blx	r9
 800db92:	3001      	adds	r0, #1
 800db94:	d023      	beq.n	800dbde <_printf_common+0xae>
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	6922      	ldr	r2, [r4, #16]
 800db9a:	f003 0306 	and.w	r3, r3, #6
 800db9e:	2b04      	cmp	r3, #4
 800dba0:	bf14      	ite	ne
 800dba2:	2500      	movne	r5, #0
 800dba4:	6833      	ldreq	r3, [r6, #0]
 800dba6:	f04f 0600 	mov.w	r6, #0
 800dbaa:	bf08      	it	eq
 800dbac:	68e5      	ldreq	r5, [r4, #12]
 800dbae:	f104 041a 	add.w	r4, r4, #26
 800dbb2:	bf08      	it	eq
 800dbb4:	1aed      	subeq	r5, r5, r3
 800dbb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dbba:	bf08      	it	eq
 800dbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	bfc4      	itt	gt
 800dbc4:	1a9b      	subgt	r3, r3, r2
 800dbc6:	18ed      	addgt	r5, r5, r3
 800dbc8:	42b5      	cmp	r5, r6
 800dbca:	d11a      	bne.n	800dc02 <_printf_common+0xd2>
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e008      	b.n	800dbe2 <_printf_common+0xb2>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	4641      	mov	r1, r8
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	47c8      	blx	r9
 800dbda:	3001      	adds	r0, #1
 800dbdc:	d103      	bne.n	800dbe6 <_printf_common+0xb6>
 800dbde:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe6:	3501      	adds	r5, #1
 800dbe8:	e7c1      	b.n	800db6e <_printf_common+0x3e>
 800dbea:	2030      	movs	r0, #48	@ 0x30
 800dbec:	18e1      	adds	r1, r4, r3
 800dbee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dbf8:	4422      	add	r2, r4
 800dbfa:	3302      	adds	r3, #2
 800dbfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc00:	e7c2      	b.n	800db88 <_printf_common+0x58>
 800dc02:	2301      	movs	r3, #1
 800dc04:	4622      	mov	r2, r4
 800dc06:	4641      	mov	r1, r8
 800dc08:	4638      	mov	r0, r7
 800dc0a:	47c8      	blx	r9
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d0e6      	beq.n	800dbde <_printf_common+0xae>
 800dc10:	3601      	adds	r6, #1
 800dc12:	e7d9      	b.n	800dbc8 <_printf_common+0x98>

0800dc14 <_printf_i>:
 800dc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc18:	7e0f      	ldrb	r7, [r1, #24]
 800dc1a:	4691      	mov	r9, r2
 800dc1c:	2f78      	cmp	r7, #120	@ 0x78
 800dc1e:	4680      	mov	r8, r0
 800dc20:	460c      	mov	r4, r1
 800dc22:	469a      	mov	sl, r3
 800dc24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc2a:	d807      	bhi.n	800dc3c <_printf_i+0x28>
 800dc2c:	2f62      	cmp	r7, #98	@ 0x62
 800dc2e:	d80a      	bhi.n	800dc46 <_printf_i+0x32>
 800dc30:	2f00      	cmp	r7, #0
 800dc32:	f000 80d3 	beq.w	800dddc <_printf_i+0x1c8>
 800dc36:	2f58      	cmp	r7, #88	@ 0x58
 800dc38:	f000 80ba 	beq.w	800ddb0 <_printf_i+0x19c>
 800dc3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc44:	e03a      	b.n	800dcbc <_printf_i+0xa8>
 800dc46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc4a:	2b15      	cmp	r3, #21
 800dc4c:	d8f6      	bhi.n	800dc3c <_printf_i+0x28>
 800dc4e:	a101      	add	r1, pc, #4	@ (adr r1, 800dc54 <_printf_i+0x40>)
 800dc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc54:	0800dcad 	.word	0x0800dcad
 800dc58:	0800dcc1 	.word	0x0800dcc1
 800dc5c:	0800dc3d 	.word	0x0800dc3d
 800dc60:	0800dc3d 	.word	0x0800dc3d
 800dc64:	0800dc3d 	.word	0x0800dc3d
 800dc68:	0800dc3d 	.word	0x0800dc3d
 800dc6c:	0800dcc1 	.word	0x0800dcc1
 800dc70:	0800dc3d 	.word	0x0800dc3d
 800dc74:	0800dc3d 	.word	0x0800dc3d
 800dc78:	0800dc3d 	.word	0x0800dc3d
 800dc7c:	0800dc3d 	.word	0x0800dc3d
 800dc80:	0800ddc3 	.word	0x0800ddc3
 800dc84:	0800dceb 	.word	0x0800dceb
 800dc88:	0800dd7d 	.word	0x0800dd7d
 800dc8c:	0800dc3d 	.word	0x0800dc3d
 800dc90:	0800dc3d 	.word	0x0800dc3d
 800dc94:	0800dde5 	.word	0x0800dde5
 800dc98:	0800dc3d 	.word	0x0800dc3d
 800dc9c:	0800dceb 	.word	0x0800dceb
 800dca0:	0800dc3d 	.word	0x0800dc3d
 800dca4:	0800dc3d 	.word	0x0800dc3d
 800dca8:	0800dd85 	.word	0x0800dd85
 800dcac:	6833      	ldr	r3, [r6, #0]
 800dcae:	1d1a      	adds	r2, r3, #4
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6032      	str	r2, [r6, #0]
 800dcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e09e      	b.n	800ddfe <_printf_i+0x1ea>
 800dcc0:	6833      	ldr	r3, [r6, #0]
 800dcc2:	6820      	ldr	r0, [r4, #0]
 800dcc4:	1d19      	adds	r1, r3, #4
 800dcc6:	6031      	str	r1, [r6, #0]
 800dcc8:	0606      	lsls	r6, r0, #24
 800dcca:	d501      	bpl.n	800dcd0 <_printf_i+0xbc>
 800dccc:	681d      	ldr	r5, [r3, #0]
 800dcce:	e003      	b.n	800dcd8 <_printf_i+0xc4>
 800dcd0:	0645      	lsls	r5, r0, #25
 800dcd2:	d5fb      	bpl.n	800dccc <_printf_i+0xb8>
 800dcd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcd8:	2d00      	cmp	r5, #0
 800dcda:	da03      	bge.n	800dce4 <_printf_i+0xd0>
 800dcdc:	232d      	movs	r3, #45	@ 0x2d
 800dcde:	426d      	negs	r5, r5
 800dce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dce4:	230a      	movs	r3, #10
 800dce6:	4859      	ldr	r0, [pc, #356]	@ (800de4c <_printf_i+0x238>)
 800dce8:	e011      	b.n	800dd0e <_printf_i+0xfa>
 800dcea:	6821      	ldr	r1, [r4, #0]
 800dcec:	6833      	ldr	r3, [r6, #0]
 800dcee:	0608      	lsls	r0, r1, #24
 800dcf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcf4:	d402      	bmi.n	800dcfc <_printf_i+0xe8>
 800dcf6:	0649      	lsls	r1, r1, #25
 800dcf8:	bf48      	it	mi
 800dcfa:	b2ad      	uxthmi	r5, r5
 800dcfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dcfe:	6033      	str	r3, [r6, #0]
 800dd00:	bf14      	ite	ne
 800dd02:	230a      	movne	r3, #10
 800dd04:	2308      	moveq	r3, #8
 800dd06:	4851      	ldr	r0, [pc, #324]	@ (800de4c <_printf_i+0x238>)
 800dd08:	2100      	movs	r1, #0
 800dd0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd0e:	6866      	ldr	r6, [r4, #4]
 800dd10:	2e00      	cmp	r6, #0
 800dd12:	bfa8      	it	ge
 800dd14:	6821      	ldrge	r1, [r4, #0]
 800dd16:	60a6      	str	r6, [r4, #8]
 800dd18:	bfa4      	itt	ge
 800dd1a:	f021 0104 	bicge.w	r1, r1, #4
 800dd1e:	6021      	strge	r1, [r4, #0]
 800dd20:	b90d      	cbnz	r5, 800dd26 <_printf_i+0x112>
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d04b      	beq.n	800ddbe <_printf_i+0x1aa>
 800dd26:	4616      	mov	r6, r2
 800dd28:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd2c:	fb03 5711 	mls	r7, r3, r1, r5
 800dd30:	5dc7      	ldrb	r7, [r0, r7]
 800dd32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd36:	462f      	mov	r7, r5
 800dd38:	42bb      	cmp	r3, r7
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	d9f4      	bls.n	800dd28 <_printf_i+0x114>
 800dd3e:	2b08      	cmp	r3, #8
 800dd40:	d10b      	bne.n	800dd5a <_printf_i+0x146>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	07df      	lsls	r7, r3, #31
 800dd46:	d508      	bpl.n	800dd5a <_printf_i+0x146>
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	6861      	ldr	r1, [r4, #4]
 800dd4c:	4299      	cmp	r1, r3
 800dd4e:	bfde      	ittt	le
 800dd50:	2330      	movle	r3, #48	@ 0x30
 800dd52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd5a:	1b92      	subs	r2, r2, r6
 800dd5c:	6122      	str	r2, [r4, #16]
 800dd5e:	464b      	mov	r3, r9
 800dd60:	4621      	mov	r1, r4
 800dd62:	4640      	mov	r0, r8
 800dd64:	f8cd a000 	str.w	sl, [sp]
 800dd68:	aa03      	add	r2, sp, #12
 800dd6a:	f7ff fee1 	bl	800db30 <_printf_common>
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d14a      	bne.n	800de08 <_printf_i+0x1f4>
 800dd72:	f04f 30ff 	mov.w	r0, #4294967295
 800dd76:	b004      	add	sp, #16
 800dd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7c:	6823      	ldr	r3, [r4, #0]
 800dd7e:	f043 0320 	orr.w	r3, r3, #32
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	2778      	movs	r7, #120	@ 0x78
 800dd86:	4832      	ldr	r0, [pc, #200]	@ (800de50 <_printf_i+0x23c>)
 800dd88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	6831      	ldr	r1, [r6, #0]
 800dd90:	061f      	lsls	r7, r3, #24
 800dd92:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd96:	d402      	bmi.n	800dd9e <_printf_i+0x18a>
 800dd98:	065f      	lsls	r7, r3, #25
 800dd9a:	bf48      	it	mi
 800dd9c:	b2ad      	uxthmi	r5, r5
 800dd9e:	6031      	str	r1, [r6, #0]
 800dda0:	07d9      	lsls	r1, r3, #31
 800dda2:	bf44      	itt	mi
 800dda4:	f043 0320 	orrmi.w	r3, r3, #32
 800dda8:	6023      	strmi	r3, [r4, #0]
 800ddaa:	b11d      	cbz	r5, 800ddb4 <_printf_i+0x1a0>
 800ddac:	2310      	movs	r3, #16
 800ddae:	e7ab      	b.n	800dd08 <_printf_i+0xf4>
 800ddb0:	4826      	ldr	r0, [pc, #152]	@ (800de4c <_printf_i+0x238>)
 800ddb2:	e7e9      	b.n	800dd88 <_printf_i+0x174>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	f023 0320 	bic.w	r3, r3, #32
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	e7f6      	b.n	800ddac <_printf_i+0x198>
 800ddbe:	4616      	mov	r6, r2
 800ddc0:	e7bd      	b.n	800dd3e <_printf_i+0x12a>
 800ddc2:	6833      	ldr	r3, [r6, #0]
 800ddc4:	6825      	ldr	r5, [r4, #0]
 800ddc6:	1d18      	adds	r0, r3, #4
 800ddc8:	6961      	ldr	r1, [r4, #20]
 800ddca:	6030      	str	r0, [r6, #0]
 800ddcc:	062e      	lsls	r6, r5, #24
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	d501      	bpl.n	800ddd6 <_printf_i+0x1c2>
 800ddd2:	6019      	str	r1, [r3, #0]
 800ddd4:	e002      	b.n	800dddc <_printf_i+0x1c8>
 800ddd6:	0668      	lsls	r0, r5, #25
 800ddd8:	d5fb      	bpl.n	800ddd2 <_printf_i+0x1be>
 800ddda:	8019      	strh	r1, [r3, #0]
 800dddc:	2300      	movs	r3, #0
 800ddde:	4616      	mov	r6, r2
 800dde0:	6123      	str	r3, [r4, #16]
 800dde2:	e7bc      	b.n	800dd5e <_printf_i+0x14a>
 800dde4:	6833      	ldr	r3, [r6, #0]
 800dde6:	2100      	movs	r1, #0
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	6032      	str	r2, [r6, #0]
 800ddec:	681e      	ldr	r6, [r3, #0]
 800ddee:	6862      	ldr	r2, [r4, #4]
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	f000 f859 	bl	800dea8 <memchr>
 800ddf6:	b108      	cbz	r0, 800ddfc <_printf_i+0x1e8>
 800ddf8:	1b80      	subs	r0, r0, r6
 800ddfa:	6060      	str	r0, [r4, #4]
 800ddfc:	6863      	ldr	r3, [r4, #4]
 800ddfe:	6123      	str	r3, [r4, #16]
 800de00:	2300      	movs	r3, #0
 800de02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de06:	e7aa      	b.n	800dd5e <_printf_i+0x14a>
 800de08:	4632      	mov	r2, r6
 800de0a:	4649      	mov	r1, r9
 800de0c:	4640      	mov	r0, r8
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	47d0      	blx	sl
 800de12:	3001      	adds	r0, #1
 800de14:	d0ad      	beq.n	800dd72 <_printf_i+0x15e>
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	079b      	lsls	r3, r3, #30
 800de1a:	d413      	bmi.n	800de44 <_printf_i+0x230>
 800de1c:	68e0      	ldr	r0, [r4, #12]
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	4298      	cmp	r0, r3
 800de22:	bfb8      	it	lt
 800de24:	4618      	movlt	r0, r3
 800de26:	e7a6      	b.n	800dd76 <_printf_i+0x162>
 800de28:	2301      	movs	r3, #1
 800de2a:	4632      	mov	r2, r6
 800de2c:	4649      	mov	r1, r9
 800de2e:	4640      	mov	r0, r8
 800de30:	47d0      	blx	sl
 800de32:	3001      	adds	r0, #1
 800de34:	d09d      	beq.n	800dd72 <_printf_i+0x15e>
 800de36:	3501      	adds	r5, #1
 800de38:	68e3      	ldr	r3, [r4, #12]
 800de3a:	9903      	ldr	r1, [sp, #12]
 800de3c:	1a5b      	subs	r3, r3, r1
 800de3e:	42ab      	cmp	r3, r5
 800de40:	dcf2      	bgt.n	800de28 <_printf_i+0x214>
 800de42:	e7eb      	b.n	800de1c <_printf_i+0x208>
 800de44:	2500      	movs	r5, #0
 800de46:	f104 0619 	add.w	r6, r4, #25
 800de4a:	e7f5      	b.n	800de38 <_printf_i+0x224>
 800de4c:	0800e12d 	.word	0x0800e12d
 800de50:	0800e13e 	.word	0x0800e13e

0800de54 <memmove>:
 800de54:	4288      	cmp	r0, r1
 800de56:	b510      	push	{r4, lr}
 800de58:	eb01 0402 	add.w	r4, r1, r2
 800de5c:	d902      	bls.n	800de64 <memmove+0x10>
 800de5e:	4284      	cmp	r4, r0
 800de60:	4623      	mov	r3, r4
 800de62:	d807      	bhi.n	800de74 <memmove+0x20>
 800de64:	1e43      	subs	r3, r0, #1
 800de66:	42a1      	cmp	r1, r4
 800de68:	d008      	beq.n	800de7c <memmove+0x28>
 800de6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de72:	e7f8      	b.n	800de66 <memmove+0x12>
 800de74:	4601      	mov	r1, r0
 800de76:	4402      	add	r2, r0
 800de78:	428a      	cmp	r2, r1
 800de7a:	d100      	bne.n	800de7e <memmove+0x2a>
 800de7c:	bd10      	pop	{r4, pc}
 800de7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de86:	e7f7      	b.n	800de78 <memmove+0x24>

0800de88 <_sbrk_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	2300      	movs	r3, #0
 800de8c:	4d05      	ldr	r5, [pc, #20]	@ (800dea4 <_sbrk_r+0x1c>)
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	f7f2 ff40 	bl	8000d18 <_sbrk>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d102      	bne.n	800dea2 <_sbrk_r+0x1a>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	b103      	cbz	r3, 800dea2 <_sbrk_r+0x1a>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	20004490 	.word	0x20004490

0800dea8 <memchr>:
 800dea8:	4603      	mov	r3, r0
 800deaa:	b510      	push	{r4, lr}
 800deac:	b2c9      	uxtb	r1, r1
 800deae:	4402      	add	r2, r0
 800deb0:	4293      	cmp	r3, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	d101      	bne.n	800deba <memchr+0x12>
 800deb6:	2000      	movs	r0, #0
 800deb8:	e003      	b.n	800dec2 <memchr+0x1a>
 800deba:	7804      	ldrb	r4, [r0, #0]
 800debc:	3301      	adds	r3, #1
 800debe:	428c      	cmp	r4, r1
 800dec0:	d1f6      	bne.n	800deb0 <memchr+0x8>
 800dec2:	bd10      	pop	{r4, pc}

0800dec4 <_realloc_r>:
 800dec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec8:	4680      	mov	r8, r0
 800deca:	4615      	mov	r5, r2
 800decc:	460c      	mov	r4, r1
 800dece:	b921      	cbnz	r1, 800deda <_realloc_r+0x16>
 800ded0:	4611      	mov	r1, r2
 800ded2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ded6:	f7ff bc47 	b.w	800d768 <_malloc_r>
 800deda:	b92a      	cbnz	r2, 800dee8 <_realloc_r+0x24>
 800dedc:	f7ff fbda 	bl	800d694 <_free_r>
 800dee0:	2400      	movs	r4, #0
 800dee2:	4620      	mov	r0, r4
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	f000 f81a 	bl	800df20 <_malloc_usable_size_r>
 800deec:	4285      	cmp	r5, r0
 800deee:	4606      	mov	r6, r0
 800def0:	d802      	bhi.n	800def8 <_realloc_r+0x34>
 800def2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800def6:	d8f4      	bhi.n	800dee2 <_realloc_r+0x1e>
 800def8:	4629      	mov	r1, r5
 800defa:	4640      	mov	r0, r8
 800defc:	f7ff fc34 	bl	800d768 <_malloc_r>
 800df00:	4607      	mov	r7, r0
 800df02:	2800      	cmp	r0, #0
 800df04:	d0ec      	beq.n	800dee0 <_realloc_r+0x1c>
 800df06:	42b5      	cmp	r5, r6
 800df08:	462a      	mov	r2, r5
 800df0a:	4621      	mov	r1, r4
 800df0c:	bf28      	it	cs
 800df0e:	4632      	movcs	r2, r6
 800df10:	f7ff fbb2 	bl	800d678 <memcpy>
 800df14:	4621      	mov	r1, r4
 800df16:	4640      	mov	r0, r8
 800df18:	f7ff fbbc 	bl	800d694 <_free_r>
 800df1c:	463c      	mov	r4, r7
 800df1e:	e7e0      	b.n	800dee2 <_realloc_r+0x1e>

0800df20 <_malloc_usable_size_r>:
 800df20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df24:	1f18      	subs	r0, r3, #4
 800df26:	2b00      	cmp	r3, #0
 800df28:	bfbc      	itt	lt
 800df2a:	580b      	ldrlt	r3, [r1, r0]
 800df2c:	18c0      	addlt	r0, r0, r3
 800df2e:	4770      	bx	lr

0800df30 <_init>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	bf00      	nop
 800df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df36:	bc08      	pop	{r3}
 800df38:	469e      	mov	lr, r3
 800df3a:	4770      	bx	lr

0800df3c <_fini>:
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3e:	bf00      	nop
 800df40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df42:	bc08      	pop	{r3}
 800df44:	469e      	mov	lr, r3
 800df46:	4770      	bx	lr
